"add file delete retry to testcluster elasticsearchnode (#89095)          add retry logic for cleanup / deletion in testcluster's     elasticsearchnode, to tolerate the asynchronous nature of deletions     on the windows file-system.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix object equals for sqlqueryrequest's binarycommunication (#87887)          co-authored-by: owenniceliu <owenniceliu@tencent.com>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"handling the master stability health case where there has never been an elected master node (#89137)          if a master-eligible node comes up and has never seen an elected master     node (and assuming that a quorum requires more than one node), then it     ought to report that the master stability health is red because it     cannot form a quorum.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"remove unused datastream snapshot utility from metadata (#88535)          this method was introduced to fix datastream snapshots during     concurrent index/datastream changes but was never actually     used because we went with a different approach in the end.     => remove it and its tests","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"[ml] add new trained model deployment cache clear api (#89074)          this adds a new `_ml/trained_models/<model_id>/deployment/cache/_clear` api. this will clear the inference cache on every node where the model is allocated.","[0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]","0","0","1"
"deduplicate fetching doc-values fields (#89094)          if a docvalues field matches multiple field patterns, then es will     return the value of that doc-values field multiple times. like fetching     fields from source, we should deduplicate the matching doc-values     fields.","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 29, 0]","0","0","1"
"in the field capabilities api, re-add support for `fields` in the request body (#88972)          we previously removed support for `fields` in the request body, to ensure there     was only one way to specify the parameter. we've now decided to undo the     change, since it was disruptive and the request body is actually the best place to     pass variable-length data like `fields`.          this pr restores support for `fields` in the request body. it throws an error     if the parameter is specified both in the url and the body.          closes #86875","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 0, 0, 1, 0]","0","0","1"
"[tsdb] metric fields in the field caps api (#88695)          to assist the user in configuring the visualizations correctly while leveraging tsdb     functionality, information about tsdb configuration should be exposed via the field     caps api per field.          especially for metrics fields, it must be clear which fields are metrics and if they belong     to only time-series indexes or mixed time-series and non-time-series indexes.          to further distinguish metric fields when they belong to any of the following indices:          -  standard (non-time-series) indexes     -  time series indexes     -  downsampled time series indexes          this pr modifies the field caps api so that the mapping parameters time_series_dimension     and time_series_dimension are presented only when they are set on fields of time-series indexes.     those parameters are completely ignored when they are set on standard (non-time-series) indexes.          this pr revisits some of the conventions adopted by #78790","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 18, 0]","1","1","1"
"[ml] ecs grok patterns in the _text_structure/find_structure endpoint (#88982)          also add support for new catalina/tomcat timestamp formats used by ecs grok patterns          relates #77065          co-authored-by: david roberts <dave.roberts@elastic.co>","[0, 0, 0, 0, 7, 15, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 0, 2, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 40, 0, 0, 42, 0]","0","0","1"
"avoid expensive call to span.fromcontextornull(null) (#89135)          workaround for #89107","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0]","0","0","1"
"override bulk visit methods of exitable point visitor (#82120)          ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"fix failing test rollupactionit.testrollupindex (#89101)          fixes #88949     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"[ml] extract method for finding max task memory in autoscaling decider (#89126)          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 1, 0]","0","1","1"
"merge trivial changes from desired balance feature branch (#89109)          ","[0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 7, 5, 0, 0, 12, 0]","0","1","1"
"maybeschedulenow with delay 0 instead of 1 (#89110)          replace the 1 millisecond delay to 0 when we want to schedule a     monitoring task now.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"[transform][ci] add debug logging to find the cause of #88991 (#89080)          add debug logging to find the cause of #88991","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"add verification metadata for dependencies (#88814)          removing the custom dependency checksum functionality in favor of gradle build-in dependency verification support.          - use sha256 in favor of sha1 as sha1 is not considered safe these days.          closes https://github.com/elastic/elasticsearch/issues/69736","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0]","0","0","1"
"adjust wording in frozen tier allocation deciders (#88843)          the allocation deciders for dedicated/non-dedicated     frozen nodes use the `frozen searchable snapshot` terms     for what was renamed later (in #72699) to partially     mounted indices.          hopefully not controversial, this changes makes the     wording of the deciders more coherent with the current     documentation.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"[ml] optimize frequent items transaction lookup (#89062)          represent transactions as bitsets for faster lookups when iterating over candidate sets. this pr implements     a lookup table and a subset check based on bits. it uses this lookup table to map transactions to items, this     so-called horizontal representation is used to speedup the lookup that checks if a transaction contains the     candidate item set","[0, 0, 0, 0, 3, 1, 0, 0, 0, 1, 0, 0, 1, 4, 0, 6, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 7, 4, 11, 14, 0]","1","1","1"
"add test in vector tiles with runtime fields (#89044)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"deprecate the _knn_search endpoint (#88828)          this change deprecates the knn search api in favor of the new 'knn' option     inside the search api. the 'knn' option is now the preferred way of performing     knn search.          relates to #87625","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","1","1"
"[ml] move pytorch request id and cache hit indicator to top level (#88901)          this change will facilitate a performance improvement on the c++     side. the request id and cache hit indicator are the parts that     need to be changed when the c++ process responds to an inference     request. having them at the top level means we do not need to     parse and manipulate the original response - we can simply cache     the inner object of the response and add the outer fields around     it when serializing it.          companion to elastic/ml-cpp#2376","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 0, 0, 0, 0, 0, 0, 9, 13, 0, 1, 67, 0]","0","0","1"
"[ml] include start params in _stats for non-started model deployments (#89091)          adds the missing start parameters to the _stats api response     for non-started deployments.          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"adjust logging message for adding index block (#85237)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix failing test `rollupactionsinglenodetests` `testcannotrolluptoexistingindex`  (#89025)          the root cause of this failure was that test testcannotrollupwhileotherrollupinprogress     would finish before the asynchronously submitted rollup action had not completed. in this     case the test would finish and delete the rollup index, while the rollup process was still trying     to populate or replicate it. it looks like using the actionlistener.noop was not a good choice.          fixes https://github.com/elastic/elasticsearch/issues/88844","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"fixing a race condition in coordinationdiagnosticsserviceit #89055          this makes sure that the test cluster is stable in coordinationdiagnosticsserviceit::testblockclusterstateprocessingononenode before proceeding with the rest of test.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","0","0"
"provide tracing implementation using opentelemetry +  apm agent (#88443)          part of #84369. implement the `tracer` interface by providing a     module that uses opentelemetry, along with elastic's apm     agent for java.          see the file `tracing.md` for background on the changes and the     reasoning for some of the implementation decisions.          the configuration mechanism is the most fiddly part of this pr. the     security manager permissions required by the apm java agent make     it prohibitive to start an agent from within elasticsearch     programmatically, so it must be configured when the es jvm starts.     that means that the startup cli needs to assemble the required jvm     options.          to complicate matters further, the apm agent needs a secret token     in order to ship traces to the apm server. we can't use java system     properties to configure this, since otherwise the secret will be     readable to all code in elasticsearch. it therefore has to be     configured in a dedicated config file. this in itself is awkward,     since we don't want to leave secrets in config files. therefore,     we pull the apm secret token from the keystore, write it to a config     file, then delete the config file after es starts.          there's a further issue with the config file. any options we set     in the apm agent config file cannot later be reconfigured via system     properties, so we need to make sure that only `static` configuration     goes into the config file.          i generated most of the files under `qa/apm` using an apm test     utility (i can't remember which one now, unfortunately). the goal     is to setup up a complete system so that traces can be captured in     apm server, and the results in elasticsearch inspected.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 18, 0]","1","1","1"
"[ml] mute tests for inference result format change (#89075)          these tests will fail if elastic/ml-cpp#2376 with     them unmuted. #88901 will follow up with the java     side changes.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] adjust assignment serialization versions after backport (#89071)          ... of #88855","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"improve efficiency of boundedbreakiteratorscanner fragmentation algorithm (#89041)          as discussed in #73569 the current implementation is too slow in certain scenarios.          the inefficient part of the code can be stated as the following problem:          given a text (gettext()) and a position in this text (offset), find the sentence     boundary before and after the offset, in such a way that the after boundary is     maximal but respects end boundary - start boundary < fragment size.          in case it's impossible to produce an after boundary that respects the said     condition, use the nearest boundary following offset.          the current approach begins by finding the nearest preceding and following boundaries,     and expands the following boundary greedily while it respects the problem restriction. this     is fine asymptotically, but breakiterator which is used to find each boundary is sometimes     expensive.          this new approach maximizes the after boundary by scanning for the last boundary     preceding the position that would cause the condition to be violated (i.e. knowing start     boundary and offset, how many characters are left before resulting length is fragment size).     if this scan finds the start boundary, it means it's impossible to satisfy the problem     restriction, and we get the first boundary following offset instead (or better, since we     already scanned [offset, targetendoffset], start from targetendoffset + 1).","[0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 10, 0, 6, 3, 0]","1","1","1"
"[ml] mute model deployment rolling upgrade tests for backport (#89069)          ... of #88855","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"make org.elasticsearch.cluster.routing.routingnode#copyshards use array (#88788)          we used this in three spots, where it copies potentially huge arrays.     one of those spots doesn't need the `copyshards` call at all     and can use the normal iterator as there's no concurrent modfication.          the other two spots can at least just use an array, which will iterate     a little faster than a mutable list and also potentially saves another     round copying the array in the `arraylist` constructor that the compiler     seems to not be able to eliminate in all cases.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 0, 0, 1, 0]","1","1","1"
"rest tests and spec for bulk update api keys (#89027)          this pr adds rest api spec and yaml test files for the bulkupdateapikey     operation.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"wrap code in new tracing contexts where required (#88920)          part of #84369. split out from #88443. this pr wraps parts of the code     in a new tracing context. this is necessary so that a tracing     implementation can use the thread context to propagate tracing headers,     but without the code attempting to set the same key twice in the thread     context, which is illegal. in order to avoid future diff noise, the wrapped     code has mostly been refactored into methods.          note that in some places we actually clear the tracing context     completely. this is done where the operation to be performed should have     no association with the current trace context. for example, when     creating a new index via a rest request, the resulting background tasks     for the index should not be associated with the rest request in     perpetuity.","[0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 6, 4, 6, 2, 0]","1","1","1"
"refactor authentication handling for grant actions (#88944)          this pr establishes a cleaner contract between `transportgrantaction`     and its sub-classes: it instruments checking grant authentication     instead of requiring this of sub-classes, and allows these to override     a handler method for successfully granted authentication.          closes #88636","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 4, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 0, 0, 2, 0]","0","1","1"
"[ml] previously assigned models should get at least one allocation (#88855)          when for some reason ml nodes are replaced (cluster resize, upgrade, etc.),     it is possible that some models cannot be allocated at all. then, while     the cluster is temporarily undersized, all cores are given for allocations     of the models that have survived. if those ml nodes return later, there may     be model deployments that were previously allocated that now do not get any     allocations. the reason is that our planner will try to preserve all current     allocations.          operationally, this is not what serves best our users. instead, as we are     already in a cluster that does not have enough resources to fully allocate     all model deployments, we should try to give at least one allocation to each     model that has previously been allocated.          in order to know a model has previously been allocated, this commit adds a field     to `trainedmodelassignment` called `max_assigned_allocations` which records the     max number of allocations a deployment has received in its life. we can then use     this to establish whether a deployment has ever been allocated.          finally, we modify the `assignmentplanner` so that after computing a plan we     check whether the plan gives at least one allocation to all previously allocated models.     if not, we then compute a plan that tries to give at least one allocation to each     previously allocated model. we can solve this just using bin-packing. having that     plan we can invoke the planner one more time to optimize the rest of the allocations     whilst preserving the single allocations for previously allocated models.          ","[0, 0, 0, 0, 15, 3, 2, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 17, 2, 0, 75, 0]","0","0","1"
"rename ignoredindexsettings to ignoreindexsettings in mountsearchablesnapshotrequest (#79604)          relates to #75982, #88987 and #89061          co-authored-by: tanguy leroux <tlrx.dev@gmail.com>     co-authored-by: gaobinlong <bellengao@tencent.com>","[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","0","1","0"
"health api - monitoring local disk health (#88390)          this pr introduces the local health monitoring functionality needed for     #84811 . the monitor uses the `nodeservice` to get the disk usage stats     and determines the node's disk health.          when a change in the disk's is detected or when the health node changes,     this class would be responsible to send the node's health to the health     node. currently this is simulated with a method that just logs the     current health.          the monitor keeps the last reported health, this way, if something fails     on the next check it will try to resend the new health state.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"refactor wildcardexpressionresolver to better track usages of indices lookup (#89000)          this is a pure refactoring of the wildcardexpressionresolver.     the objective is to restrict access to the indices lookup through the context parameter only.     eventually, security is going to plug into the context and only show a restricted view of the     indices lookup, particular to the user context.","[0, 0, 0, 0, 1, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 18, 17, 1, 1, 13, 0]","1","1","1"
"[transform] improve error handling in state persistence (#88910)          transform persists the internal state of a transform (e.g. the data cursor) in state document.     this change improves the error handling and fixes the problem described in #88905. a transform     can now recover from this problem.          fixes #88905","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"further attempt at capturing reaper error logs     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 2, 0]","1","0","0"
"support source fallback for double, float, and half_float field types (#89010)          this change adds a sourcevaluefetchersorteddoubleindexfielddata to support double doc values types for source fallback. this also adds support for double, float and half_float field types.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0]","0","0","1"
"preemptively initialize routing nodes and indices lookup on all node types (#89032)          follow up to #89005 running the initialization as soon as possible on non-master     nodes as well.     ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]","0","0","1"
"[ml] fix nlp inference_config bwc serialization tests (#89011)          the tests were failing because of span not being nulled out for question_answering and text_similarity tasks.          but, this change also attempts to make it more future proof so that if changes occur to the nlp task or tokenization configurations it will cause a failure more quickly and require handling the bwc testing.          closes: #89008","[0, 0, 0, 0, 10, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 18, 10, 0, 1, 8, 0]","1","0","0"
"wrap ml model loading task in new tracing context (#89024)          part of #84369.          ml uses the task framework to register a tasks for each loaded model.     these tasks are not executed in the usual sense, and it does not make     sense to trace them using apm. therefore, make it possible to register     a task without also starting tracing.","[0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 1, 0, 0, 1, 0]","1","1","1"
"wrap async search action logic in a new trace context (#88937)          part of #84369. split out from #88443. this pr wraps parts logic in     `transportsubmitasyncsearchaction` in a new tracing context. this is     necessary so that a tracing implementation can use the thread context     to propagate tracing headers, but without the code attempting to set the     same key twice in the thread context, which is illegal.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0]","1","1","1"
"ensure tests don't use flat polygons (#89002)          * ensure tests don't use flat polygons          polygons with colinear points cannot be tessellated.          * fixed test error message to not be box specific","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0]","1","0","0"
"mute testblockclusterstateprocessingononenode (#89038)          related to: #89015","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"make it explicit that test expects no rebalancing (#89028)          this is required in case new shards allocator might be more proactive with rebalancing.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 0]","1","1","1"
"wrap async ql task execution in new tracing context (#89029)          part of #84369. split out from #88443. this pr wraps parts logic in     `asynctaskmanagementservice` in a new tracing context. this is     necessary so that a tracing implementation can use the thread context     to propagate tracing headers, but without the code attempting to set the     same key twice in the thread context, which is illegal.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0]","1","1","1"
"audit log bulk update of api keys (#88942)          this pr adds a new audit trail event for when api keys are updated in     bulk.          relates: #88758","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"preemptively compute routingnodes and the indices lookup during publication (#89005)          computing routing nodes and the indices lookup takes considerable time     for large states. both are needed during cluster state application and     prior to this change would be computed on the applier thread in all cases.     by running the creation of both objects concurrently to publication, the     many shards benchmark sees a 10%+ reduction in the bootstrap time to     50k indices.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 13, 2, 0, 0, 0]","0","1","1"
"wrap enrich execute action in new tracing context (#89021)          part of #84369. split out from #88443. this pr wraps parts logic in     `internalexecutepolicyaction` in a new tracing context. this is     necessary so that a tracing implementation can use the thread context     to propagate tracing headers, but without the code attempting to set the     same key twice in the thread context, which is illegal.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0]","1","1","1"
"make it explicit that test expects no rebalancing. (#88993)          this is required in case new shards allocator might be more proactive with     rebalancing.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","1","1"
"reject unknown request body fields in mount api (#88987)          the parser used to parse mount api requests is configured to     ignore unknown fields. i suspect we made it this way when it     was created because we were expecting to change the     request's body in the future, but that never happened.          this leniency confuses users (#75982) so we think it is better     to simply reject requests with unknown fields starting v8.5.0.          because the high level rest client has a bug (to be fixed in #79604)     that injects a wrong ignored_index_settings we decided to just ignore     and not reject that one on purpose.          closes #75982","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"[ml] mute tests for issue #89008 (#89009)          related #89008","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix compilation in the rescore plugin (#89004)          add source fallback operation when looking up a the factor field added in #88735          resolves #88985","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"eliminating initial delay of coordinationdiagnosticsservice#beginpollingclusterformationinfo for integration tests (#89001)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","1","1"
"extract least/most available disk space diskusage (#88996)          ","[0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 15, 0]","0","0","1"
"update version serialization for ccr backport and re-enable bwc tests (#88998)          updates versions for backport (#88995) of original fix (#88875)          relates to #88997","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"add `synthetic_source` support to `aggregate_metric_double` fields (#88909)          this pr implements synthetic_source support to the aggregate_metric_double     field type          relates to #86603     ","[0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 1, 5, 0]","0","0","1"
"save loop over all local shards in indicesclusterservice.applyclusterstate (#88210)          we can save another two loops here by checking for shards to fail in the same loop that updates or creates shards.     also, we only need to loop over all indices services locally once for deleting indices as a whole or just shards     out of existing indices.","[0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 5, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 20, 0, 1, 1, 0]","1","0","0"
"support source fallback for byte, short, and long fields (#88954)          this change adds source fallback support for byte, short, and long fields. these use the already     existing class sourcevaluefetchersortednumericindexfielddata.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix renaming data streams with ccr replication (#88875)          this commit fixes the situation where a user wants to use ccr to replicate indices that are part of     a data stream while renaming the data stream. for example, assume a user has an auto-follow request     that looks like this:          ```     put /_ccr/auto_follow/my-auto-follow-pattern     {     `remote_cluster` : `other-cluster`,     `leader_index_patterns` : [`logs-*`],     `follow_index_pattern` : `{{leader_index}}_copy`     }     ```          and then the data stream `logs-mysql-error` was created, creating the backing index     `.ds-logs-mysql-error-2022-07-29-000001`.          prior to this commit, replicating this data stream means that the backing index would be renamed to     `.ds-logs-mysql-error-2022-07-29-000001_copy` and the data stream would *not* be renamed. this     caused a check to trip in `transportputlifecycleaction` asserting that a backing index was not     renamed for a data stream during following.          after this commit, there are a couple of changes:          first, the data stream will also be renamed. this means that the `logs-mysql-error` becomes     `logs-mysql-error_copy` when created on the follower cluster. because of the way that ccr works,     this means we need to support renaming a data stream for a regular `create follower` request, so a     new parameter has been added: `data_stream_name`. it works like this:          ```     put /mynewindex/_ccr/follow     {     `remote_cluster`: `other-cluster`,     `leader_index`: `myotherindex`,     `data_stream_name`: `new_ds`     }     ```          second, the backing index for a data stream must be renamed in a way that does not break the parsing     of a data stream backing pattern, whereas previously the index     `.ds-logs-mysql-error-2022-07-29-000001` would be renamed to     `.ds-logs-mysql-error-2022-07-29-000001_copy` (an illegal name since it doesn't end with the     rollover digit), after this commit it will be renamed to     `.ds-logs-mysql-error_copy-2022-07-29-000001` to match the renamed data stream. this means that for     the given `follow_index_pattern` of `{{leader_index}}_copy` the index changes look like:          | leader cluster | follower cluster |     |--------------|-----------|     | `logs-mysql-error` (data stream) | `logs-mysql-error_copy` (data stream) |     | `.ds-logs-mysql-error-2022-07-29-000001`      | `.ds-logs-mysql-error_copy-2022-07-29-000001` |          which internally means the auto-follow request turned into the create follower request of:          ```     put /.ds-logs-mysql-error_copy-2022-07-29-000001/_ccr/follow     {     `remote_cluster`: `other-cluster`,     `leader_index`: `.ds-logs-mysql-error-2022-07-29-000001`,     `data_stream_name`: `logs-mysql-error_copy`     }     ```          relates to https://github.com/elastic/elasticsearch/pull/84940 (cherry-picked the commit for a test)     relates to https://github.com/elastic/elasticsearch/pull/61993 (where data stream support was first introduced for ccr)     resolves https://github.com/elastic/elasticsearch/issues/81751","[0, 0, 0, 0, 5, 5, 0, 2, 0, 0, 0, 1, 12, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 20, 0, 1, 11, 0]","1","0","0"
"fix race conditions in master stability polling (#88874)          this fixes some possible race conditions in the cluster formation polling of the stable master code.     it also prevents the list of tasks from growing indefinitely.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"[ml] address potential bug where trained models get stuck in starting after being allocated to node (#88945)          when a model is starting, it has been rarely observed that it will lock up while trying to restore the model objects to the native process.          this would manifest as a trained model being stuck in `starting` while also being assigned to a node. so, there is a native process started and task available on the assigned nodes, but the model state never gets out of `starting`.","[0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 32, 0, 0, 3, 0]","0","0","1"
"avoid expensive loop in indicesdeletedfromclusterstate() when possible (#88986)          the loop over all indices here gets very expensive for large states, we     can avoid it often when metadata changes but not the indices maps.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]","0","1","1"
"[ml] frequent items: use a bitset for deduplication (#88943)          speedup frequent_items by using bitsets instead of lists of longs. with this item sets     can be faster de-duplicated. a bit is set according to the order of top items (by count).","[0, 0, 0, 0, 8, 7, 0, 1, 0, 0, 0, 1, 5, 26, 2, 8, 0, 0, 0, 1, 0, 4, 1, 3, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 6, 2, 0, 0, 0, 2, 0, 0, 31, 127, 0, 183, 69, 0]","1","1","1"
"remove calls to deprecated xcontent method (#84733)          this removes many calls to the last remaining `createparser` method that     i deprecated in #79814, migrating callers to one of the new methods that     it created.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0]","0","1","1"
"synthetic source: fix scaled_float rounding (#88916)          there were some cases where synthetic source wasn't properly rounding in     round trips. `0.15527719259262085` with a scaling factor of     `2.4206374697469164e16` was round tripping to `0.15527719259262088`     which then round trips up to `0.0.1552771925926209`, rounding the wrong     direction! this fixes the round tripping in this case through ever more     paranoid double checking and nudging.          closes #88854","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 5, 0, 3, 2, 0]","1","0","0"
"port tests for `date_range` (#88958)          this ports some of the tests for `date_range` from a high overhead     `integtestcase` to a lower overhead `aggregatortestcase`.     `aggregatortestcase` is also lower level so it can find more fun things     like memory leaks. and it enables values source type testing for     `date_range`.          inspired by #55502 by andy.bristol@elastic.co","[0, 0, 0, 0, 6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","1","1"
"[ml] add new text_similarity nlp task (#88439)          text_similarity is a cross-encoding task that compares two text inputs at inference time.          it can be used for cross-encoding re-ranking     ```     post _ml/trained_models/cross-encoder__ms-marco-tinybert-l-2-v2/_infer     {     `docs`:[{ `text_field`: `berlin has a population of 3,520,031 registered inhabitants in an area of 891.82 square kilometers.`}, {`text_field`: `new york city is famous for the metropolitan museum of art.`}],     `inference_config`: {     `text_similarity`: {     `text`: `how many people live in berlin?`     }     }     }     ```          with results:     ```     {     `inference_results`: [     {     `predicted_value`: 7.235751628875732     },     {     `predicted_value`: -11.562295913696289     }     ]     }     ```          or with just raw text similarity. here is an example for check if two questions are very similar:     ```     post _ml/trained_models/cross-encoder__quora-distilroberta-base/_infer     {     `docs`:[{ `text_field`: `what is your quest?`}, { `text_field`: `what is your favorite color?`}, { `text_field`: `is the swallow african or european?`}, { `text_field`: `what is the airspeed velocity of a swallow carrying coconuts?`}, { `text_field`: `how fast is an unladen swallow?`}],     `inference_config`: {     `text_similarity`: {     `text`: `what is the airspeed velocity of an unladen swallow?`     }     }     }     ```     with results:     ```     {     `inference_results`: [     {     `predicted_value`: -8.312414169311523     },     {     `predicted_value`: -8.239330291748047     },     {     `predicted_value`: -8.256011009216309     },     {     `predicted_value`: -4.1945390701293945     },     {     `predicted_value`: -3.294121742248535     }     ]     }     ```","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 3, 0]","0","0","1"
"support bulk updates of api keys (#88856)          this pr adds a new api route to support bulk updates of api keys:          `post _security/api_key/_bulk_update`          the route takes a list of ids (`ids`) of api keys to update, along     with the same request parameters as the single operation route:          - `role_descriptors` - the list of role descriptors specified for the     key. this is one of the two parts that determines an api key’s     privileges.     - `metadata_flattened` - the searchable metadata associated     to an api key          analogously to the single operation route, a call to `_bulk_update`     automatically updates the `limited_by_role_descriptors`, `creator`, and     `version` fields for each api key.          the implementation ports the single api key update operation to use the     new bulk functionality under the hood, translating as necessary at the     transport layer.          relates: #88758","[0, 0, 0, 0, 9, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 1, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 16, 18, 0, 1, 10, 0]","0","0","1"
"remove `gettestname()` from the index name (#88941)          this pr removes the test name from the source index name and replaces it     with a 14 char long random alphanumeric.          in the past, we had chosen to include the test name in the index name so that     there are no naming conflicts between indexes of different tests. however, some     times test names include invalid characters that make index creation fail.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"remove test only code from allocationservice (#88889)          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0]","1","1","1"
"simplify allocation service (#88850)          this pr simplifies allocation service by extracting common code to a method.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0, 0, 6, 0]","0","1","1"
"improve eql sequence circuit breaker precision (#88538)          fixes #88300","[0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 0, 4, 0]","1","0","0"
"fix pluginsservicetests on windows (#88971)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"ensure that the filesettingservice closes the config file input stream (#88953)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0]","0","1","0"
"add deprecation message for deprecated plugin apis (#88961)          plugin apis are defined by a set of interfaces from server. many of     these apis are actually implementation details of the system. as we move     these implementation details to use different hook mechanisms so that     internals are only implementable by builtin components, the existing     plugin apis need to be deprecated. java provides a means to indicate     deprecation - through the `@deprecated` annotation. but that annotation     is only seen when compiling a plugin implementing deprecated hooks, and     only then if deprecation warnings are not disabled.          this commit adds an introspection step to plugin initialization which     inspects each loaded plugin and looks for any apis marked with the     @deprecated annotation which are overridden by the plugin. if any are     found, deprecation log messages are then emitted to the deprecation log.","[0, 0, 0, 0, 4, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 1, 0, 0, 5, 0]","0","0","1"
"[test] reliable settings.json update in filesettingsit (#88959)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"deprecate overriding discoveryplugin internals (#88925)          discoveryplugin allows extending getjoinvalidator and     getelectionstrategies. these are implementation details of the system.     this commit deprecates these methods so that plugin authors are     discouraged from overriding them.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"fix slow assertion running in production in routingnodes (#88951)          this needs to be in a separate method, it's currently running in production     and uses significant cpu time.          broken in #88794","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]","1","0","0"
"deprecate network plugins (#88924)          network plugins provide network implementations. in the past this has     been used for alternatives to netty based networking, using the jdk's     nio. however, nio has now been removed, and it is inadvisable for a     plugin to implement this low level part of the system.     therefore, this commit marks the networkplugin interface as deprecated.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"bring back lost optimization to building metadata from a diff (#88950)          this was lost again due to another merge conflict.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"ensure that the extended socket options tcp_keepxxx are available (#88935)          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 13, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 21, 7, 0, 15, 20, 0]","0","0","1"
"make settings diffable (#88815)          making settings diffable so that index metadata diffs     are smaller whenever the metadata changes without a setting change     as well as to make index setting updates over a wider number of     indices faster.          this saves about 3% of cpu time on master and about half that on data nodes     that is just burnt for writing setting strings     when bootstrapping many shards benchmarks benchmarks to 50k indices.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0]","0","1","1"
"[ml] add sentence-piece unigram tokenizer (#88858)          add internal unigram tokenizer.          this tokenizer is the same that xlm-roberta utilizes, along with many other cross-lingual models and tasks.          this does not fully integrate (adding configuration, integrating into nlp tasks, etc.). but instead is just the internal tokenization and some tests showing how it runs with a precompiled charsmap.","[0, 0, 0, 0, 7, 2, 1, 2, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 8, 18, 0, 3, 18, 0]","0","0","1"
"[ml] fix bert and mpnet tokenization bug when handling unicode accents (#88907)          when handling unicode accents, it may have been that bert tokenizations removed the incorrect characters. this would result in an exceptionally strange result and possibly an error.          closes #88900","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]","1","0","0"
"speed up operations on blobstoreindexshardsnapshots (#88912)          this fixes a couple of slow points in `blobstoreindexshardsnapshots`,     which become performance critical when working with large repositories.          1. fix `physicalfiles` containing the same `fileinfo` instances repeatedly for every     snapshot that holds the file. without this fix the map can hold lists as long as the     number of snapshots for the shard for files common to all snapshots of the shard.     also, only lazy build the map since it's only used during snapshotting and internalize     the logic into `blobstoreindexshardsnapshots` so we don't have to bother with wrapping     as unmodifiable.     2. add efficient copy constructors for all 3 operations on the shard to avoid     expensive looping over all snapshots and their files in many cases.     3. use list instead of redundant map in deserialization, we weren't using the map     for any deduplication anyways and are safe here thanks to jackson's duplicate name     detection          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 1, 3, 0]","1","0","0"
"add generatestubreleasenotes task (#88933)          when we feature freeze elasticsearch, we need to create stub     documentation for the next version. this turns out to be as simple as     running the usual `generatereleasenotes` task without any inputs.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0]","0","0","1"
"script: reindex & updatebyquery metadata (#88665)          adds metadata classes for reindex and updatebyquery contexts.          for reindex metadata:     * _index can't be null     * _id, _routing and _version are writable and nullable     * _now is read-only     * op is read-write must be 'noop', 'index' or 'delete'          reindex metadata keeps the originx value for _index, _id, _routing and _version     so that `reindexer` can see if they've changed.          if _version is null in the ctx map, or, equivalently, the augmentation     `setversiontointernal()` was called by the script, `reindexer` sets document     versioning to internal.  if `_version` is `null` in the ctx map, `getversion`     returns `long.min_value`.          for updatebyquery metadata:     * _index, _id, _version, _routing are all read-only     * _routing is also nullable     * _now is read-only     * op is read-write and one of 'index', 'noop', 'delete'          closes: #86472","[0, 0, 0, 0, 6, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 5, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 8, 7, 0, 1, 15, 0]","0","0","1"
"remove unused plugins dir var from server cli (#88917)          split out of #88443. remove the now-unused plugins directory variable from the     server cli code.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0]","1","1","1"
"use tracing api in taskmanager (#88885)          split out from #88443. part of #84369. use the tracing api that was     added in #87921 in taskmanager. this won't actually do anything until we     provide a tracer with an actual implemenation.","[0, 0, 0, 0, 3, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 6, 1, 6, 4, 0]","0","0","1"
"add source fallback for keyword fields using operation (#88735)          this change adds an operation parameter to fielddatacontext that allows us to specialize the field data that are returned from fielddatabuilder in mappedfieldtype. keyword, integer, and geo point field types now support source fallback where we build a doc values wrapper using source if doc values doesn't exist for this field under the operation script. this allows us to have source fallback in scripting for the scripting fields api.","[0, 0, 0, 0, 4, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 22, 0, 4, 77, 0]","0","0","1"
"bump versions after 8.3.3 release     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"speedup balanceunbalancedclustertests (#88794)          this commit speeds up the above tests (and probably many others) by changing how     we assert the invariant. previously invariant was checked by rebuilding     internal collections from scratch and comparing them against ones already     present in the object after every single modification twice. this commit     verifies the invariant once after all bulk changes.     ","[0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 11, 2, 0, 4, 0]","1","1","1"
"preventing exceptions on node shutdown in integration tests (#88827)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"mute rollupactionsinglenodetests#testrollupdatastream (#88891)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix sqlsearchit testalltypeswithrequesttooldnodes (#88866) (#88883)          resolves #88866","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"log more details in taskassertions (#88864)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"make tuple a record (#88280)          tuple is used extensively across the es codebase and can be effectively represent as a java record.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"script: rename timestamp constant now in metadata (#88870)          the value is `_now` and there was a previous metadata     value `_timestamp` (see test removal in #88733) so the     name is confusing.          also renames the method `gettimestamp()` to `getnow()`     to reflect the change.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 5, 0]","1","1","1"
"script: protected _source inside update scripts (#88733)          ctxmap delegates all metadata keys to it's `metadata` container and     all other keys to it's source map.  in most write contexts (update,     update by query, reindex), the source map should only contain one     key, `_source`, which has a `map<string, object>`.          this change adds validations to writes to the source map that rejects     insertion of invalid keys, illegal removal of the `_source` key, and     illegally overwriting the `_source` mapping with the wrong type.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"split x-pack testing into multiple ci jobs (#88697)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"format runtime geo_points (#85449)          this formats the result of the `fields` section of the `_search` api for     runtime `geo_point` fields using the `format` parameter like we do for     non-runtime `geo_point` fields. this changes the default format for     those fields from `lat, lon` to `geojson` with the option to get `wkt`     or any other format we support.          the fix does so by preserving the `double, double` nature of the     `geo_point` rather than encoding it immediately in the script. callers can     use the results. the field fetchers use the `double, double` natively,     preserving as much precision as possible. the queries quantize the points     exactly like lucene indexing does. and like the script did before this pr.          closes #85245     ","[0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 4, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 16, 0]","1","0","0"
"mute failing bwc tests     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"adding logic to master_is_stable indicator to check for discovery problems (#88020)          ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0]","0","0","1"
"refactor indicespermission authorize method (#88662)          this commit is separating authorization check from computation of     index access control. the change is simply a preparation for allowing     the access control to be computed lazily.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"bump to version 8.5.0     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] fix minor tokenization bug when using fill_mask tasks with roberta tokenizer (#88825)          depending on where your <mask> resides when using byte-part encoding (e.g. roberta), it could be split out erroneously.          this commit fixes that bug.          note, this bug existed before: #88737","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","0","0"
"add checkstyle rule for broken switch cases (#88739)          we use `between(x, y)` calls with `switch` statements in tests to     randomize test behaviour. however, some usages define `case` statements     that can never execute, because the `case` value is outside the range     defined by the `between` call.          write a rule that inspects the switches and the cases, and fails on the     broken cases. this rule checks `between`, `randomintbetween` and     `randomint`.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix errors in geo test introduced during refactoring (#88722)          ","[0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0]","1","0","0"
"fix queued snapshot assignments after partial snapshot fails due to delete (#88470)          we can't just assume that snapshot after snapshot is assigned right,     we must re-compute the right node or whether or not the shard even     exists still.          closes #86724     ","[0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 0, 0, 4, 0]","1","0","0"
"fix searchablesnapshotspersistentcacheintegtests.testpersistentcachecleanupafterrelocation (#88819)          this test failed twice in the last year,     (always on 7.17 branch) and i suspect that     10 seconds are not enough for the persistent     cache to process cluster state updates and     deletes docs. this change gives a bit more     time to the test. it also uses indexwriter     getdocstats() method to have more accurate     number of docs that includes deletions.          closes #86060","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"mute cartesianshapequerytests#testqueryrandomgeocollection (#88832)          relates https://github.com/elastic/elasticsearch/issues/88682","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] fix basicdistributedjobsit.testmaxconcurrentjoballocations (#88820)          this test contained a pointless fork which used to run a     synchronized method `simultaneously` in two threads.     after #88710 the parallel threads really did work at the     same time which caused the test to fail (because sometimes     both threads stop the same ml node).          this change stops the ml nodes one after the other, which     was effectively what was happening before #88710.          fixes #88810","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"fix embeddedimplclassloadertests on windows (#88813)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"add stable indicator for plugin descriptor (#88823)          a forgotten piece of https://github.com/elastic/elasticsearch/pull/88731     is whether a plugin descriptor in memory came from a stable or internal     descriptor. this commit adds a flag for that. note that this is implied     by the file that was loaded, so no new property is needed.     ","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 14, 0]","0","0","1"
"script: updatebyquery can read doc version if requested (#88740)          allow updatebyquery to read the doc version if set in the request via     `version=true`.          if `version=true` is unset or false, the `ctx._version` is `-1`     indicating internal versioning via seq.          fixes: #55745","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"[ml] add inference cache hit count to inference node stats (#88807)          the inference node stats for deployed pytorch inference     models now contain two new fields: `inference_cache_hit_count`     and `inference_cache_hit_count_last_minute`.          these indicate how many inferences on that node were served     from the c++-side response cache that was added in     https://github.com/elastic/ml-cpp/pull/2305. cache hits     occur when exactly the same inference request is sent to the     same node more than once.          the `average_inference_time_ms` and     `average_inference_time_ms_last_minute` fields now refer to     the time taken to do the cache lookup, plus, if necessary,     the time to do the inference. we would expect average inference     time to be vastly reduced in situations where the cache hit     rate is high.","[0, 0, 0, 0, 2, 3, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 16, 1, 1, 44, 0]","0","0","1"
"[tsdb] exclude `index.block.write` setting when creating rollup index (#88812)          pr #88565 modified the rollup action so that it copies all index settings from the source     to the rollup index. however, the rollup action expilitly requires that the source index has     the index.block.write: true.          since the rollup index must be writeable when it is created, this pr excludes the index.block.write i     ndex setting when creating the rollup index.          the index.block.write index setting is explictly set to true at the end of the rollup action (step 4).","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","0"
"fix conflict between #83345 and #87269     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"add min_* conditions to rollover (#83345)          ","[0, 0, 0, 0, 37, 31, 2, 12, 0, 0, 0, 0, 1, 0, 0, 13, 1, 0, 1, 2, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 137, 3, 18, 52, 0]","0","0","1"
"tsdb: implement downsampling ilm action for time-series indices (#87269)          this pr adds support for an ilm action that downsamples a time-series index     by invoking the _rollup endpoint (#85708)          a policy that includes the rollup action will look like the following          put _ilm/policy/my_policy     {     `policy`: {     `phases`: {     `warm`: {     `actions`: {     `rollup`: {     `fixed_interval`: `24h`     }     }     }     }     }     }          relates to #74660     fixes #68609","[0, 0, 0, 0, 9, 8, 1, 1, 0, 0, 0, 1, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 0, 0, 0, 0, 0, 0, 18, 37, 2, 3, 20, 0]","1","0","0"
"permit accessdeniedexception while listing blobs (#88802)          on windows it's possible to get an `accessdeniedexception` while listing     blobs in the presence of concurrent deletions. today this causes things     like a snapshot delete to fail, but we should accept the exception and     move on.          closes #88716","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0]","1","1","1"
"fix npe when checking if the last snapshot was success (#88811)          this fixes a npe when checking the recorded failure snapshot as the     start timestamp in this case is always null.     this also moves away from checking timestamps to determin if the latest     snapshot is a success as we currently use wall-clocks for the start/end     timestamps we record and they're subject to drifts.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","1","0","0"
"support knn vectors in disk usage action (#88785)          this change adds support for knn vector fields to the `_disk_usage` api. the     strategy:     * iterate the vector values (using the same strategy as for doc values) to     estimate the vector data size     * run some random vector searches to estimate the vector index size          co-authored-by: yannick welsch <yannick@welsch.lu>          closes #84801","[0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 1, 0]","0","0","1"
"update indices permissions to enterprise search service account (#88703)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0]","0","0","1"
"add fielddatacontext (#88779)          mappedfieldtype#fielddatabuilder() currently takes two parameters, a fully qualified     index name and a supplier for a searchlookup. we expect to add more parameters here     as we add support for loading fielddata from source. rather than telescoping the     parameter list, this commit instead introduces a new fielddatacontext carrier object     which will allow us to add to these context parameters more easily.","[0, 0, 0, 0, 36, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 31, 0]","0","0","1"
"tsdb: rename some methods (#88790)          this renames a couple of methods on `indexmode` to be more clear and     adds some javadoc.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","0","0","1"
"remove blocks when disk threshold monitoring is disabled (#87841)          this change ensures that existing read_only_allow_delete blocks that     are placed on indices when the flood_stage watermark threshold is     exceeded, are removed when the disk threshold monitoring is disabled.          this is done by changing how internalclusterinfoservice behaves when     disabled. with this change, it will keep calling the registered     listeners periodically, but with an empty clusterinfo.          closes #86383","[0, 0, 0, 0, 3, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 3, 0]","0","1","1"
"user profile - enforce stricter validation for literal username (#88792)          when a security domain is configured to use literal username for user     profiles. the username becomes part of the profile uid. because this uid     is then used in many places, it is desirable to have stricter validation     rule for the username. for example, comma should not be allowed because     it clashes with the common way to separate multiple strings.          this pr tighten the validation to only allow alphanumeric chars for     usernames for literal username mode.          note that the default auto-generation mode for profile uid is     recommended in almost all cases. so this change should not be a concern     for end-users. in fact, this chagne brings the allowed characters for     literal username close to what auto-generation (base64) allows.          relates: #86952","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"fix racing when loading new jwks from multiple threads (#88753)          this pr ensures the mutation of jwks is done in a single thread and     visible to all other threads, which in turn ensures validation to be     correctly performed concurrently.          relates: #88023","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"fix test failure with double operation precision (#88803)          fixes #88791","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 2, 0]","1","0","0"
"serialize id last for updateapikeyrequest (#88805)          this pr changes the order in which fields are read and written for     updateapikeyrequest to better accommodate generalization for bulk     updates. fields other than id will be shared between single operation     and bulk update requests and may therefore be extracted into a base     class; unlike constructor parameters, the order in which we read/write     fields matters for inheritance.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0]","0","1","1"
"relax assertion about retry count for s3 repos (#88801)          in #88015 we made it so that downloads from s3 would sometimes retry     more than the configured limit, if each attempt seemed to be making     meaningful progress. this causes the failure of some assertions that the     number of retries was exactly as expected. this commit weakens those     assertions for s3 repositories.          closes #88784 closes #88666","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","1","1"
"[ml] add a frequent items aggregation (#83055)          add an aggregation called frequent_items, a bucket aggregation which finds frequent item sets. it is a form of association rules mining that identifies items that often occur together. it also helps you to discover relationships between different data points (items).          for more information about usage have a look at #86037.          this implements frequent items using an algorithm called eclat.","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"support `dry run` mode for updating desired nodes (#88305)          add the dry_run query parameter to support simulating of updating of desired nodes. the update request will be validated, but no cluster state updates will be performed. in order to indicate that the response was a result of a dry run, we add the dry_run run field to the json representation of a response.          see #82975","[0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 11, 0, 0, 27, 0]","0","0","1"
"file settings service (#88329)          adds a file watcher service for applying elasticsearch     settings though a file. the saved cluster state through this     method is immutable through the rest api.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 0, 0, 14, 0]","0","0","1"
"add support for reading stable plugin descriptors (#88731)          the new stable plugin api will have a slightly different descriptor file     format. this commit prepares for stable plugins by adding support for     reading those new files. the basic info for a plugin is the same like     name and version info. other stuff like classname are not necessary. the     one additional property specific to the new plugins is `modular`, which     indicates whether the jars of the plugin should be loaded as named     modules (this is akin to setting the module path when running java).","[0, 0, 0, 2, 15, 3, 1, 4, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 60, 31, 0, 0, 33, 0]","0","0","1"
"rename abstractkeyworddocvaluesfield to basekeyworddocvaluesfield and make it abstract (#88778)          * make abstractkeyworddocvaluesfield abstract     * abstractkeyworddocvaluesfield -> basekeyworddocvaluesfield     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"mute diskthresholdsettingstests.testminimumtotalsizeforbelowlowwatermark     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"check buffer too short when decompressing with deflate (#88786)          this commit checks for an edge case in decompression with deflate where     the input is shorter than the deflate header size. before this commit     a slice error would occur with a negative bound. with this commit an ioexception is thrown.          closes #88471","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","1","0","0"
"introduce tracing interfaces (#87921)          part of #84369. split out from #87696. introduce tracing interfaces in     advance of adding apm support to elasticsearch. the only implementation     at this point is a no-op class.","[0, 0, 0, 0, 9, 8, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 5, 0, 2, 0, 55, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 15, 0, 1, 85, 0]","0","0","1"
"add health user action for unhealthy slm policy failure counts (#88523)          this pr adds a user action to the slm health indicator which checks each slm policy's invocations     since last success field and reports degraded health (yellow) in the event that any policy is at or     above the failure threshold (default is 5 failures in a row).","[0, 0, 0, 0, 7, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 15, 0, 0, 4, 0]","0","0","1"
"removing the notion of components from the health api (#88663)          this commit removes the notion of components from the health api. they are gone from being     a top-level field in the response, and indicators is promoted into its place.","[0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 17, 1, 0, 8, 2, 0, 0, 0, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 10, 5, 0, 0, 0, 1, 0, 0, 76, 10, 5, 0, 74, 0]","0","0","1"
"expanding switch statement to cover all cases (#88772)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"implement logic for storing fields that are neither dimensions nor metrics (aka tags) (#87929)          for label fields (fields that are not dimensions nor metrics)     we just propagate the latest value into the rollup index, the     same that we do for a counter metric.","[0, 0, 0, 0, 5, 2, 1, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 18, 15, 1, 0, 12, 0]","1","1","1"
"fix reactivestorageit#testscalewhileshrinking (#88630)          this commit fixes reactivestorageit#testscalewhileshrinking, the     testfilestore missed handling an exception while the total space     was calculated. this made the get node stats to fail therefore     the actual capacity was computed incorrectly. in addition to that,     when the shards are colocated, the index files that were part of     the other node take a while to get deleted. this made impossible     to allocate the shard anywhere, therefore the test failed in these     cases.          closes #88430","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0]","1","0","0"
"add package cache to embeddedimplclassloader (#88537)          the initial implementation of the embedded class loader took a brute     force approach to supporting multi-release jars - iterating over all     possible release versions when searching for classes and resources. this     change improves upon that approach by deriving and caching package and     version specific maps, so class and resource loading can go directly to     the class and resource bytes, respectively, rather than searching.          it's hard to get empirical numbers to quanify just how much this change     improves the performance of classes loaded by this loader, and there is     typically only a couple of hundred classes loaded, but the initial cli     seems observably much quicker, while the server startup has improved     just a bit (at least on my machine).","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"log api key update failures  (#88766)          this pr adds trace-level logging for failures of api key updates.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"assert that buildexceptions is called correctly (#88698)          assert that buildexceptions is called correctly          relates #88203     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","0","0","1"
"[ml] refactor some nlp tokenizer internals (#88737)          ","[0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 43, 4, 0, 22, 1, 0]","0","0","1"
"fix incorrect switch statements (#88757)          fixes aggregation tests that contain switch statements with branches that will never execute.     the tests use a between(x, y) switch expression, but there are case values that are outside     the randomised range.          fixes #88745     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"[ml] rebalance model assignments when outdated assignments exist (#88761)          when a cluster has been updated from a version prior to the version     when distributed model allocation was introduced (8.4), there is     a possibility that after the full cluster has been upgraded there     still are assignments with routing entries that have `current_allocations`     and `target_allocations` equal to `0`. those are outdated and we     should trigger a rebalance in order to apply the new distributed     model allocation.          this commit detects that and ensures a rebalance is done in such     scenario.          in addition, this fixes a bug where previous routing entries on     nodes where the planner does not assign any allocations for a model     would stick around.","[0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 5, 2, 1, 0]","1","0","0"
"increase `http.max_header_size` default to 16kb (#88725)          our current default for the http.max_header_size setting is 8kb. this     is lower than the current default for kibana (16kb in 8.x), and the ess     proxy (1mb based on the go http library default). to align with the     current convention of other elastic components, this pr increases the     es header size setting default to 16kb.          closes #88501","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","0"
"change healthmetadata to clusterstate.custom (#88736)          metadata.custom persists across a full cluster restart which is unnecessary for healthmetadata since the master will always reset the health metadata upon election. for this reason clusterstate.custom is more suitable.          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0]","0","1","1"
"cache available tier names on discoverynode and discoverynodes (#88436)          we burn almost 2% of the runtime in many-shards benchmark bootstrapping on looping     through the roles just to compare names for the data tier allocation decider.     this change makes that step a lot cheaper by caching the role names in sets     that only need to be build rarely.     ","[0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 5, 0]","0","1","1"
"remove help_url,rename summary to symptom, and user_actions to diagnosis  (#88553)          remove help_url,rename summary->symptom,user_actions->diagnosis     separate the diagnosis `message` field in `cause` and `action`     co-authored-by: mary gouseti <mgouseti@gmail.com>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 1, 0, 0, 13, 7, 0, 0, 71, 0]","1","1","1"
"tsdb: downsampling copies all settings from source to rollup index (#88565)          this pr modified the rollup action so that all index settings are copied from     the source index to the rollup index.          relates to #85708     ","[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 14, 0, 1, 2, 0]","0","1","0"
"pull alpine image in a retry in docker tests (#88654)          closes #88651. when using an `alpine` image to perform container     fiddling, first explicitly pull the image and do so in a loop, in an     attempt to make things more robust.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"replace `stoprandomnode` call with more generic calls (#88710)          `stoprandomnode` with predicate is rather specific call. this change replaces it     with more generic `stopnode` and `getnodenamethat`.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0]","0","1","1"
"clean up fsrepositorytests (#88723)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 8, 2, 0, 14, 0]","1","1","1"
"fix erroneous switch/cases in ilm tests (#88748)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","1","0","0"
"fix switch in keywordfieldmappertests (#88747)          closes #88746","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"if signature validation fails, reload jwks and retry if new jwks are found (#88023)          co-authored-by: niels dewulf","[9, 0, 0, 0, 4, 1, 1, 1, 1, 1, 0, 4, 11, 1, 0, 6, 0, 0, 0, 2, 0, 1, 5, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 27, 13, 0, 2, 23, 0]","1","1","0"
"fix knnsearchbuildertests#testequalsandhashcode failures          the knnsearchbuilder constructor validates that k is always less than num_cands.     but the mutateinstance method could increase k past num_cands. now we construct     the instance with a larger num_cands to make sure this never happens.          closes #88734.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"convert disk watermarks to relativebytesizevalues (#88719)          * convert disk watermarks to relativebytesizevalues          similar to the existing watermark setting for the frozen tier.          pre-requisite for pr 88639 that plans to introduce max headroom     settings for the disk watermarks, similar to the frozen tier max     headroom setting.          * add changelog          * revert 20gb to 20gb          * make formatnotrailingzerospercent non static          * bytesizevalue.minus_one          * remove getminimumtotalsizeforbelowwatermark          * remove comment          * fix minor stuff          * make parsing of relativebytesizevalue faster          mimicks older definitelynotpercentage function          * remove locale from strings.format          * more minus_one","[0, 1, 0, 0, 11, 3, 4, 0, 2, 3, 1, 1, 3, 0, 1, 8, 0, 0, 1, 1, 4, 4, 2, 11, 0, 1, 0, 1, 0, 0, 0, 1, 1, 2, 21, 8, 0, 0, 0, 0, 0, 0, 46, 28, 4, 2, 50, 1]","1","0","0"
"use status code 500 for errors if no shard failed (#88551)          if there is no shard failure we would like to use a generic     internal server error other than a service unavailable.     moreover, if the cause is known we use a status code that     reflects the cause.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix validation of close_point_in_time request (#88702)          closepointintimerequest#validate should return a validation error for an     invalid pit_id, but it throws an iae instead. this mistake prevents     close_point_in_time tasks of requests with empty pit_id from being removed.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 12, 0, 2, 1, 0]","1","0","0"
"[test] add mock plugins service loadserviceproviders (#88690)          ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix javadoc typo in esclientyamlsuitetestcase          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"integrate ann into _search endpoint (#88694)          this pr adds a new `knn` option to the `_search` api to support ann search.     it's powered by the same lucene ann capabilities as the old `_knn_search`     endpoint. the `knn` option can be combined with other search features like     queries and aggregations.          addresses #87625","[0, 0, 0, 0, 11, 4, 0, 1, 0, 0, 0, 0, 2, 0, 0, 14, 1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 2, 17, 20, 0]","0","0","1"
"use origin for the client when running _features/_reset (#88622)          co-authored-by: gordon brown <arcsech@gmail.com>","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 4, 0]","1","1","1"
"use a record class for shardsnapshotmetadeleteresult (#88721)          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"avoid capturing snapshotsinprogress$entry in queue (#88707)          today each time there's shards to snapshot we enqueue a lambda which     captures the current `snapshotsinprogress$entry`. this is a pretty     heavyweight object, possibly several mb in size, most of which is not     necessary to capture, and with concurrent snapshots across thousands of     shards we may enqueue many hundreds of slightly different such objects.     with this commit we compute a more efficient representation of the work     to be done by each task in the queue instead.          relates #77466","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 9, 3, 1, 0, 0]","0","0","1"
"tsdb: improve rollupshardindexer performance (#88539)          improve rollupshardindexer by reducing the calls to bytesref.deepcopyof(tsid)","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"speed up documentparser.innerparseobject (#88715)          making this a little smaller so it inlines more often and more importantly     avoid getting the current field name redundantly before entering the loop which     is not free when the parser is a `dotexpandingxcontentparser`.     this change gives a significant boost to `beatsmapperbenchmark.benchmarkparsekeywordfields`.          results below are pretty stable, running with a large number of iterations.          before:          ```     result `org.elasticsearch.benchmark.index.mapper.beatsmapperbenchmark.benchmarkparsekeywordfields`:     9039.270 ±(99.9%) 28.001 ns/op [average]     (min, avg, max) = (9008.778, 9039.270, 9062.246), stdev = 18.521     ci (99.9%): [9011.269, 9067.271] (assumes normal distribution)     ```          after:          ```     result `org.elasticsearch.benchmark.index.mapper.beatsmapperbenchmark.benchmarkparsekeywordfields`:     8645.649 ±(99.9%) 53.677 ns/op [average]     (min, avg, max) = (8568.319, 8645.649, 8688.210), stdev = 35.504     ci (99.9%): [8591.972, 8699.327] (assumes normal distribution)     ```","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"mute geodistancequerybuildergeoshapetests#testtoquery (#88714)          relates https://github.com/elastic/elasticsearch/issues/88712","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"mute geoboundingboxquerybuildergeoshapetests#testtoquery (#88713)          relates to https://github.com/elastic/elasticsearch/issues/88711","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"include `metadata` in audit log for api key events (#88642)          this pr adds audit logging for api key metadata, when an api key is     created, granted, or updated.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"upgrade to lucene snapshot lucene-9.3.0-snapshot-b8d1fcfd0ec (#88706)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0]","0","0","1"
"reintroduce the ability to configure s3 repository credentials in cluster state (#88652)          revert of #46147, we want to keep this functionality around for a little longer.","[0, 0, 0, 1, 6, 4, 0, 5, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 5, 2, 0]","0","0","1"
"simplify node stopping call (#88547)          there is no need to use stoprandomnode/namepredicate combination to stop a node by its name.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 57, 0]","1","1","1"
"move geo_shape query builder tests to spatial module (#88588)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]","1","1","1"
"ensure transform has done something before stop gets called with (#88696)          ensure transform has done something before stop gets called with wait_for_checkpoint=true          fixes #79621     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"[ml] disallow autoscaling downscaling in two trained model assignment scenarios (#88623)          with 8.4, trained model assignments now take cpu into consideration. this changes our calculation for scaling down until we fully support autoscaling according to cpu requirements.          we shouldn't allow scaling down if there is any model assignment that isn't fully allocated (meaning, not enough cpus)     we don't allow scaling down unless model assignments require less than half of the current scale's cpu count.     point 2 is a place holder. fix 1 will be a requirement even in the future with vcpu autoscaling.","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0]","1","0","0"
"adding the ability to register a peerfinderlistener to coordinator (#88626)          this commit adds the ability to register a peerfinderlistener with coordinator. the listener has an     onfoundpeersupdated that is called whenever the collection of peers changes (whether added to     or removed from).","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] muting internalcategorizationaggregationtests testreducerandom (#88685)          due to https://github.com/elastic/elasticsearch/issues/87240","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix double rounding errors for disk usage (#88683)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 15, 0]","1","0","0"
"replace health request with a state observer. (#88641)          this was using health request assuming yellow index is one with all primaries     initialized. this is not true as newly created index remain yellow when     primaries allocation is throttled. this was discovered while working on a new     shards allocator.","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 1, 0, 3, 0]","0","1","0"
"[ml] fail model deployment if all allocations cannot be provided (#88656)          when we cannot scale up (autoscaling is disabled) we should fail     requests to start a trained model deployment whose allocations     cannot be provided.          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 1, 1, 0]","1","0","0"
"adding cardinality support for random_sampler agg (#86838)          this adds support for the `cardinality` aggregation within a random_sampler.          this usecase is helpful in determining the ratio of unique values compared to the count of total documents within the sampled set.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"use custom task instead of generic ackedclusterstateupdatetask (#88643)          use custom task instead of generic ackedclusterstateupdatetask that is not     intended to be used with batching.","[0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 3, 0]","1","1","1"
"reinstate test cluster throttling behavior (#88664)          co-authored-by: elastic machine <elasticmachine@users.noreply.github.com>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 1, 0, 0]","1","1","1"
"mute testreadblobwithprematureconnectionclose     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"simplify plugin descriptor tests (#88659)          the plugin descriptor tests are extremely verbose, always specifying all     of the plugin properties to write to a descriptor file. yet most of the     time only one property needs to be tested. this commit simplifies these     tests by having a set of template descriptor properties, and a helper     method to write and read those properties, allowing additional     properties to override those in the template.","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 8, 0, 1, 11, 0]","0","0","1"
"[ml] make deployment infer requests fully cancellable (#88649)          when an infer request is made, it may or may not be queued for later execution. if the caller making the inference request stops listening for the result, we should not execute action.          this commit allows for infer requests made to deployed models to be cancelled even after they are queued for inference.          related to: #88009","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 12, 0]","0","1","0"
"fix testcorruptiononnetworklayer (#88644)          `post _cluster/reroute?retry_failed` doesn't reset the failure counter     on any `initializing` shards, and waiting for no `initializing` shards     isn't quite enough to ensure that we've finished all possible retries     because there could instead be an ongoing async fetch.          this commit fixes this using a `clusterstateobserver` to observe the     retry counter instead of using the cluster health action.          relates #88314     closes #88615","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 1, 0]","1","0","0"
"move synthetic source from behind the tsdb feature flag (#88645)          to date, synthetic source has only been available in snapshot builds. this     commit makes the mode parameter on the _source mapper public, meaning     that synthetic source will be available in 8.4.0.          note that the force_synthetic_source parameter on search, get and mget     remains protected by the tsdb feature flag.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0]","0","1","0"
"[transform] handle update error correctly (#88619)          if updating a transform fails a bug prevents reporting the error correctly          relates #88434","[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0]","1","0","0"
"fix multi-value handling in composite agg (#88638)          multi-valued number fields are handled differently by the composite terms agg in comparison to the regular terms agg.     in particular, we use set semantics when grouping on multi-valued numeric fields using terms / multi-terms aggs while     we don't do the same for composite terms aggs. this commit fixes composite aggs to use the same set semantics as     well.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"make nodetaskrequest tasks cancellable (#88621)          we pass the actiontask to the subsequent task action so that the task action can be cancelled if the upstream tasks are cancelled.          but, the actiontask passed is created by the `nodetaskrequest`, which isn't cancellable.          this commit addresses this discrepancy and allows for down stream task actions to be cancelled if the upstream http connections are closed.          related to: https://github.com/elastic/elasticsearch/pull/88081","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"consolidate user role resolution for api keys (#88542)          this refactor extracts the user role resolution logic for api keys from     apikeygenerator. it plugs the shared resolver class into api key     creation and update handling. it also removes apikeygenerator since     the class is now trivial. a new rest base handler for api key-related     rest actions ensures that the api key service is enabled before we     perform role resolution, which was the only other responsibility left     to apikeygenerator.","[0, 0, 0, 0, 0, 6, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 8, 1, 0, 13, 0]","1","1","1"
"fix azure repository tests randomly taking many minutes (#88559)          if we run into a seed that causes many fake exceptions and thus retries,     a 100ms retry interval will add up to minutes of test time for tests like     `testlargeblobcountdeletion` that trigger thousands of requests.     there's no reason not to speed this up by 10x via more aggressive retry     timings as far as i can see so i reduced the timings to avoid randomly     blocked tests.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"remove random runner from build tools (internal) tests (#88577)          this removes unrequited overhead for writing build tool and build tool internal tests and mechanically ports all junit3 tests to junit4.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0]","1","1","1"
"propagate alias filters to significance aggs filters (#88221)          propagate alias filters to significance aggs filters          if we have an alias filter, use it as part of the background filter on a     signficant terms agg. previously, alias filters did not apply to background     filters so this will change bg_count results for some significant terms aggs     using background filter.          closes #81585","[0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 9, 0]","1","1","1"
"script: metadata for update context (#88333)          adds the `metadata()` api call and a metadata class for the update context.          there are different metadata available in the update context depending     on whether it is an update or an insert (via upsert).          for update, scripts can read `index`, `id`, `routing`, `version` and `timestamp`.          for insert, scripts can read `index`, `id` and `timestamp`.          scripts can always read and write the `op` but the available ops are different.          updates allow 'noop', 'index' and 'delete'.     inserts allow 'noop' and 'create'.          refs: #86472","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0]","0","0","1"
"enable synthetic source support on constant keyword fields (#88603)          this commit implements synthetic source support on constant keyword fields,     which will now always emit their value as part of the retrieved source.","[0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0]","0","1","0"
"[ml] fix ml api cancellation when http connection is closed (#88616)          api cancellation was erroneously using the node-name for the parent task     id. task ids are constructed via the node id, not name.          this fixes that bug.          related to:   - https://github.com/elastic/elasticsearch/pull/88030  -     https://github.com/elastic/elasticsearch/pull/88142  -     https://github.com/elastic/elasticsearch/pull/88009","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0]","1","0","0"
"ensure new privs in api key update test (#88602)          this pr ensures that we pick new cluster privileges when making a     non-noop api key update in tests for auto updating user fields.          closes #88596.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"weaken assertion in transportservice#dostop (#88601)          we may concurrently register a handler for a (closed) connection to a     remote node while stopping. such a handler will be completed immediately     on the sending path if not picked up in `dostop`, but sometimes it's     picked up in `dostop` anyway. this commit weakens the assertion to     account for this case too.          closes #88112 closes #88459 closes #88597","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix docker positional params (take 2) (#88584)          as part of #50277, we removed the `take_file_ownership` option from the     docker entrypoint script and the associated chroot calls, and instead     just defaulted to running the image as `elasticsearch` instead of     `root`.          however, we didn't check that it was still possible to pass cli options     to elasticsearch via cli arguments, and broke this by mistake. this is     probably an uncommon pattern, versus environment variables or a config     file.  nevertheless, it is supposed to be possible and is mentioned in     the documentation.          fix the problem by suppling the missing positional params when calling     elasticsearch, and add a test case so that we don't break it again.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"update to to gradle wrapper 7.5 (#85141)          this updates the gradle wrapper to a 7.5          fixes #85123","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","1","0","0"
"reduce boilerplate in plugins utils tests (#88593)          tests for pluginsutils need to create many different plugin descriptors.     but the vast majority of these just need a plugin name and dependencies.     this commit adds a utility method to simplify these tests.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 19, 0, 0, 6, 0]","0","0","1"
"deduplicate mappings in persisted cluster state (#88479)          ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add issuer to get _ssl/certificates (#88445)          this commit adds the certificate issuer to the values returned by _ssl/certificates","[0, 0, 0, 0, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 0, 0, 6, 0]","0","0","1"
"disable url connection caching in spiclassiterator (#88586)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0]","0","0","1"
"[ml] add new cache_size parameter to trained_model deployments api (#88450)          with: https://github.com/elastic/ml-cpp/pull/2305 we now support caching pytorch inference responses per node per model.          by default, the cache will be the same size has the model on disk size. this is because our current best estimate for memory used (for deploying) is 2*model_size + constant_overhead.          this is due to the model having to be loaded in memory twice when serializing to the native process.          but, once the model is in memory and accepting requests, its actual memory usage is reduced vs. what we have `reserved` for it within the node.          consequently, having a cache layer that takes advantage of that unused (but reserved) memory is effectively free. when used in production, especially in search scenarios, caching inference results is critical for decreasing latency.","[0, 0, 0, 0, 6, 7, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 36, 0]","0","0","1"
"add 'mode' option to `_source` field mapper (#88211)          currently we have two parameters that control how the source of a document     is stored, `enabled` and `synthetic`, both booleans. however, there are only     three possible combinations of these, with `enabled:false` and `synthetic:true`     being disallowed. to make this easier to reason about, this commit replaces     the `enabled` parameter with a new `mode` parameter, which can take the values     `stored`, `synthetic` and `disabled`. the `mode` parameter cannot be set     in combination with `enabled`, and we will subsequently move towards     deprecating `enabled` entirely.","[0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 7, 13, 0, 0, 5, 0]","0","0","1"
"remove geo_shape dependency on fieldfiltermapperplugintests (#88583)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] rebalance model allocations when an ml job is stopped (#88323)          when ml jobs get stopped (ie. anomaly detection, data frame analytics, etc.)     it could be that memory has been freed up and that we can now assign allocations     for a model deployment.          this commit adds to the `trainedmodelassignmentclusterservice` so that when     a cluster state update is observed we also look whether a persistent task     associated to an ml job has been stopped. if so, we trigger rebalance.","[0, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, 4, 1, 0, 1, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 4, 0, 0, 24, 0]","0","0","1"
"revert `fix passing positional args to es in docker (#88502)`          this reverts commit 9f4b32a20a776ff6c888e0534f176559c63be700.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"move geo_shape query string test to the spatial module (#88556)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"move geo_shape percolator test to the spatial module (#88554)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]","1","1","1"
"remove collector implementation from bucketcollector (#88444)          bucketcollector has now a method called #ascollector that returns the current bucketcollector wrapped as a     lucene collector.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0]","0","1","1"
"move geo_shape disk usage test to the spatial module (#88555)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]","1","1","1"
"remove duplicate definition of checkstyle version in use (#88339)          we only rely on the checkstyle version in the buildlibs.toml gradle version catalogue with this change.     also added some hints for gradle best practices.          this is an aftermath of #88283","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0]","0","0","1"
"setup periodic snyk monitoring per branch (#88522)          adds a new ci jenkins job configuration for running snyk dependency monitoring on a daily basis. we setup a service account in snyk and resolve the api token for publishing in vault.          related to #87620","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"always close directory streams (#88560)               ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 3, 3, 0]","0","0","1"
"reserved cluster state service (#88527)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add transport action immutable state checks (#88491)          ","[0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","0","0","1"
"polling cluster formation state for master-is-stable health indicator (#88397)          this change polls all known master-eligible nodes for cluster formation information in the event     that the existing master node goes null. this is so that the information is available to the health     api when it is needed.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]","0","1","1"
"[transform] finetune schedule to be less noisy on retry and retry slower (#88531)          reduce amount of log and audits if the same failure happens in a row     and change the mininimum wait time for retrying to 5s","[0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 3, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 14, 1, 0, 28, 0]","1","1","1"
"updatable api keys - auto-update legacy rds (#88514)          api keys created in 7.x may have legacy superuser user role     descriptors. in 8.x this is handled by translating these to 8.x     superuser role descriptors when they are read. instead, we can     automatically update them (once) when an api key is first updated. this     pr tweaks our noop detection logic to enable this.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix typo in transportforcemergeaction and transportclearindicescachea… (#88064)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"fixed nullpointerexception on bulk request (#88358)          java's `arraylist.toarray()` returns provided array when collection is empty.     here is created a one-element array which contains null element.     thus, returned `bulkresponse` may contains a null element as `bulkitemresponse`.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"avoid needless index metadata builders during reroute (#88506)          this set of changes makes `org.elasticsearch.cluster.routing.allocation.indexmetadataupdater#applychanges` essentially free even in clusters of o(100k) indices compared to using a disproportionately increasing amount of cpu as the cluster grows (about 1% of cpu time while bootstrapping many shards at 25k indices benchmarks and increasing from there).     it also appears to have additional benefits end-to-end in those benchmarks, likely as a result of making diffing metadata cheaper by retaining more instance equality across the board.          relates #77466","[0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 30, 28, 0, 0, 4, 0]","0","0","1"
"set metadata on request in api key noop test (#88507)          this pr fixes api key integration test setup for noops. in the noop     test, we use the initial update request as a reference to choose     suitable values to force non-noop updates, including metadata. however,     metadata can be null on the initial request, meaning that the     underlying api key will retain the metadata it was assigned on     creation. this can lead to test failure when the metadata on the     initial request is null, and the subsequent metadata update matches     the metadata chosen at api key creation time.          closes #88503.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"fix passing positional args to es in docker (#88502)          as part of #50277, we removed the `take_file_ownership` option from the     docker entrypoint script and the associated chroot calls, and instead     just defaulted to running the image as `elasticsearch` instead of     `root`.          however, we didn't check that it was still possible to pass cli options     to elasticsearch via cli arguments, and broke this by mistake. this is     probably an uncommon pattern, versus environment variables or a config     file.  nevertheless, it is supposed to be possible and is mentioned in     the documentation.          fix the problem by suppling the missing positional params when calling     elasticsearch, and add a test case so that we don't break it again.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"support cartesian shape with doc values (#88487)          shape field type generated doc values by default now.","[0, 0, 0, 0, 21, 8, 0, 1, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 5, 0, 12, 0, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 2, 0, 0, 13, 34, 0, 1, 77, 0]","0","1","0"
"promote usage of subjects in authentication class (#88494)          this pr is a follow-up of #86246 to further clean up the authentication     class by: * promote usage of the subject class. the user field and a few     other   related fields are now removed from authentication. relevant     methods   have their implementation replaced by using subjects and same     behaviours are retained. * remove the temporary internal runasuser     class. its essence is about   wire serialisation which is now merged     into authentication itself. * simplify serialisation of regular user     object. all the complexities of   handling inner user is now completely     within the authentication class   itself. * consolidate assertions in     different places into a single method that   is called in constructors.     also removed a few assertions because there   is no runasuser class     anymore and a user object is just a simple user.          relates: #86246 relates: #86544          resolves: #80117","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 6, 1, 0, 7, 0]","1","1","1"
"add ccx 2.0 feature flag (#88451)          ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"implement count for wrapped weight in contextindexsearcher (#88396)          implements weight#count() for wrapped weights that don't change matching documents.          relatess #88284","[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 7, 1, 8, 0]","0","1","1"
"script: ingest metadata and ctxmap (#88458)          create a `metadata` superclass for ingest and update contexts.          create a `ctxmap` superclass for `ctx` backwards compatibility in ingest and update contexts.  `script.ctxmap` was moved from `ingest.ingestsourceandmetadata`          `ctxmap` takes a `metadata` subclass and validates update via the `fieldproperty`s passed in.          `metadata` provides typed getters and setters and implements a `map`-like interface, making it easy for a class containing `ctxmap` to implement the full `map` interface.          the `fieldproperty` record that configures how to validate fields. fields have a `type`, are `writeable` or read-only, and `nullable` or not and may have an additional validation useful for set/enum validation.","[0, 0, 0, 3, 11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 6, 0, 0, 7, 0]","0","0","1"
"rename immutable cluster state to reserved cluster state (#88481)          ","[0, 0, 0, 0, 1, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 3, 0, 0, 0, 7, 0, 6, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 27, 0]","0","0","1"
"watcher: add test of date math with ctx.execution_time (#88466)          add one test to confirm the below watcher compare condition is always     met.          ```     `condition`: {     `compare`: {     `ctx.execution_time`: {     `gte`: `<{now-5m}>`     }     }     }     ```          refs: #88408 #88467","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"speed up creating new indexmetadatagenerations without removed snapshots (#88344)          * pre-collect all new blobuuids to a set before removing stale identifiers. this avoids iterating over the lookup map and its each entry's map for every identifier (which results in cubic time complexity!).     * avoid creating copies of maps just to stale data, instead populate them on the go.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 0, 0, 2, 0]","0","1","1"
"[ml] performance improvement for precompiled normalization (#87709)          this is a performance improvement for the precompiled normalizer. it no longer requires the graphemes to be sub-strings and relies on code-point counts between grapheme boundaries for normalization.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 20, 0, 7, 8, 0]","0","0","1"
"refactor json parsing in immutable handlers (#88492)          ","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 0, 3, 1, 0]","0","0","1"
"[ml] indicate overall deployment failure if all node routes are failed (#88378)          if all node routes are failed, we should indicate that the whole deployment is failed through its assignment state.          the failures could be due to multiple reasons, so for detailed information, the individual node routing reasons should be investigated.","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0]","1","0","0"
"[ml] add exception detail to auditor failure to install template (#88498)          while looking at a different issue i noticed cases of the     ml auditor failing to install its template. unfortunately     this log message didn't include the exception, so it was     not possible to say for sure why this happened. this pr     adds the exception.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"fix lost optimization from merge conflict in building metadata from diff (#88497)          the flag value was lost due to a merge mistake, bringing it back.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"recalculate balance using up-to date weights when throttle (#88385)          fix a bug when a shard could be re-balanced using outdated node weights in case     2 or more simulated shards movements happens in a row for a single index.     ","[0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 3, 0]","1","0","0"
"simplify map copying (#88432)          this commit introduces a method that simplifies creating a map deep copy","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 5, 0]","0","1","1"
"make diffableutils.diff implementation agnostic (#88403)          diffableutils has methods for reading and creating diffs of maps. the     two implementation types, a jdk map or immutableopenmap, have different     methods and implementations. however, the format of the diff is always     the same, so the diff creation can be shared. this commit creates an     internal mapbuilder abstraction to allow both map and immutableopenmap     to produce diffs from the same mapdiff implementation.          relates #86239","[0, 0, 0, 2, 3, 1, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0, 4, 2, 0, 1, 1, 1, 0, 2, 1, 0, 7, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 4, 0, 0, 2, 28, 0, 0, 6, 2]","0","1","1"
"ingest: start separating metadata from ingestsourceandmetadata (#88401)          pull out the implementation of `metadata` from `ingestsourceandmetadata`.          `metadata` will become a base class extended by the update contexts: ingest, update, update by query and reindex.          `metadata` implements a map-like interface, making it easy for a class containing `metadata` to implement the full `map` interface.","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 10, 14, 0, 4, 75, 0]","0","1","0"
"move runtime fields base scripts out of scripting fields api package. (#88488)          two runtime fields script classes were placed into the package for the scripting fields api. these have     been moved to the script package where the rest of the runtime fields script classes live. this is a     purely mechanical change.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"enable trace logging for test and increase timeout (#88477)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]","1","1","1"
"mute reactivestorageit#testscaleduringsplitorclone (#88480)          relates to https://github.com/elastic/elasticsearch/issues/88478.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"track the count of failed invocations since last successful policy snapshot (#88398)          add tracking for the number of invocations that have passed between a successful slm snapshot     and the most recent failure. these stats would be helpful for reporting on slm policy health.","[0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 4, 0]","0","0","1"
"avoid noisy exceptions on data nodes when aborting snapshots (#88476)          currently, an abort (especially when triggered an index delete) can     manifest as either an aborted snapshot exception, a missing index exception or     an npe. the latter two show up as noise in logs.     this change catches effectively all of these cleanly as aborted snapshot     exceptions so they don't get logged as warnings and avoids the npe if     a shard was removed from the index service concurrently by using the     api that throws on missing shards to look it up.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0]","1","1","1"
"fix reactivestoragedeciderservicetests testnodesizefordatabelowlowwatermark (#88452)          fix this test unexpectedly being off by one by increasing the accuracy of the fp division     (better to have a larger dividend and divisor) a little. i could easily reproduce the failure     without the fix but with it, the test cases we use at least run accurate with the change.          closes #88433","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"info logging of snapshot restore and completion (#88257)          but debug (silent) logging of snapshot restore/completion when     done in the context of ccr or searchable snapshots.","[0, 0, 0, 0, 3, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 10, 0]","0","0","1"
"updatable api keys - noop check (#88346)          this pr adds a noop check for api key updates. if we detect a noop     update, i.e., an update that does not result in any changes to the     existing doc, we skip the index step and return updated = false in     the response.          this pr also extends test coverage around various corner cases.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 0]","0","0","1"
"use consistent shard map type in indexservice (#88465)          it's faster and easier to reason about if we always have     an immutable collections map here and not have the type depend     on what the last operation on the index service was.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 2, 0]","1","1","1"
"stop registering testgeoshapefieldmapperplugin in esintegtestcase (#88460)          instead of registering the plugin by default, implementations that need it are responsible on registering the plugin.","[0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0]","1","1","1"
"tsdb: rollupshardindexer logging improvements (#88416)          1. add trace log guards to avoid high cost method     2. log the time it took to rollup a shard","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"audit api key id when create or grant api keys (#88456)          the api key id generation is handled by the request class since #63221.     this makes it possible to audit it when creating or granting api keys.     this pr makes the necessary changes for it to happen.          relates: #63221","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"bound random negative size test in searchsourcebuildertests#testnegativesizeerrors (#88457)          -1 is handled differently by the xcontent code path so this test will fail when `randomintbetween` lands on -1.          to fix, we add another integer for the xcontent test which starts at -2.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"updatable api keys - logging audit trail event (#88276)          this pr adds a new audit trail event for when api keys are updated.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"polish reworked loggedexec task (#88424)          some polishing of reworked loggedexec task","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0]","0","0","1"
"pass indexmetadata to allocationdecider.can_remain (#88453)          we need the metadata in a number of allocation deciders and pass it to other allocation methods.     passing it here avoids redundant lookups across deciders.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 36, 0]","0","1","1"
"[tsdb] cache rollup bucket timestamp to reduce rounding cost (#88420)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"correct some typos/mistakes in comments/docs (#88446)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"make clusterinfo use immutable maps in all cases (#88447)          this class's maps are used very hot in the disk threshold allocation     decider. moving them from hppc maps to unmodifiable map wrapping     `hashmap` has led to a measurable slowdown in the many-shards benchmark     bootstrapping. lets use immutable map copies here exclusively to make     performance outright better and more predictable via a single implementation.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0]","1","1","1"
"reduce map lookups (#88418)          this change replcase 2 hash map operations with a single one and a null     check.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","1","1"
"don't index geo_shape field in abstractbuildertestcase (#88437)          this commit stops adding the geo_shape field mapper by default and adds the mapper only when it is needed.","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","0","0","1"
"remove usages of testgeoshapefieldmapperplugin from enrich module (#88440)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix test memory leak (#88362)          ","[0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0]","1","0","0"
"improve error when sorting on incompatible types (#88399)          currently when sorting on incompatible types, we get     class_cast_exception error (code 500). this patch improves     the error to explain that the problem is because     of incompatible sort types for the field across     different shards and returns user error (code 400).          closes #73146","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"remove usages of bucketcollector#getleafcollector(leafreadercontext) (#88414)          the method bucketcollector#getleafcollector(leafreadercontext) should be removed in favour of     bucketcollector#getleafcollector(aggregationexecutioncontext)","[0, 0, 0, 0, 2, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 4, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 36, 0]","0","1","1"
"mute reactivestorageit::testscalewhileshrinking (#88431)          for #88430","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix realmidentifier xcontent parser (#88410)          realmidentifier's constructor has type before name. but the parser had     it reserved. this pr fixes the parser to have the same argument order as     the constructor. it also adds relevant tests.          since the parser is only used internally for the user profile feature     which is not official released yet. this fix is a non-issue.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"make loggedexec gradle task configuration cache compatible (#87621)          this changes the loggedexec task to be configuration cache compatible. we changed the implementation     to use `execoperations` instead of extending `exec` task. as double checked with the gradle team this task     is not planned to be made configuration cache compatible out of the box anytime soon.          this is part of the effort on https://github.com/elastic/elasticsearch/issues/57918","[0, 0, 0, 1, 14, 4, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 13, 6, 0, 0, 7, 0]","1","1","1"
"update corruptedfileit so that it passes with new allocation strategy (#88314)          new allocation strategy is not going to retry failed shards. update the     test to not rely on that behavior     ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 16, 0, 2, 13, 0]","1","1","1"
"update rareclusterstateit to work with the new shards allocator (#87922)          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1, 0, 1, 0]","0","1","0"
"ensure createapikey always creates a new document (#88413)          the optype of the indexrequest used for creating new api keys does not     have its optype configured. this means it defaults to optype.index which     allows it to replace an existing document. this pr fixes it by explicity     set optype to create so that it always create a new document (or throw     error if id conflict does happen).          since api key id is time-based random base64 uuid, it is unlikely for     this to happen in practice and we are not aware of any related bug     report.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"extract utility for asserting current thread pool (#88383)          it's useful to assert we're running on a particular thread pool. today     we do this by checking the current thread's name, but the actual     implementation of this check varies quite a bit across the codebase.     some of them are quite verbose, and others fail to include the     delimeters around the thread name. this commit introduces a utility     method to standardize this kind of assertion.","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 19, 13, 0, 0, 8, 0]","1","1","1"
"[ml] fix nlp question_answering task when best answer is only one token (#88347)          there are scenarios when question_answering find the best start/end token and they are the same token. an example of this is:          context: `my name is ben and i live in london` question: `where do i live?`          the correct answer here is london and its a single token. without this fix, we will return in london with a lower probability.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"limit test to zoom 25 to avoid rounding errors (#88376)          * limit test to zoom 25 to avoid rounding errors          we have flaky tests with rare rounding errors at higher precision.     since the index only really works well to this level, we feel it is     best to simply limit the test.          * update docs/changelog/88376.yaml          * delete docs/changelog/88376.yaml","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","1","1","1"
"use consistent map type in indicesservice (#88369)          iteration and lookup from this map get quite hot at times for large data nodes.     we shouldn't have different map types here depending on whether or not the latest operation     was an index delete or create on the node.     also, the wrapped hashmap is slower to iterate than the immutable collections map.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"autoscaling during shrink (#88292)          fix autoscaling during shrink to disregard pinning to nodes for the total tier size.     instead signal that we need a minimum node size to hold the entire shrink     operation. this avoids scaling far higher than necessary when cluster     balancing does not allow a shrink to proceed. it is considered a     (separate) balancing issue when a shrink cannot complete with enough     space in the tier.          this changes autoscaling in general for node pinning filters (based on     `_id`, `_name` or `name` filters).          clone and split also pins to the shards they clone or split, similarly     this is changed to ignore that pinning during autoscaling.          closes #85480","[0, 0, 0, 0, 20, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 9, 0, 0, 6, 0]","1","0","0"
"add test case for a replace shutdown (#88320)          this test case verifies that the index is going to be moved to the     replacement node even if it could not be allocated anywhere in     the cluster according to the allocation settings.","[0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 23, 0, 0, 4, 0]","0","0","1"
"replace usages of deprecated specialized field exists queries (#88312)          docvaluefieldexistsquery, normsfieldexistsquery as well as knnvectorfieldexistsquery are deprecated in lucene in favour of fieldexistsquery which combines the three into a single query.          this commit updates elasticsearch to no longer rely on such deprecated queries.          see https://issues.apache.org/jira/browse/lucene-10436","[0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 17, 0, 3, 10, 69, 0]","1","0","0"
"enforce max values limit only when running a script (#88295)          runtime fields scripts have a hard maximum number of values that they can emit. this was accidentally inherited by some doc_value based queries that reuse the existing runtime fields infrastructure (in absence of a corresponding already existing lucene doc_value based query) as well as by script-less runtime fields that load from _source.          this limit was introduced to prevent mistakes when writing a script hence when we are loading from either _source or doc_values the same limit should not be enforced. this commit addresses this, and applies the same to the max chars limit for string fields.","[0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 8, 0]","0","0","1"
"support run_as another user when granting api keys (#88335)          previoulsy, in order to grant an api key to a user, the user's     credentials (either username/password or access token) must be provided.     however, this is not always possible for certain setups, e.g. when all     end-users are proxied by a service user with the run_as feature. this pr     adds run_as support for granting api keys so that the user whose     credentials are provided (in the request body) can run-as another user     for whom the api key will be eventually granted.          the run-as behaviour is stricter in that it reports error if it is not     supported  by the provided authentication, e.g. anonymous, chained     run-as. this is different that used in authenticating requests, where     unsupported run-as is ignored and logged.","[0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 8, 0]","0","0","1"
"add build_flavor back to info api rest response (#88336)          the build_flavor was previously removed since it is no longer relevant;     only the default distribution now exists. however, the removal of build     flavor included removing it from the version information on the info     response for the root path. this api is supposed to be stable, so     removing that key was a compatibility break. this commit adds the     build_flavor back to that api, hardcoded to `default`. additionally, a     test is added to ensure the key exists going forward, until it can be     properly deprecated.          closes #88318","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"add missing get for totaloutboundconnections (#88234)          - have you signed the [contributor license agreement](https://www.elastic.co/contributor-agreement)? *yes*     - have you followed the [contributor guidelines](https://github.com/elastic/elasticsearch/blob/master/contributing.md)? *yes*     - if submitting code, have you built your formula locally prior to submission with `gradle check`? *yes*     - if submitting code, is your pull request against master? unless there is a good reason otherwise, we prefer pull requests against master and will backport as needed. *yes*     - if submitting code, have you checked that your submission is for an [os and architecture that we support](https://www.elastic.co/support/matrix#show_os)? *yes*","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add missing getter (#84912)          - have you signed the [contributor license agreement](https://www.elastic.co/contributor-agreement)? - **yes**     - have you followed the [contributor guidelines](https://github.com/elastic/elasticsearch/blob/master/contributing.md)? - **yes**     - if submitting code, have you built your formula locally prior to submission with `gradle check`?     - if submitting code, is your pull request against master? unless there is a good reason otherwise, we prefer pull requests against master and will backport as needed. - **yes**     - if submitting code, have you checked that your submission is for an [os and architecture that we support](https://www.elastic.co/support/matrix#show_os)? - **n/a**     - if you are submitting this code for a class then read our [policy](https://github.com/elastic/elasticsearch/blob/master/contributing.md#contributing-as-part-of-a-class) for that. - **no**","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"remove unused internalplugin interface (#88330)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"health api disk indicator: publish health metadata in the cluster state (#88175)          for the health api disk indicator, we want to check the free disk space against a set of thresholds. each node can potential have different thresholds configured but we want to use the same set of thresholds. following what we already do for allocation disk thresholds, we want all nodes to use the threshold's from master. to achieve this, the elected master publishes their set of thresholds in the cluster state, so all nodes can use them.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0]","1","1","1"
"bump versions after 8.3.2 release     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"close resources in testloadserviceproviders (#88343)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"support updates of api key attributes [rest and transport layer] (#88186)               rest and transport layer implementation to add support for updating     attributes of existing api keys. this allows end-users to modify     privileges and metadata associated with api keys dynamically, without     requiring rolling out new api keys every time there is a change.          the new route supports updates to one api key, given its id:          put /_security/api_key/{id}          the request body consists of optional fields role_descriptors and     metadata. if a request field is absent, the existing value of the     field on the given api key is retained. if a request field is set to     {} it replaces the existing value with {}. explicit null-values for     request fields are not allowed and will produce a 400.     limited_by_role_descriptors, creator, and version are     automatically updated on every call. attributes a replaced, not merged.          only the owner user of an api key can update it. api keys cannot update     themselves, nor can other users (even users with all or     manage_security cluster privileges).          relates: #87870","[0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 21, 11, 0, 0, 6, 0]","0","0","1"
"fix performance regression in datatierallocationdecider (#88340)          in #87735 we moved to using streams here. this results in a visible     regression in the many shards benchmarks that gets bigger the larger     the cluster is.     using streams here adds a lot of alloction and indirection but does not     come with any advantages since `discoverynodes` does not implement     `stream` so it's just an indirection on top of the existing iterator     that gets instantiated for every shard and then runs a compartively     short loop over the nodes.          -> move this back to iterator","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 0]","1","0","0"
"speed up put index to metadata builder (#88319)          this method is very hot when applying metadata diffs so it's worthwhile     to skip the redundant `get` here when not incrementing the version.","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 2, 1, 0]","0","1","1"
"update nodeshutdownshardsit to actually index docs (#88316)          replace a noop method call with actual document indexing.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0]","0","1","1"
"remove tech debt on aggregations#getleafcollector (#88230)          remove #getleafcollector(leafreadercontext, leafbucketcollector) in favour of     #getleafcollector(ggregationexecutioncontext, leafbucketcollector)     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 72, 70, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 95, 0]","0","0","1"
"add setting for tcp_keepalive for oidc back-channel (#87868)          this pr adds a new setting to enable tcp keepalive probes for the     connections used by the oidc back-channel communication. it defaults to     true as tcp keepalive is generally useful for es.          relates: #87773","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"[test] fix parsing of exception objects (#88198)          the exception parsing logic expects the starting curly bracket already     be consumed. this pr ensures the expectation is met.          resolves: #88166     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"upgrade to lucene-9.3.0-snapshot-2d05f5c623e (#88284)          to include lucene-10620 - which passes weight to collector","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 12, 0]","0","0","1"
"[ml] add new optional cache_hit field for pytorch results (#88287)          this commit adds the ground work for accepting a `cache_hit` boolean field that indicates if the response was cached or not.          user facing statistics are not updated with cache hit/miss information yet. that will need to be done when that information is actually provided from the native process.          this is related to: https://github.com/elastic/ml-cpp/pull/2305","[0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0, 0, 30, 0]","0","0","1"
"collapse indexmode#getconfiguredtimestamprange(...) into indexmode#gettimestampbound(...) (#88258)          `indexmode#getconfiguredtimestamprange(...)` functionally overlaps a lot     with `indexmode#gettimestampbound(...)`. in order to reuse     `indexmode#gettimestampbound(...)` for the use case     `indexmode#getconfiguredtimestamprange(...)` is reused a change had to     be made to timestampbounds.          during query rewrite and in `timestampfieldmapperservice` no     `indexscopedsettings` is available, so made this an optional parameter.     only the usage in `indexsettings` needs this, so that the instance is     updated in the case `index.time_series.end_time` setting is updated. in     the case of query rewrite and in `timestampfieldmapperservice` this     isn't needed,  since the instance is kept around and reused.          followup from #85162","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 2, 3, 0, 2, 2, 1]","1","1","1"
"[ml] fixing bwc for trained model deployment inference (#88289)          when the internal objects were renamed, an inappropriate bwc version restriction was put in place.          this commit fixes this by allowing trained model assignment metadata updates to be serialized to nodes > 8.0.0.          this is ok as the object serialization handles its bwc conditions when serializing over the wire.          this closes: #87959","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"use boolean instead of bitwise or (#88310)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"unmute lintian test again (#88301)          the most recent problem should be fixed by elastic/ml-cpp#2346          fixes #88090     fixes #88252","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"make jdkmapdiff return immutable map (#88250)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0]","0","0","1"
"save loop over all indices in metadata builder (#88302)          no need to run the mapping cleanup in a separate loop. we can just collect     the mappings right away when we loop the indices in the builder.     also, no need for our own inline copy of `retainall` actually.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0]","0","0","1"
"pre-size metadata builder when applying diffs (#88304)          small but non-trivial speedup for very large cluster states where the indices map     is built one-by-one.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 3, 0]","0","0","1"
"fix: refresh the rollup index as part of the rollup indexer actions (#86992)          instead of waiting in the yaml test we refresh once the     indexing operation is complete in the callback. this way     we avoid possible timeout issues which make the test     unstable.          resolves #81983     resolves #53412","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 4, 0]","1","0","0"
"fix potential circuit breaker leak on internalgeogrid (#88273)          during reduce time we are creating a longobjectpagedhashmap that will not get released if there is an error when     it is getting populated. this commit adds a finally clause so it is always release.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 4, 2, 0]","1","0","0"
"print full exception when console is non-interactive (#88297)          the console logger truncates stack traces so a user is not bombarded     with enormouse messages on startup. however, when the output is     redirected to a file, there is no need to avoid large messages, and in     fact it is a hinderance to debugging. this commit adds an internal flag     to the console logging exception convert which disables the truncation     when attached to a non-interactive console.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0]","0","0","1"
"remove immutableopenmap from rollupt tests (#88290)          some tests for rollup were still using immutableopenmap for testing     internal methods, even though those methods were already converted to     map. this commit changes those tests to use map.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 14, 0]","1","1","1"
"remove immutableopenmap from engine (#88291)          segmentstats was changed to use map, but the method in engine which     computes files sizes for segment stats was never converted. this commit     removes that final usage from engine.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 0, 0, 1, 0]","1","1","1"
"fix checkstyle version drift and api change (#88283)          fix checkstyle version drift and api change.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"remove immutableopenmap from most tests (#88285)          this commit removes immutableopenmap from most test cases from server,     where the type is no longer needed because map is used by the class     being constructed.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 1, 0, 51, 0]","1","1","1"
"[ml] make more get and heavier processing apis cancellable (#88142)          this commit makes the following apis cancellable:          get datafeeds     get jobs     evaluate data frames     explain data frames     get job model snapshot     preview datafeed     preview data frame     get categories (this can be expensive due to grok parsing)","[0, 0, 0, 1, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 14, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 19, 0, 0, 76, 0]","0","0","1"
"replace bridge methods with filtered methods in painless (#88100)          the invokedynamic instruction does not perfectly follow the painless casting model opting to add     bridge methods where necessary to ensure symmetric behavior between compile-time and run-time     casting using boxed types. this change replaces the specialized class loader and bridge methods using     filtered method handles instead. this reduces the overall complexity of runtime casting.","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix randomsamplerit#testrandomsamplerhistogram test input (#88191)          periodically, a single 10 value is included which causes a 3rd histogram bucket to be created with very few values. meaning sampling wouldn't get any docs that hit that bucket (especially with the randomly included deleted docs).          the failures that i saw had the 10.0 bucket with just one document.          closes: #88108","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"[ml] add deployed native models to inference_stats in trained model stats response (#88187)          this adds a valid `inference_stats` section for deployed native models.          `inference_stats` is effectively a sub-set of the `deployment_stats`. it's a high level view of the overall stats of the model, deployment_stats contains more detailed information around types of errors seen, throughput, etc.","[0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0]","0","0","1"
"fix: extract matrix stats using bucket_selector buckets_path (#88271)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"add ability to select execution mode for cardinality aggregation (#87704)          plumbs through a new parameter for the cardinality aggregation, to allow configuring the execution mode.  this can have significant impacts on speed and memory usage.  this pr exposes three collection modes and two heuristics that we can tune going forward.  all of these are treated as hints and can be silently ignored, e.g. if not applicable to the given field type.  i've change the default behavior to optimize for time, which potentially uses more memory.  users can override this for the old behavior if needed.","[0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 4, 0]","0","0","1"
"skip expensive name collision checks when building metadata from diff (#88266)          we can skip the name collision check here as we can and must assume that the incoming diff     won't be corrupted and gets us the correct next state.     this saves quite a bit of work on data node during state publication because the check gets     expensive for large states.","[0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 1, 0, 0, 1, 0]","1","1","1"
"refactor tasks to improve apm support (#87917)          part of #84369. split out from #87696. rework how some work is executed     by creating child tasks for them, so that when traced by apm, it results     in more meaningful parent and child tasks in the ui. it also improves     how elasticsearch is modelling the work.","[0, 0, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 0, 0, 52, 0]","0","1","1"
"[transform] unmuting transformcontinuousit to for debug output. (#88242)          unmute transformcontinuousit and check that it isn't still indexing when querying","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] adds basic notifications for trained model deployments (#88214)          for specific models:     - deployment started     - deployment stopped          system notifications when rebalance occurrs with reasons:     - model deployment started     - model deployment stopped     - nodes changed     ","[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 0, 0, 17, 0]","0","0","1"
"implement ilm/settings operator handlers (#88097)          relates to #86224","[0, 0, 0, 0, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0]","0","1","0"
"use pre-parsed index mode when figuring out timestamp range (#88254)          use `indexmode` field instead of parsing indexmode from settings in     order to determine time series timestamp range. parsing the index mode     isn't necessary, because we read the index mode when indexmetadata is     constructed, and this just burns unnecessary cpu cycles.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] mute mlmodeldeploymentsupgradeit (#88251)          relates #87959","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"revert `unmute lintian test (#88228)`          this reverts commit 793dcc7c33200bf5f0e958e2ec7c07a4865e351e.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"dry up index name expression resolving a little (#88244)          just two simple spots i found while researching something else.","[0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 7, 2, 9, 3, 0]","0","0","1"
"upgrade to log4j 2.18.0 (#88237)          ","[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]","0","0","1"
"unmute lintian test (#88228)          the fix for the problems identified in #88090 is in     elastic/ml-cpp#2337, so the test can be unmuted now.          closes #88090","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"skip backing indices with a disjoint range on @timestamp field. (#85162)          implicitly skip backing indices with a time series range that doesn't     match with a required filter on @timestamp field.          relates to #74660","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 9, 1, 5, 6, 0]","0","0","1"
"use faster maths to project wgs84 to mercator (#88231)          ","[0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0]","1","1","1"
"allow easing testing of java ea versions using gradle java tool chain support (#88188)          this introduces the ability to simply configure a java tool chain for elasticsearch java projects to be used.     if an environment variable `java_toolchain_home `is declared, this jdk will be used as toolchain in elasticsearch.java projects. if java_runtime_home is configured, it takes precedence over java_toolchain_home     for configuring test cluster runtimes.          this should make testing our build with java `ea` versions easier and allows detangling the used compiler jdk from the gradle java runtime.","[0, 0, 0, 1, 3, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 2, 0]","1","1","1"
"optimize log cluster health performance. (#87723)          optimize log cluster health performance by not building cluster health instances needlessly.          relates #77466     ","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0]","0","0","1"
"allow configuring snyk target reference and lifecycle properties (#88220)          we will use target reference to distinguish between different versions or branches of our elasticsearch project     to be able to trace vulnerable dependencies down to the version.          snyk lifecycle property allows filtering the project overview by `production` or `development`. when version     is ending with snapshot we configure the lifecycle as development. otherwise its production.          related to #87620","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0]","1","1","1"
"system indices ignore all user templates (#87260)          when creating an index with a system index descriptor, ignore all     templates. update tests that check template behavior.          co-authored-by: nikola grcevski <nikola.grcevski@elastic.co>","[0, 0, 0, 0, 10, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 13, 0, 6, 16, 0]","1","1","1"
"[transform] make default transform scheduler frequency 1s again (#88215)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"allow getting shardcountstats. (#84805)          co-authored-by: elastic machine <elasticmachine@users.noreply.github.com>","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"bump versions after 8.3.1 release     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"periodic warning for 1-node cluster w/ seed hosts (#88013)          for fully-formed single-node clusters, emit a periodic warning if seed_hosts has been set to a non-empty list.          closes #85222     ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","0"
"add generic interface for loading service providers from plugins (#88082)          relates to 86224","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"mute test #88063 (#88207)          related #88063","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix testjoinwaitsforclusterapplier (#87842)          block the cluster applier before disrupting the cluster so the victim     node doesn't try and rejoin too soon.          closes #86974","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0]","1","0","0"
"retry after all s3 get failures that made progress (#88015)          s3 sometimes enters a state where blob downloads repeatedly fail but     with nontrivial progress between failures. often each attempt yields 10s     or 100s of mbs of data. today we abort a download after three (by     default) such failures, but this may not be enough to completely     retrieve a large blob during one of these flaky patches.          with this commit we start to avoid counting download attempts that     retrieved at least 1% of the configured `buffer_size` (typically 1mb)     towards the maximum number of retries.          closes #87243","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0]","1","0","0"
"emit more detailed jdk runtime build information (#88180)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0]","0","0","1"
"run gradle integration tests with configuration cache enabled by default (#88148)          this changes abstractgradlefunctest to run with configuration cache enabled by default. that gives us better test coverage on how our build logic works with configuration cache enabled and makes it explicit which parts are not yet working.     we fixed some minor configuration cache related issues in our code.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 8, 0]","1","0","0"
"replace ilm/slm with their full names (#88060)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0]","0","0","1"
"8.4 release notes ported from 8.3.0 release (#88136)          * generate release notes for v8.3.0 (#87294)          * generate release notes for v8.3.0          * [docs] add 8.3 migration file to index          * fixed version number          * fix formatting of deprecation in 85326          * use asciidoc format for deprecations          * extract static content from migration/index          * this was just an enhancement          * nope, it was an upgrade          * added migration/index.asciidoc generation support (#87318)          including extracting static content from migration/index, so the template would be as light as possible.          the reason for this work is because the gradle task `generatereleasenotes` was not correctly adding new links and imports to the migrations/index and that caused documentation to fail building for 8.3.0.          * [docs] add ml-cpp prs to release notes          * added back incorrectly deleted changlog          * added missing highlight          * fixed spelling of stackoverflowerror          co-authored-by: lcawl <lcawley@elastic.co>          * brought back missing changelog for 87235 (#87370)          * brought back missing changelog for 87235          * regenerate release notes          * regenerate release notes for bc3 (#87449)          * regenerate release notes for bc3          * re-applied manual fixes that lisa cawley used          * fixed breaking changes generation          to match the manual edits done by lisa cawley          * fixed failing test          since the manual edits by lisa removed the `-snapshot` from the docs     we remove it from the tests too.          * remove changelogs for intermediate lucene upgrades          * update release notes for bc4 (#87635)          * update release notes for bc4          * adding missing changelog for geo_grid          * added missing highlight notes for 84250          * update docs/reference/release-notes/highlights.asciidoc          co-authored-by: david kilfoyle <41695641+kilfoyle@users.noreply.github.com>          * update docs/reference/release-notes/highlights.asciidoc          co-authored-by: david kilfoyle <41695641+kilfoyle@users.noreply.github.com>          * backported fixes to original yaml          * control sort order of release highlights          so that small changes to an individual highlight don't completely shuffle the entire document.          we also added links to the prs from the highlight titles, for convenience.     otherwise readers need to search the release notes for the changelog entry and click there,     which is a lot more work.          * fixed failing test after new ordered highlights          also made test verify re-ordering of highlights          co-authored-by: david kilfoyle <41695641+kilfoyle@users.noreply.github.com>          * update release notes for bc5 (#87808)          * update release notes for bc6 (#87912)          * update release notes for bc9 (#88011)          * regenerate release notes after version bump 8.4.0          and after forward porting 8.3.0 release notes changes.          * regenerate after some changelog entries removed          * re-prune the changelogs          * removed three changelog entries          co-authored-by: lcawl <lcawley@elastic.co>     co-authored-by: david kilfoyle <41695641+kilfoyle@users.noreply.github.com>","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 0, 0, 5, 0]","1","0","0"
"add immutable 'operator' metadata classes for cluster state (#87763)          this commit only introduces the storage classes, unused for now.     relates to #86224","[0, 0, 0, 0, 4, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 1, 6, 4, 0]","0","0","1"
"sort ingest pipeline stats by time spent executing (#88035)          this commit changes the `/_nodes/stats` api to return the pipelines in     descending order by the time spent executing. if a pipeline ties another     pipeline, they are sorted by ingest count.          this ensures that the most used and most expensive pipelines show up     first in the json response (to help tracking down which pipelines may be     most prevalent).          for example:          ```     {     `nodes` : {     `yiv09_etrksv4q8kz0d59a` : {     ...     `ingest` : {     `total` : {...},     `pipelines` : {     `set-name` : {     `count` : 4, // <-- tie-breaker     `time_in_millis` : 12, // <-- sorted first by this     ...     },     `set-face` : {     `count` : 2,     `time_in_millis` : 8,  // <-- less than 12     ...     }     ```","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]","1","1","1"
"script: add metadata to ingest context. (#87309)          adds the `metadata` class and `metadata()` method to the ingest context.          metadata has getters and setters for index, id, routing, version and versiontype.     it also has a getter for timestamp.          refs: #86472","[0, 0, 0, 0, 4, 2, 1, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 9, 5, 1, 25, 0]","0","0","1"
"fixing coordinationdiagnosticsservicetests.testresultserialization bug (#88189)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"cleanup needless anonymous classes where lambdas suffice (#88154)          cleaning up a couple more spots of these, saving some verbosity     and in some cases also some allocations.          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 6, 0]","0","0","1"
"merge creating indices and shards methods in indicesclusterstateservice (#88184)          looping over the local routing node can be quite expensive for e.g.     large warm/cold/frozen nodes. we can save one full iteration as well     as a couple of map lookups by dealing with index and shard creation+updates     in a single loop.          ","[0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 21, 1, 4, 6, 0]","0","1","1"
"ingest: randomdocumentpicks.randomexistingfieldname doesn't return _version (#88183)          when `randomdocumentpicks.randomexistingfieldname` selects a field, the     caller expects to be able to manipulate that field in any manner.  `_version` has     special validation, must fit in an `long` and may not be `null`.          this change no longer returns `_version` from `randomexistingfieldname` unless it is the only field in the document.          related to change: https://github.com/elastic/elasticsearch/pull/88102","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","1","1"
"creating a transport action for the coordinationdiagnosticsservice (#87984)          this exposes the coordinationdiagnosticsservice (#87672) through a transport action so that it can     be called remotely as part of the health api in the event that: (1) there has been no master recently,     (2) there are master-eligible nodes in the cluster, (3) none are elected, and (4) the current node is     not master eligible.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"simplify querycache construction (#88173)          we don't need to keep references to index settings in all of these,     nor do we need per-index loggers or deprecation loggers here.     making the construction here a little cheaper helps with the     performance of some cluster state operations that create temporary     index-services.     also, removing references to `indexsettings` and other per-index state     is helpful in identifying spots to reduce the per-index overhead on     data-nodes down the road.     ","[0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 1, 5, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 10, 11, 0, 0, 25, 0]","0","1","1"
"ingest: enforce _version metadata not null in sourceandmetadata map (#88102)          * ingest: enforce _version metadata not null in sourceandmetadata map          the `_version` metadata field should always exist in the sourceandmetadata     map, this change enforces that invariant but allows tests to avoid it     if necessary.          refs: #87309","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 17, 0, 0, 52, 0]","1","1","1"
"use the provided sas token without sdk sanitation that can produce invalid signatures (#88155)          when the sas token is prefixed with ? the sdk parses incorrectly     all the query params and removes the first query param, this     produces an invalid signature preventing the repository to     authenticate against the storage service. this commit reverts     to the previous behaviour where the sas token was appended to     the url as it is provided by the user.          closes #88140","[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 10, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 2, 0]","1","0","0"
"setup elasticsearch dependency monitoring with snyk for production code (#88036)          this adds the generation and upload logic of gradle dependency graphs to snyk          we directly implemented a rest api based snyk plugin as:          the existing snyk gradle plugin delegates to the snyk command line tool the command line tool     uses custom gradle logic by injecting a init file that is          a) using deprecated build logic which we definitely want to avoid     b) uses gradle api we avoid like eager task creation.          shipping this as a internal gradle plugin gives us the most flexibility as we only want to monitor     production code for now we apply this plugin as part of the elasticsearch.build plugin,     that usage has been for now the de-facto indicator if a project is considered a `production` project     that ends up in our distribution or public maven repositories. this isnt yet ideal and we will revisit     the distinction between production and non production code / projects in a separate effort.          as part of this effort we added the elasticsearch.build plugin to more projects that actually end up     in the distribution. to unblock us on this we for now disabled a few check tasks that started failing by applying elasticsearch.build.          addresses  #87620","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0]","0","0","1"
"stream input and output support for optional collections (#88127)          this pr adds support for reading and writing optional collections via     streaminput and streamoutput.     ","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","0","0","1"
"[transform] increase transform scheduler frequency so that it runs every 0.5s (#88153)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"use a faster but less accurate log algorithm for computing geotile y coordinate (#87515)          this commit introduces a new algorithm to essloppymath to compute logarithm (base e)","[0, 0, 0, 0, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"support updates of api key attributes [service layer] (#87924)          service level implementation to add support for updating attributes of     existing api keys. this allows end-users to modify privileges and     metadata associated with api keys dynamically, without requiring     rolling out new api keys every time there is a change.          updatable attributes are role_descriptors and metadata. several     other attributes are updated automatically, on every update call,     including limited_by_role_descriptors, creator, and version. api     key attributes are replaced, not merged.          on every update, the api key doc cache is cleared for the updated api     key.          this pr implements the necessary service layer changes in     apikeyservice. i will integrate this with the rest and transport     layers in a subsequent pr.          relates: #87870","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"avoid windowsfs in longgcdisruption (#88110)          closes #87914","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"bump versions after 7.17.5 release     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"port all remaining build-tool tests to spock (#88089)          - make our build tool tests more readable     - one step closer to remove outdated test fixtures like gradleunittestcase and friends          didn't port some basic setter getter tests like pluginextensiontests as it does not add much value and we have integration test coverage for this stuff too","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"increase ldap connection timeout settings to 10s (#88117)          ad tests sometimes fail due to a response timeout error.     by default connection and response timeouts were set to 5s.     this commit is increasing them to 10s.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"ensure the test version is always pre-8.3.0 (#88138)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] make ml stats apis cancellable (#88030)          many machine learning stats apis make multiple searches per call. making them cancellable allows for those searches to be cancelled if the http connection is closed.          this improves scalability and performance.          relates #88010","[0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 15, 0, 0, 82, 0]","0","1","1"
"consolidate bootstrap state (#88041)          now that initialization is broken into phases, the state between these     phases can be better organized. this commit reintroduces the bootstrap     class, but now uses it as the holder for state between the phases.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 1, 0, 0, 8, 9, 0, 1, 5, 0]","1","1","1"
"include the calling transport task in the method for individual node task operations (#88081)          currently, if the parent transport task is cancelled, there is no way to propagate the cancellation to any new transport action inacted by `transporttasksaction#taskoperation`.          this commit passes the originating transport task into `transporttasksaction#taskoperation` so that any additional transport actions can be cancelled if the originating transport task is cancelled.          note: it is up to the implementer to enable this cancellation logic. this commit simply updates the framework to make it possible.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","0","0","1"
"encapsulate sequenceidfields (#88092)          this makes the fields in `sequenceidfields` private so we can modify     them more easily without them being accidentally used by other parts of     the application in incompatible ways.","[0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 55, 7, 0, 3, 67, 0]","1","1","1"
"fix synthetic source test (#88096)          the `testsyntheticsourcemany` was leaking an index reader *sometimes*,     causing the a file handle leak.          closes #88069","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 5, 1, 0, 0]","1","0","0"
"add processors to autoscaling capacity response (#87895)          this adds `processors` to the autoscaling capacity response.          `processors` in the current capacity calculation is determined by the `allocated_processors` field in osinfo. the reason behind this is because `allocated_processors` can be overridden by the process starting the node. consequently, when autoscaling deciders need to look at the current processors and request for more, they should look at `allocated_processors` not `available_processors`. mostly, this is because certain systems may want to account for threads being used by external processes and not allow es to use all the available processors on the os.","[0, 0, 0, 0, 5, 4, 0, 5, 1, 1, 0, 0, 1, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 9, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 5, 47, 2, 5, 89, 0]","0","0","1"
"add version 8.3.1 and remove 8.2.4     ","[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] unmute model deployment rolling upgrade test (#88124)          unmuting to collect logs after adding more logging to     version 8.2.          relates #87959          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"muting transform continuous it (#88132)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"don't extend abstractindexcomponent in abstractcharfilterfactory (#88125)          same as #88113 but for abstractcharfilterfactory.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 7, 0, 0, 9, 0]","0","0","1"
"[ml] improve trained model stats api performance (#87978)          previous, get trained model stats api would build every pipeline defined in cluster state.          this is problematic when many pipelines are defined. especially if those pipelines take some time to parse (consider grok).          this improvement is part of fixing: #87931","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 2, 0]","1","0","0"
"fix look-ahead-time setting validation for release builds (#88087)          follow up to #87847          adding a setting polling callback will fail if the setting is not there.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]","1","0","0"
"fix concurrentsnapshotsit.testmasterfailoverduringstaleindicescleanup (#88065)          as a result of https://github.com/elastic/elasticsearch/pull/86514 we now     remove the snapshot delete from the cluster state before cleaning up     stale shard level blobs so we have to block master earlier on deleting the     root level index-n blob to get the desired cluster state where delete     and snapshot creation are both in the cluster state at the same time.          closes #88061     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"mute termsgroupbyit test #88063     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"increase transform scheduler frequency so that it runs every 1s (#88116)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"don't extend abstractindexcomponent in abstracttokenfilter (#88113)          no need for this extension, we don't make use of the settings or deprecation logger     in production any more. also, this slows down cs operations that require a     temporary index service which builds quite a bit slower when the loggers     need to be set up via reflective calls.     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 83, 0]","1","1","1"
"update http client version (#87491)          moves a few apache http client dependencies to their latest version          - httpclient -> 4.5.13     - httpasyncclient -> 4.1.5     - httpcore -> 4.4.13","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","1","1","1"
"skip building redundant set in `org.elasticsearch.indices.cluster.indicesclusterstateservice#removeindices` (#88073)          no need to build a fresh set of all the indices, we already have a map of all of them     in the routing nodes that we can check.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0]","0","1","1"
"move the ingest attachment processor to the default distribution (#87989)          the ingest attachment processor is currently available as a plugin. this     commit moves the processor to the default distribution so it is always     available.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[test] fixes to stringmatchertests (#88046)          this commit fixes two issues with stringmatchertests          **problem 1**     under some seeds (e.g. 3c93aef7628d6611) prefix2 would start     with the same text as prefix1. this would mean that input that was     intended to test against prefix2 would actually match prefix1, and     violate the expectations of the test          **problem 2**     the code had the equivalent of          randomfrom( `abc`.tochararray() )          but hamcest does not have a randomfrom(char[]) method, so this     code was treated as          randomfrom( new object[] { new char[] { 'a', 'b', 'c' } } )          and will return a char[]. tests that were written assuming they had     a random character, actually had an array (char[]) and would then     stringify that object into something like          [c@5e67f506          resolves: #88024","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"ingest: add validation and strong typing to sourceandmetdata map (#87673)          adds `ingestsourceandmetdata` to replace the sourceandmetadata map.          this validates metadata values when they are added to the map for use in     scripts and other process as well as provides typed getters and for use     inside of server.          this change lays the foundation for strongly typed metadata access in scripting.          related: #87309","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 17, 0, 2, 49, 0]","0","0","1"
"mute test05checklintian     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"synthetic source numbers in columns (#88025)          this speeds up synthetic source for numbers and dates by loading them     column by column. on cached disk blocks, on average it's only 1ms per     for 1k documents, but it seems to help a fair bit in the worst case     and i expect it'll help much more on non-cached disk blocks.          ```     |   50th percentile service time | default_1k | 32.9131 | 31.6141 | ms |  -3.95% |     |   90th percentile service time | default_1k | 34.937  | 34.8247 | ms |  -0.32% |     |   99th percentile service time | default_1k | 42.2246 | 40.0853 | ms |  -5.07% |     | 99.9th percentile service time | default_1k | 54.0964 | 41.993  | ms | -22.37% |     |  100th percentile service time | default_1k | 55.2969 | 53.4642 | ms |  -3.31% |     ```","[0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 0, 1, 0]","0","0","1"
"add detailed error messages for searchable snapshot shared folder assertions (#87497)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0]","0","0","1"
"add operatorhandler interface (#87767)          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] mute termsondategroupby cont. test #88063 (#88067)          relates: https://github.com/elastic/elasticsearch/issues/88063","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] muting mlmodeldeploymentsupgradeit #87959 (#88070)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix shuffleforcedmergepolicytests#testdiagnostics (#88062)          closes #88032","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","0","0"
"[ml] stopping a model deployment should trigger rebalance (#88016)          when a model deployment is stopped we remove the allocations     it was using. this opens up capacity for granting more allocations     to existing deployments that may not be fully satisfied.          with this commit we attempt to rebalance model assignments     after a model deployment has been stopped.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"add easier configuration cache test support in build logic tests (#88047)          this is intended to help us getting closer to #57918 by implicitly     testing our build logic configuration-cache support. plugin and task     tests can be marked as configuration cache compatible now and we will     always run then with configuration cache enabled.          by default, gradle will fail the build if configuration cache problems     have been detected during build execution. that should be in general     better then adding explicit tests for testing configuration cache     compatibility per test class","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"make asyncpersistedstate.resetvotingconfiguration fast (#88050)          using the builder just to update that one field in the metadata means     running through the name collision checks on the metadata which are very     expensive. in the many-shards benchmark run it takes ~2% of total cpu     time just for this operation.     even though this is running async on a thread off the critical path i think     it's worthwhile fixing this to free up some cpu for other tasks.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"don't ignore pipeline for upserts in bulk api (#87719)          don't ignore pipelines defined in bulk item for updates with upsert in bulk api.          closes #87131","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"geoip processor should respect the ignore_missing parameter in case of missing database (#87793)          if database is missing then respect ignore_missing parameter configured     on the geoip processor. if ignore_missing is enabled then the document     should not be tagged. in this case the document shouldn't be tagged.          closes #87345","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[transform] introduce transformscheduler central service (#84657)          ","[0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 6, 3, 0, 0, 0, 1, 0, 0, 5, 13, 0, 0, 31, 0]","0","0","1"
"presize routingnode (#88043)          presize maps in `routingnode` with the best-guess that every node     holds it's proportionate share of double the number of indices which     seems like the best possible guess (1 shards + 1 replica per index,     all nodes homogeneous).     this saves a lot of re-hashing when data nodes hold lots of shards     and speeds up bootstrapping 50k indices in the many-shards benchmark     by more than 2 percent.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 5, 0]","0","0","1"
"faster datastreammetadata diff application (#88045)          this was doing a needless copy which showed up in many shards benchmarking.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"consolidate remaining startup in phase 3 (#88017)          this commit moves the remaining pieces of startup into a `phase 3`. this     consists of everything after security manager is initialized. phase 3     is where the node is constructed and the system becomes multi threaded.","[0, 0, 0, 0, 6, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 0, 0, 2, 0]","0","0","1"
"speedup setting default values a little (#87980)          many shards benchmarks have recently seen a bit of an increase in the time spent on     settings from new settings getting added. this makes some defaults quite a bit     cheaper by saving re-serialization of the same default value which helps with     some cluster state application cases for large index counts.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"initialize es logging api for tests (#88022)          this commit adds initialization of the new es logging api into     estestcase, so that tests can begin using the new logging api.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] make trained model rest apis cancellable (#88009)          this change makes all the trained model apis cancellable, and addresses the handful of apis that rely on our abstract resource structure.          closes: #87931","[0, 0, 0, 0, 9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 2, 20, 0, 0, 72, 0]","0","0","1"
"add missing logstash timestamp mapping (#87927)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] rebalance should not notify listener before update is applied (#88012)          when we are rebalancing trained model assignments, we eventually     update cluster state with the new metadata. we only want to     notify the listener after we have applied the cluster state update.     this commit fixes a bug where we could notify before the update     was actually applied resulting in npe when writing the response     of the `createtrainedmodelassignmentaction`.          this is a fix following the work done in #87366.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0]","1","0","0"
"remove tasklistener interface (#87637)          `tasklistener` is almost always a trivial wrapper around an     `actionlistener`. there's a couple of places where that's not true, it     reports the task id in a log message, but these logging effects can be     achieved in other ways which don't require polluting various widely-used     apis so much.          this commit replaces all usages of `tasklistener` with `actionlistener`,     reworking the logging effects, and removing the now-unnecessary     overrides.          relates #86765 in that this commit simplifies some of the apis that     #86765 will need to adjust.","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 1, 0, 2, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 2, 9, 0, 0, 7, 0]","1","1","1"
"speed up synthetic keyword, ip, and text fields (#87930)          this speeds up synthetic source, especially when there are many fields     in the index that are declared in the mapping but don't have values.     this is fairly common with ecs, and the tsdb rally track uses that. and     this improves fetch performance of that track:     ```     |  50th percentile service time |    default |   6.24029 |  4.85568 | ms | -22.19% |     |  90th percentile service time |    default |   7.89923 |  6.52069 | ms | -17.45% |     |  99th percentile service time |    default |  12.0306  | 16.435   | ms | +36.61% |     | 100th percentile service time |    default |  14.2873  | 17.1175  | ms | +19.81% |     |  50th percentile service time | default_1k | 158.425   | 25.3236  | ms | -84.02% |     |  90th percentile service time | default_1k | 165.46    | 30.8655  | ms | -81.35% |     |  99th percentile service time | default_1k | 168.954   | 33.3342  | ms | -80.27% |     | 100th percentile service time | default_1k | 174.341   | 34.8344  | ms | -80.02% |     ```          there's a slight increase in the 99th and 100th percentile service time     for fetching ten document which think is unlucky jitter. hopefully. the     average performance of fetching ten docs improves anyway so i think     we're ok. fetching a thousand documents improves 80% across the board     which is lovely.          this works by doing three things:     1. teach the `leaf` layer of source loader to detect when the field is     empty in that segment and remove it from the synthesis process     entirely. this brings most of the speed up in tsdb.     2. replace `hasvalue` with a callback when writing the first value.     `hasvalue` was resulting in a 2^n-like number of calls that really     showed up in the profiler.     3. replace the `arraylist` of leaf loaders with an array. before fixing     the other two issues the `arraylist`'s iterator really showed up in     the profiling. probably much less worth it now, but it's small.          all of this brings synthetic source much closer to the fetch performance     of standard _source:     ```     |  50th percentile service time | default_1k |  11.4016  | 25.3236  | ms | +122.11% |     |  90th percentile service time | default_1k |  13.7212  | 30.8655  | ms | +124.95% |     |  99th percentile service time | default_1k |  15.8785  | 33.3342  | ms | +109.93% |     | 100th percentile service time | default_1k |  16.9715  | 34.8344  | ms | +105.25% |     ```          one important thing, these perf numbers come from fetching *hot* blocks     on disk. they mostly compare cpu overhead and not disk overhead.     ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0]","1","0","0"
"[tsdb] simplify the rollup action (#87981)          this pr changes the _rollup action so that it will only create the rollup index.     tasks such index swap in the data stream and source index deletion will not be     handled by the rollup action. instead, those actions will be taken care of by the     rollup ilm.          those changes make rollup behavior more consistent with similar operations     such as shrink or snapshot.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0]","0","1","1"
"fix unique realm name check to cover default realms (#87999)          all enabled realms must have unique names. this pr tightened the logic     for ensuring realm name uniqueness. previously the unique name check     does not cover realms that are automatically enabled.          relates: #69096","[0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 4, 0, 0, 1, 0]","1","0","0"
"[transform] execute _refresh separately from dbq, with system permissions. (#88005)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"[ml] add logging to the model deployments rolling upgrade test (#87982)          to debug the failure in #87959.          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] use normalized memory in bin packing node prioritization (#87925)          this commit fixes a bug in the `linearprogrammingplansolver`     used for distributing model allocations. when we are doing the     initial bin-packing, we should be using normalized memory     as a factor. instead, we were using actual memory which would     dominate the heuristic and result in always prioritize the     largest nodes in terms of memory and completely disregard existing     allocations.          the linear solver would still provide a good solution most of     the times but in some edge cases we'd end up with a bad solution.     this commit adds a test with an edge case like this.          in addition, we improve the `assignmentplanner` by trying out     both approaches (1. preserve one allocation per assignment,     2. preserve all allocations) when the first try does not give     a result that satisfies all models.","[0, 0, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 2, 0]","1","0","0"
"simplify resize deciders (#87958)          this change pulls up checks and removes code duplication to make those     two deciders slightly cheaper.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 4, 0]","0","1","1"
"use hashmap in admin get actions (#87938)          actions for getting aliases, indices, and settings all return a map. yet     internally these unnecessarily immutableopenmap. this commit converts     these actions to use hashmap.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 13, 0]","1","1","1"
"remove legacy bootstrap plugins (#87775)          bootstrap plugins were an internal mechanism added to allow a     filesystemprovider for cloud with the quota-aware-fs plugin. since that     was removed, bootstrap plugins no longer serve a purpose. they were     never officially documented because they were for internal use only.     this commit removes the bootstrap plugins infrastructure.","[0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 4, 0, 0, 0, 0, 0, 0, 30, 5, 1, 1, 49, 0]","0","0","1"
"cache notice generation tasks (#87991)          this commit makes the noticetask cacheable. although it is not that     expensive (a few seconds), it's worth it overall.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"consolidate startup before security manager into phase 2 (#87941)          this commit introduces a second phase of startup. it consists of     evertying after logging, but before security manager is initialized.     this is for things that require security manager permissions that we do     not want to grant for the lifetime of the process.","[0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0]","0","0","1"
"[docs]fix priorities typo in cluster state task config. (#87824)          fix priorities typo in cluster state task config.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"upgrade to new lucene snapshot (#87932)          this pr uses lucene-9.3 snapshot in elasticsearch 8.4. noticeable changes in this lucene snapshot:          - merge-on-refresh (disabled)     - no more pathological merging     - sortedsetdocvalues#count for value_count aggs","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 1, 0, 0, 8, 0]","1","1","1"
"correctly pre-size hashsets (#87700)          the hashset(int) constructor accepts the capacity of the set rather than its size. unfortunately, hashset requires n/0.75 capacity to hold n elements. so, if we call new hashset(n) to hold n elements, the map will be too small and need to be     resized/rehashed midway.          we add a new methods sets.newhashsetwithexpectedsize and sets.newlinkedhashsetwithexpectedsize that calculate the correct capacity for the specified expected size.          see          * https://bugs.openjdk.org/browse/jdk-8284975     * https://bugs.openjdk.org/browse/jdk-8287419     * https://github.com/openjdk/jdk/pull/8302","[0, 0, 0, 0, 6, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0]","0","0","1"
"test fix: disable healthnode in metadataindextemplateservicetests (#87967)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"prevent migration of system indices that match templates (#87933)          ","[0, 0, 0, 0, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 1, 7, 0]","0","0","1"
"improve console exception messages (#87942)          this commit improves upon the recent console exception logging isolation     to emit more than just the exception message. the exception class is     also printed, as well as up to the first 5 elements of the stack. the     stack trace is a hint, and can often be enough, yet the full stack trace     (or a truncated version if a guice exception) will still exist in the     logs. addtionally, unit tests are added.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"batch ilm move to retry step task update (#86759)          this one was still unbatched, same appraoch to making it batched as with the other step update tasks.          co-authored-by: joe gallo <joe.gallo@elastic.co>","[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0]","0","0","1"
"run transportclusterinfoactions on management pool (#87679)          today subclasses of `transportclusterinfoaction` execute     `masteroperation` on `same` which often means a transport worker. this     includes nontrivial things like decompressing mappings in     `transportgetmappingsaction` and `transportgetindexaction` (if a field     filter is specified) and iterating over index settings and aliases in     `transportgetindexaction`.          this commit moves this work to the `management` threadpool instead.","[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 5, 0, 0, 1, 0]","0","1","0"
"fix stablemasterhealthindicatorservicetests and `start-slm` doc test (#87962)          ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0]","1","0","0"
"[ml] include authorization info in responses when creating jobs (#87950)          https://github.com/elastic/elasticsearch/pull/87884 added     authorization information to the datafeed and data frame     analytics job configs returned by listing them, but not to     the ones returned from creating or updating them. for     consistency it's best that the same fields are present in     both places.","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 21, 0]","0","0","1"
"add start slm user action (#87854)          this creates a user action for the slm health indicator that will help     the user to start slm.","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"add help guide to the contat support user action (#87689)          ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"add user action for repository_integrity indicator (#87920)          ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0]","0","0","1"
"create ilm not running user action (#87852)          this creates a user action for the ilm health indicator that will help     the user to start ilm.","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","1","1"
"more compact serialization of shardstats (#87627)          the two paths are almost always the same, we can serialize     them only once to reduce memory consumption for shard stats     request handling on the coordinating node.","[0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0]","0","0","1"
"add support for version field type in sql and eql (#87590)          ","[0, 0, 0, 0, 18, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 20, 5, 0, 5, 0]","0","0","1"
"move knn search and dense vectors to core (#87815)          this pr moves knn search and dense vector support out of an xpack plugin and     into server.          in #87625 we plan to integrate ann search into the main `_search` endpoint as a     new top-level component called `knn`. so knn will be a dedicated part of the     search request, and we'll have knn logic within the search phases. the classes     and logic will live in server, matching the other search components like     suggesters, field collapsing, etc.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]","0","1","0"
"support removing ignore filters for audit logging (#87675)          ignore filters of audit logging can be configured with the cluster     settings apis. while adding new filters work correclty, removing     filters does not work until node restart due to a bug (#68588). this pr     fixes the bug by correctly remove the ignore filter when all rules of a     filtering policy is set to null.          resolves: #68588","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]","1","0","0"
"use azul zulu jdk8 distribution instead of adoptium/openjdk on macos with apple silicon (#87733)          ","[0, 0, 0, 0, 3, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 2, 0]","1","1","1"
"adding additional capability to the master_is_stable health indicator service (#87482)          this builds on #86524 by supporting two additional conditions, both of which happen when there has been     no elected master for more than 30 seconds (from the queried node's point of view), and both of which return     a red status:     (1) there are no master-eligible nodes found in the cluster     (2) the node being queried sees a master-eligible node that has been elected the master, but cannot join it","[0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 4, 0]","0","0","1"
"fixing a bug in testyellowwithtoomanymasterchanges (#87865)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","0","0"
"fix rest example plugin (#87923)          this is a followup to     https://github.com/elastic/elasticsearch/pull/87504, to fix the example     plugin that used bytesrestresponse.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"speed up synthetic source (#87882)          this speeds up synthetic source, especially when there are many fields     in the index that are declared in the mapping but don't have values.     this is fairly common with ecs, and the tsdb rally track uses that. and     this improves fetch performance of that track:          ```     |  50th percentile service time |    default |   6.24029 |  4.85568 | ms | -22.19% |     |  90th percentile service time |    default |   7.89923 |  6.52069 | ms | -17.45% |     |  99th percentile service time |    default |  12.0306  | 16.435   | ms | +36.61% |     | 100th percentile service time |    default |  14.2873  | 17.1175  | ms | +19.81% |     |  50th percentile service time | default_1k | 158.425   | 25.3236  | ms | -84.02% |     |  90th percentile service time | default_1k | 165.46    | 30.8655  | ms | -81.35% |     |  99th percentile service time | default_1k | 168.954   | 33.3342  | ms | -80.27% |     | 100th percentile service time | default_1k | 174.341   | 34.8344  | ms | -80.02% |     ```          there's a slight increase in the 99th and 100th percentile service time     for fetching ten document which think is unlucky jitter. hopefully. the     average performance of fetching ten docs improves anyway so i think     we're ok. fetching a thousand documents improves 80% across the board     which is lovely.          this works by doing three things: 1. teach the `leaf` layer of source     loader to detect when the field is    empty in that segment and remove     it from the synthesis process    entirely. this brings most of the speed     up in tsdb. 2. replace `hasvalue` with `advancetodoc` returning     `boolean` and     cache the result. 3. replace the `arraylist` of leaf     loaders with an array. before fixing    the other two issues the     `arraylist`'s iterator really showed up in    the profiling. probably     much less worth it now, but it's small.          all of this brings synthetic source much closer to the fetch performance     of standard _source:          ```     |  50th percentile service time | default_1k |  11.4016  | 25.3236  | ms | +122.11% |     |  90th percentile service time | default_1k |  13.7212  | 30.8655  | ms | +124.95% |     |  99th percentile service time | default_1k |  15.8785  | 33.3342  | ms | +109.93% |     | 100th percentile service time | default_1k |  16.9715  | 34.8344  | ms | +105.25% |     ```          one important thing, these perf numbers come from fetching *hot* blocks     on disk. they mostly compare cpu overhead and not disk overhead.          ![image](https://user-images.githubusercontent.com/215970/174795592-dae78e69-4871-4698-911c-fb559eb5a78a.png)","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0]","1","0","0"
"more tests for filter-by-filter fast paths (#87857)          this adds some more tests for the filter-by-filter execution mechanism     for `terms` and `date_histogram` around the `fast path` that it can take     when we can use the lucene `weight#count` method. specifically, this     fixes some flakiness in a test when some segments can't take the fast     path. and it adds a new test where all segments can take the fast path     even though there is a filter - but the filter matches all documents.     finally, it fixes another flaky test that assumed there was always a     single segment.          closes #87722","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"add force_synthetic_source to mget (#87574)          this adds the option to force synthetic source to the mget api. see     #87068 for more discussion on why you'd want to do that - the short     version is to get an upper bound on the performance cost of using     synthetic source in mget.     ","[0, 0, 0, 0, 7, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 23, 0, 0, 2, 0]","0","0","1"
"[ml] improve scalability of nlp models (#87366)          we can improve a model's latency and throughput by using more     threads for each inference request. we can also improve its     throughput by processing multiple inference requests in parallel.     a user can set the model's `number_of_allocations` and `threads_per_allocation`     settings to increase performance.     however, if we use more threads than the node's allocated processors,     we end up with thread oversubscription and performance deteriorates throughout.          this commit changes the way model allocations are distributed across the     ml nodes of the cluster. up to now, we were trying to allocate each model     on every node. now, we make use of the `assignmentplanner` class introduced     in #86004 in order to compute an assignment plan that distributes model     allocations across the cluster while we maximize the number of allocations     we provide to each model without oversubscribing the nodes' cpu.","[1, 0, 0, 0, 38, 9, 4, 1, 0, 2, 0, 10, 8, 2, 1, 19, 3, 1, 0, 0, 1, 8, 9, 11, 1, 3, 7, 0, 0, 0, 0, 0, 0, 0, 15, 2, 0, 0, 0, 2, 0, 0, 117, 91, 2, 6, 159, 0]","1","1","1"
"fix failure on geoshapequerytestcase#testrandomgeocollectionquery (#87916)          use the safer geometrytestutils instead of lucene geotestutil to generate random polygons.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"cleanup indirection in batch close utils (#87685)          some of these show up in profiling of heavy transport load.     it's not a big thing but it's always nice to save a few cycles     on transport threads.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 21, 0, 2, 3, 0]","0","0","1"
"fix compilation     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"cleanup dead code in o.e.common (round 2) (#87825)          another 500+ loc of simple deletes.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"add high level java docs to desirednodes (#87875)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"use desired nodes during data tier allocation decisions  (#87735)          today when the datatierallocationdecider checks if a shard can be allocated     in a node or not it uses the current cluster topology. this works fine in most cases     when the data flows from hotter to colder data nodes as it was designed. but     in certain situations users might want to remove a tier (i.e. the cold tier) that     allows having shards in hotter tiers, but with the current implementation once     a shard is allocated into the highest preference tier and there are nodes of that     tier, the shard won't move. this commit introduces a change that allows to use     the desired nodes (when available) to compute the preferred tier based on the     cluster topology provided by the desired nodes (only taking into account desired     nodes that are in actualized status).","[0, 0, 0, 0, 32, 5, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 38, 58, 0, 2, 23, 0]","1","1","1"
"remove keystore v1 and v2 formats (#87893)          the keystore format has been changed a few times since it was first     introduced. part of elasticsearch startup automatically upgrades the     format. since elasticsearch has fixed bounds of supported versions for     upgrades, there are also fixed bounds on the keystore formats we might     need to read.          the v3 keystore format was introduced in elasticsearch 6.3.0. since     current elasticsearch master branch is 8.x, and 8.x only supports     offline upgrades from 7.x, it is therefore impossible to need to read     v1 or v2 formats. this commit removes support for those formats.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"use hashmap inside cluster info service (#87899)          the internalclusterinfoservice internally uses immutableopenmap     for keeping track of available space on each node. this commit converts     those usages to use hashmap. note that an unmodifiablemap wrapper is     used because updates to this (from each node) are likely to happen often     as disk is used.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0]","1","1","1"
"revert `simplify adding dynamic sub-fields to their dynamic parent object (#87866)`          this reverts commit 73b0273f4d83797fd364405bd2c420c7aee323bd (#87866) as an unexpected percolator test failure has surfaced, which did not surface as part of the pr tests run.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"simplify adding dynamic sub-fields to their dynamic parent object (#87866)          documentparsercontext holds all the dynamic mappers created while parsing a document, as well as dynamic object mappers on a separate map so they can be looked up by name quickly when parsing their sub-fields and looking for their parent field. for every sub-field, so far we looked up the corresponding object mapper and then call .newbuilder on it. calling newbuilder can be done already when the object mapper is added to the map, which simplifies the logic down the line as instead of creating a new builde for each sub-field, we re-use the same builder and add sub-fields to it. this has no effect on the resulting dynamic update, but it simplifies the code and it should have a positive impact on performance.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"move the master stability logic into its own service separate from the healthindicatorservice (#87672)          this commit moves most of the logic of stablemasterhealthindicatorservice into coordinationdiagnosticsservice,     leaving only the parts that are specific to forming up the health api response.","[0, 0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 23, 9, 0, 0, 0, 0, 0, 0, 10, 3, 0, 0, 4, 0]","0","0","1"
"ingest: move ingestdocument test ctor usage to static builder (#87770)          `ingestdocument` has a test constructor that takes a `sourceandmetadata` and `ingestmetadata` map.          however, that test constructor was also used from wire deserialization in `writeableingestdocument`     and during `xcontent` parsing.          this change moves test usage into test static builders and the wire usage into another static builder to     make the callers intent clear.          `ingestdocument`s constructed for test usage will not need metadata     validation performed on construction when that is added in a future commit.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 57, 2, 0, 49, 0]","0","0","1"
"[ml] add authorization info to ml config listings (#87884)          ml datafeeds and data frame analytics jobs remember permissions     from their time of creation or most recent update. it can be     quite hard to determine what these are when listing their     configs, which can lead to uncertainty about whether some minor     update changed the permissions.          this change adds information about the permissions to the     config listings.          if the last update was from a user then the permissions used     are the roles they had at the time, and a list of these roles     is added to the new `authorization` field of the datafeed or     data frame analytics job config listing.          if the last update was using an api key then the permissions     of that api key are used for subsequent searches and the new     `authorization` field of the datafeed or data frame analytics     job config listing shows the api key name and id.          if a service account did the last update then the service     account name is added to the new `authorization` field of the     datafeed or data frame analytics job config listing.","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0]","0","0","1"
"fix followindexsecurityit.testautofollowpatterns (#87853)          the test followindexsecurityit.testautofollowpatterns sometimes     fails when verifying the monitoring documents about auto-follow     stats. i wasn't able to reproduce locally but i suspect that monitoring     collects auto-follow stats before they are updated. instead it should     collect auto follow stats monitoring documents once indices are     effectively followed.          there are also some index / auto-follow pattern conflicts with other     tests in the same class, so this pr also changes that. in case this     fix is not enough, the full monitoring documents should appear in     test log to help further debugging.          closes #84888     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"add more detail to assertion in transportservice (#87756)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"specify proper port range in internaltestcluster (#87885)          today nodes started in an `internaltestcluster` use `transport.port: 0`     and `http.port: 0` which selects a port from the ephemeral range. this     range is also used by other tests, notably rest tests, and this can lead     to collisions and consequent failures when nodes restart.          this commit restricts the range of ports using the same algorithm as in     `estestcase`, avoiding[^1] such collisions.          [^1]: technically this isn't quite enough because the ephemeral range on     some ci workers overlaps the ranges chosen by `estestcase`, but that's a     separate issue tracked in #87734          closes #87448","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"remove aliases list from indexabstraction (#87877)          we are not using this list outside of a couple of tests but setting it up     was a non-trivial contributor to the performance of building the indices lookup.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0]","1","1","1"
"simplify bootstrap error logging (#87809)          during startup of elasticsearch we go to great lengths to present errors     in a meaningful way to users. over time, though, the error handling has     been amended to address various issues, and that has resulted in a     complicated system of try/catches handling various cases. one     particularly kludgy piece is removing the console logger in special     cases to avoid printing exceptions to the console. additionally, the     console removal wasn't actually effective because later in exception     handling the exception would be both logged anyways, and then also sent     to stderr, meaning that we could see the same exception several times.          this commit reworks how exceptions are logged during bootstrap. to     address the concern of printing full exceptions to the console, a new     log4j exception filter is added to the console appender which will only     print out the exception message and some additional explanatory info. to     address logging multiple times, the try/catch within init is removed so     that excpetions can propagate to the try/catch in main, which now     handles all exceptions. additionally, phase 1 (before logging) handles     it's own failure cases since there is definitely no logging at that     time. this simplifies the other failure cases latere so that they do not     need to check if logging has been initialized through sysprops.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 7, 3, 11, 0, 0, 0, 0, 0, 2, 2, 0, 1, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 8, 0, 26, 6, 1]","0","0","1"
"make cbe message creation more robust (#87881)          child circuit breakers rely on proper matching of acquire/release pairs.     this can be tricky to get right. if we get it wrong and accidentally     double-release a cb then it may end up with a negative `used` value.     this is definitely a bad situation in which to find ourselves, but today     in production it's made a whole lot worse because it causes exceptions     on every attempt to report a `circuitbreakerstats` or to construct a     parent `circuitbreakingexception`.          this commit makes the message construction and stats serialization a     little more robust so that it's clearer what is going on in production.          relates #86059","[0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 14, 0, 0, 4, 0]","1","1","1"
"revert `make cbe message creation more robust (#87687)`          this reverts commit 9ff9026871e27310c307020abb1c3fef0d4fc880.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 14, 18, 0, 0, 4, 0]","0","0","1"
"fix rest azuresearchablesnapshotsit (#87855)          this commit increases the rest client socket timeout to 90 seconds     so the client does not retry the tests requests when azure is not     responding in a timely manner, this avoids confusing tests errors.          closes #87389     closes #86813","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"make cbe message creation more robust (#87687)          child circuit breakers rely on proper matching of acquire/release pairs.     this can be tricky to get right. if we get it wrong and accidentally     double-release a cb then it may end up with a negative `used` value.     this is definitely a bad situation in which to find ourselves, but today     in production it's made a whole lot worse because it causes exceptions     on every attempt to report a `circuitbreakerstats` or to construct a     parent `circuitbreakingexception`.          this commit makes the message construction and stats serialization a     little more robust so that it's clearer what is going on in production.          relates #86059.","[0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 14, 0, 0, 4, 0]","1","1","1"
"checkstyle     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"upgrade checkstyle to 10.3 (#87792)          closes #83311.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"throw exception on illegal repositorydata updates (#87654)          in some edge cases we could attempt a broken write here today,     lets throw in addition to the assertion to not corrupt the repository     until a solution for the underlying problem is found.          relates #86889","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"added additional index.look_ahead_time validation (#87847)          added a requirement that index.look_ahead_time index setting     can't be lower than time_series.poll_interval setting.          additional changes:     * fixed a mistake in the docs that referenced indices.lifecycle.poll_interval     instead of time_series.poll_interval.     * moved index.look_ahead_time setting to data stream module.","[0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 0]","1","0","0"
"remove submitunbatchedstateupdatetask(...) usage from updatetimeseriesrangeservice (#87597)          this service periodically updates the cluster state in background     (updating `index.time_series.end_time` setting of the latest backing     index of all data streams). it was using the unbatched forbidden method.     this pr changes the service to use the     `clusterservice.submitstateupdatetask(...)` variant that uses task     executor. although it is unlikely that more than one concurrent update     is submitted from `updatetimeseriesrangeservice`, it is good to move     away from forbidden method usages. the executor is simple, in that it     just executes `updatetimeseriestemporalrange(...)` once if in the event     that multiple `updatetimeseriestask` are submitted.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"add rollover permissions for remote_monitoring_agent (#87717)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]","0","0","1"
"improve ownership handling of bytesref and bytesrefarray (#87660)          when de-serializing a bytesrefarray and creating a bytesrefhash from it, the ownership wasn't properly defined. this pr improves ownership handling and passing ownership. also fixes an unnecessary buffer cleaning on de-serialization.","[0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 6, 0]","1","0","0"
"add bytesrefstreamoutput (#87661)          add streamoutput that writes into bytesref(builder) that allows creating byterefs in situ, avoiding extra allocations.          relates #83055","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"adding a transport action to get cluster formation info (#87306)          this commit exposes clusterformationfailurehelper.clusterformationstate in a transport action (clusterformationinfoaction), with the intention that it be used as part of the master stability health check.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"handle empty point values in diskusage api (#87826)          the diskusage api can hit npe if the fieldinfos of points or doc-values     fields are still in segments; but the associated documents are gone.          closes #87761","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"fast build of allindicesarray in metadata.build (#87838)          no need to iterate this potentially enormous map twice to build the array,     just build it directly when iterating.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0]","0","0","1"
"jvmservice use singleobjectcache (#87236)          in [[[store] add simple cache for     storestats]](https://github.com/elastic/elasticsearch/commit/85c611a1b70627b2d1a6fbd254668b4ae64dff2b),     @s1monw  introduced a simple cache for `storestats`, `fsstats`,     `networkstats`, `osstats`, `processstats`, but not `jvmstats`. this pr     we introduce the `singleobjectcache` into `jvmservice`. i also remove     the useless `synchronized` in `osservice#stats()`.","[0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 2]","0","0","1"
"verify bulk response in tsdbdatastreamrestit (#87460)          version conflicts were returned, this is ok, because same timestamp and     routing values were provided. however, the tests should verify whether     the bulk response contains no error, so that we can catch future bugs.          adjusted the dummy data, so that we don't have documents that end up     generating the same time series id, which results in a bulk response     with no errors.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"rework testing conventions gradle plugin (#87213)          this pr reworks the testing conventions precommit plugin. this plugin now:     - is compatible with yaml, java rest tests and internalclustertest (aka different sourcesets per test type)     - enforces test base class and simple naming conventions (as it did before)     - adds one check task per test sourceset     - uses the worker api to improve task execution parallelism and encapsulation     - is gradle configuration cache compatible          this also ports the testingconventions integration testing to spock and removes the build-tools-internal/test kit folder that is not required anymore. we also add some common logic for testing java related gradle plugins.     we will apply further cleanup on other tests within our test suite in a dedicated follow up cleanup","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 3, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 18, 0, 9, 2, 0]","0","0","1"
"make desired nodes api operator-only (#87778)          * remove desired nodes api from non_operator_actions          * add desired nodes to the operator privileges test          * add desired nodes privileges integration tests          resolves #87777.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[transform] add authorization info to transform config listings (#87570)          transforms remember permissions from their time of creation     or most recent update. it can be quite hard to determine what     these are when listing transform configs, which can lead to     uncertainty about whether some minor update changed the     permissions.          this change adds information about the permissions to the     config listings.          if the last update was from a user then the permissions used     are the roles they had at the time, and a list of these roles     is added to the new `authorization` field of the transform config     listing.          if the last update was using an api key then the permissions     of that api key are used for subsequent transform operations,     and the new `authorization` field of the transform config listing     shows the api key name and id.          if a service account did the last update then the service     account name is added to the new `authorization` field of the transform     config listing.","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","0","0","1"
"automatically close idle connections in oidc back-channel (#87773)          in some environment, the back-channel connection can be dropped     without sending a tcp rst to es. when that happens, reusing the same     connection results into timeout error.          this pr adds a new http.connection_pool_ttl setting to control how long     a connection in the oidc back-channel pool can be idle before it is     closed. this allows es to more actively close idle connections to avoid     the timeout issue.          the new setting has a 3min default which means idle connections are     closed every 3 min if server response does not specify a shorter keep-alive.          resolves: #75515     ","[0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"fix optimization in balancedshardsallocator (#87843)          the optimization for a `null` does not apply today,     it should special case plain `yes`.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0]","1","0","0"
"revert `deprecation dataset value changed to elasticsearch.deprecation (#83254)` (#87837)          this reverts commit bb06fac.     relates #83251","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0]","0","1","1"
"remove unused routing allocation from disk threshold decider. (#87745)          remove unused routing allocation from disk threshold decider.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"remove default-value parameters from non-core queries (#87813)          this slims down the representations of all remaining queries not in the core          * percolate     * function_score     * script_score     * pinned          relates to #76515","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 6, 0]","0","0","1"
"bound ack time (#87787)          currently, our default wait time for ack is unbound. this could result     in an entire test suite timeout rather than individual test cases     failures.     ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0]","1","1","1"
"do not wait for the health node task (#87830)          the health node task is a permanent task, for this reason it doesn't make sense to wait for it in a method that waits for pending tasks. this fixes that.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"small fixes to clear voting config excls api (#87828)          fixes the name of the rest param in the error message, and expands the     api docs to emphasise that the exclusions should be empty in normal     operation.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"remove dead code from `tokenservice` (#87739)          this pr removes code marked as unused or redundant in tokenservice.     more involved code removal to come.          relates #87729","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0]","1","1","1"
"make diskthresholddecider a little faster (#87821)          this is the most expensive allocator left in many-shards benchmarks.     it gets a little faster with this change iterating over the cheaper     array and inlining a little nicer by having specialized methods     for the two cached states.","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 0]","0","1","1"
"cleanup dead code in org.elasticsearch.common (#87820)          just some obvious static cleanup of this package. should be trivial     to review since it's deletes only and still compiles/tests fine.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] fix trained model metadata serialization (#87817)          this is a follow-up fix to #87806.","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 1, 0]","1","0","0"
"remove redundant blobmetadata interface (#87705)          no need to have more than a simple record here at this point.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]","0","0","1"
"modularize the ingest-geoip component (#87746)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] rename trained model metadata after full cluster upgrade (#87806)          in #85503 we renamed trained model allocations to assignments.     however, it is important to wait for the full cluster to be     upgraded before we rewrite the cluster state so that there are     no undesired side-effects in a mixed cluster.","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0]","0","0","1"
"modularize ilm/slm (#87769)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"re-enable several tests since jdk-8287097 has been fixed (#87803)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0]","1","0","0"
"remove unused wrapped rest handler (#87805)          this class isn't used anywhere.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"use map in snapshot/restore tracking (#87666)          snapshot/restore keeps track of progress in immutableopenmaps. this     commit changes these tracking structures to use hashmap.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"remove immutableopenmap from disk threshold tests (#87658)          these tests pass immutableopenmaps to clusterinfo, but that now takes     map. this commit uses hashmap in the tests instead.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 14, 10, 0, 51, 0]","1","1","1"
"remove hlrc impl of pinnedquerybuilder (#87796)          we have an extra implementation of pinnedquerybuilder that was added to     expose it to the high-level rest client. this is no longer needed, so we can     safely remove it.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"modularize the lang-mustache component (#87789)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"move logging config assertion to server cli (#87774)          the log4j configuration file is shipped with all es distributions. we     also check recursively for files possibly added by plugins. if no files     are found, we give a helpful startup error message. however, since the     log4j2 configuration file shipped with es should always exist, we can     check upfront in the cli before even initializing logging.          this commit moves the validation of an existing log4j2 properties file     to the server cli.","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0]","0","0","1"
"modularize the kibana, mapper-extras, parent-join, and systemd, components (#87794)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"modularize the lang-expression component (#87790)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"remove dead code in rest and http packages (#87786)          removing some mroe unused and needlessly verbose things here,     this code is complicated enough as it is already.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 6, 0]","1","1","1"
"fix missing intermediate object error when applying dynamic template (#87622)          when we apply dynamic mappings, we iterate over all the dynamic mappers retrieved from the documentparsercontext, which are registered while parsing the document, and for each field look up their parent (going back multiple levels if necessary), and add it to the dynamic mapping update with the added/modified sub-field.          dynamic mappers that are iterated through consist of a flat set of mappers, which can be both object mappers or field mappers. most times, the object mappers from such set have no sub-fields as they are mapped as a result of parsing a document where the object appears for the first time, which also has sub-fields that are going to be added to the set of dynamic mappers themselves once they are parsed.          there are scenarios though where a dynamic template matches an object, and defines its structure including its subobjects as well as sub-fields. in that case the dynamically mapped object may hold sub-fields as well as define non-default values for dynamic, enabled or subobjects. the described situation was not well covered in tests so far, and is currently affected by a bug introduced with #81449. when an object mapper is dynamically mapped, it is added to the map of dynamic object mappers, which makes it discoverable for sub-fields that will need to be added to it later, as well as to the set of dynamic mappers so that it becomes part of the mappings in case the document being parsed defines no sub-fields for it. what is missing is to recursively add its sub-fields to the dynamic object mappers. as a result of missing this step, intermediate objects that were dynamically mapped are not made discoverable which causes a cryptic `missing intermediate object` error.          this commit fixed the problem by recursively registering inner sub-objects to the dynamic mappers whenever an object mapper is added to the dynamic mappers. it also changes the `missing intermediate object` error to make it more evident that it's an internal error and not a user error: it is now an illegalstateexception instead of an illegalargumentexception.          closes #87513","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"[ml] require that threads_per_allocation is a power of 2 (#87697)          as the number of cores in cpus is typically a power of 2,     this commit adds a validation that trained model deployments     start with `threads_per_allocation` set to be a power of 2.     when we look for how we distribute the allocations across the     cluster, this prevents situations where we have a lot of wasted     cpu cores.          in addition, we add a max value limit of `32`.","[0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","0","0","1"
"fix cancellableratelimitedfluxiteratortests#testcancellation (#87641)          ensure the test cancellation consumer provides enough visibility.          closes #87112","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0]","1","0","0"
"remove key rotation code from `tokenservice` (#87744)          the key rotation code in the tokenservice was never used outside of     tests. i've made a conservative pass with this pr that removes key     rotation related code but maintains bwc.          i haven't touched things like the keycache field and the code related     to the actual use of the encryption key. afaict that code is still     relevant from a bwc perspective, where upgrades from old versions are     concerned. making bwc cuts is tracked separately (#87726).          relates #87729","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"simplify restresponse implementations (#87504)          this sets up chunked encoding rest responses. make it so we only have     a single rest response implementation (+the security filtering override)     throughout the codebase. the test implementations were all redundant,     removing them made the abstract base class redundant.     a follow-up to this will change the signature of the `content()` method     to an abstraction that allows for chunked encoding and simplify     the very complicated resource handling associated with rest responses in     `org.elasticsearch.http.defaultrestchannel#sendresponse` based on the     simplification in here.","[0, 0, 0, 0, 12, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 3, 0, 0, 14, 7, 0, 0, 148, 4]","1","1","1"
"[test] [idp] add test for multiple sso roles (#87680)          within the identity provider we support sso roles (via application     privileges) being assigned directly to an sp (by entity id) or via a     wildcard.          it is possible that a user has a role via a wildcard (e.g. `viewer` on     `marvel:avengers:*`) and a different role via a direct assignment (e.g.     `editor` on `marvel:avengers:thor`). in this case the saml assertion     should contain both attributes (`viewer` and `editor`).          this commit adds a test for this behaviour. no other code changes were     required because the functionality works as intended, it just didn't     have an integration test.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"tests for synthetic _source from translog (#87578)          this adds tests to make sure that we use all of the normal synthetic     source machinery, even when loading from the translog. so all gets on     synthetic source indices will require an in memory index. that'll be an     extra cost on indices that are updated very very frequently.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add more debugging for readiness test timeout (#87652)          ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 2, 0]","0","0","1"
"[ml] add reason of stopping model deployment to logs (#87752)          the reason was not logged in info level. the reason is very     useful to debug issues.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"remove unused deadlockanalyzer (#87664)          random find, this class and a couple of other spots in the package are unused.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"add lintian overrides to ignore intel mkl not linked to libc (#87706)          we don't build these libraries ourselves and the license forbids     us from modifying them in any way, so we won't be able to make     this rule pass on them. all we can do is override it.          fixes #87632","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","1","0","0"
"modularize the ingest-user-agent component (#87747)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"modularize the legacy-geo component (#87740)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[transforms] fix bug when unsetting retention policy (#87711)          it is currently not possible to unset the retention policy in a typical multi-node cluster.          this commit fixes that bug. if unsetting the retention policy failed, it would fail looking like the following error:          ```     an error occurred calling the api endpoint to update transforms.     bad request: [illegal_argument_exception: [illegal_argument_exception] reason:     unknown namedwriteable [org.elasticsearch.xpack.core.transform.transforms.retentionpolicyconfig][null_retention_policy]]:     unknown namedwriteable [org.elasticsearch.xpack.core.transform.transforms.retentionpolicyconfig][null_retention_policy]     ```          closes: https://github.com/elastic/elasticsearch/issues/87688","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0]","1","0","0"
"do not leak recover from snapshot file permits when recover from snapshot is disabled (#87633)          closes #86705","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]","0","0","1"
"modularize the h3 component (#87737)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix possible npe in startup exception handling (#87732)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0]","1","0","0"
"do not include desired nodes in snapshots (#87695)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]","0","0","1"
"log 'output of node' separators to stdout (#87736)          today when using gradle-managed test clusters we separate the log output     from each node with a separator that looks like this:          === log output of node `node{:qa:mixed-cluster:v8.2.0-0}` ===          however, we write this to `stderr` and yet write the rest of the log     output to `stdout`. this commit moves the separators to the same log     level as the rest of this output so that they can all be redirected to     the same place.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"make snapshot deletes not block the repository during data blob deletes (#86514)          snapshot deletes need not block other operations beyond the updates to the repository metadata at the beginning of the delete operation. all subsequent blob deletes can safely run async and concurrent to other operations.          this is the simplest possible implementation of this change that i could find. it's not the most optimal since concurrent deletes are not guarded against trying to delete the same blobs twice. i believe this is not a big issue in practice though.     for one, we batch overlapping deletes into single operations, so we will only try to redundantly delete blobs leaked by previous operations that are part of indices still referenced (which will generally by a very limited number of blobs i believe) and indices that went out of scope. indices that went out of scope are deleted by listing out blobs and deleting them in turn, which means that we likely won't be attempting all that many redundant deletes even if the same index would be touched by concurrent delete operations and even if we did, the additional memory use would be bounded.","[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 7, 2, 0, 9, 0]","0","0","1"
"persistent health task (#86131)          this pr introduces a persistent task which will be used to select the health node.","[0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 7, 0]","1","1","1"
"make getindexaction cancellable (#87681)          the get-indices api does some nontrivial work on the master and at high     index counts the response may be very large and could take a long time     to compute. some clients will time out and retry if it takes too long.     today this api is not properly cancellable which leads to a good deal of     wasted work in this situation, and the potentially-enormous response is     serialized on a transport worker thread.          with this commit we make the api cancellable and move the serialization     to a `management` thread.          relates #77466","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0]","0","0","1"
"keep track of desired nodes status in cluster state (#87474)          this commit adds desired nodes status tracking to the cluster state. previously status was tracked     in-memory by desirednodesmembershipservice this approach had certain limitations, and made     the consumer code more complex. this takes a simpler approach to keep the status updated when     the desired nodes are updated or when a new node joins, storing the status in the cluster state,     this allows to consume that information easily where it is necessary.     additionally, this commit moves test code from depending directly of desirednodes which can be     seen as an internal data structure to rely more on updatedesirednodesrequest.          relates #84165","[0, 0, 0, 0, 25, 5, 0, 2, 0, 1, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 60, 47, 2, 1, 69, 0]","0","0","1"
"fix configdatabasestests#testdatabasesdynamicupdateconfigdir() test (#87699)          configdatabases#getdatabase(...) can return null and that is ok,     but an assertbusy() block in testdatabasesdynamicupdateconfigdir() test     expects that the loader is always not null and that may not the case.     adjusted this assertbusy() to check for null. otherwise, a npe may be     thrown and assertbusy() doesn't retry that, it only retries assertion     errors.          closes #86805","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"fixup highlighting with synthetic source (#87667)          synthetic source has a habit of reordering text fields. this frustrates     highlighting because it *often* wants to use index structures to find     the offsets to values in the field. this disables the fvh highlighter     for multi-valued text fields when synthetic source is enabled and runs     the unified highlighter in `analyze` mode when synthetic source is     enabled. that's *enough* to stop them from spitting out wrong answers.          we might be leaving some performance on the table when the unified     highlighter works on a single valued text field that is indexed with     offsets or term vectors. we don't really expect that to be common at all     though because *generally* folks will enable synthetic source to save     space and adding offsets or term vectors is quite space inefficient. if     it comes up, we might be able to improve here.     ","[0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 1, 3, 0]","1","0","0"
"fix replicashardallocatorit.testprefercopycanperformnooprecovery (#87638)          prevent failure in the unlikely edge case of having the dummy index not     allocated on the empty data node because a slow shard store fetch     disabled the rebalance allocator. this failed because the subsequent     relocation would then make `ensuregreen` time out because as a result     of getting blocked just the same way the initial peer recovery tested     is blocked.          closes #87569","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"[ml] add sentence piece pre-compiled normalizer (#87575)          this is one of the many prerequisites for supporting sentence-piece tokenization within nlp.          sentence piece is a fairly complicated and involved tokenization scheme.          this commit contains the normalization logic that transforms the provided string from its current utf8 bytes into a standard normalized set of utf8 bytes.          the typical storage for this normalizer is a compressed representation of a darts array and a null delimited normalization string.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"check earlier for nested type with disabled subobjects while parsing doc (#87644)          with #87218 we have expanded testing and made sure that we check that the nested type is not used within objects that have subobjects disabled.     this commit moves the check needed while applying dynamic mappings to an earlier point, where it is possible to distinguish between nested and object, so we can expose a different error in the two scenarios.          also, this commit rewords the error message thrown so that it is more user-friendly.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"ingest: ingestdocument requires non-null version (#87665)          changes the type of the version parameter in `ingestdocument` from     `long` to `long` and moves it to the third argument, so all required     values occur before nullable arguments.          the `ingestservice` expects a non-null version for a document and will     throw an `nullpointerexception` if one is not provided.          related: #87309","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 53, 0]","0","1","1"
"[tsdb] add kahan support to downsampling summation (#87554)          this pr adds support for kahan summation when downsampling time series indices          relates to #74660","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] skip ml bwc tests against versions before 7.17.5 and 8.2.2 on rhel 9 (#87678)          rhel 9 suffers the same problems as ubuntu 22.04 that were fixed by     https://github.com/elastic/ml-cpp/pull/2272.          the glibc version on rhel 9 is 2.34 (versus 2.35 on ubuntu 22.04),     so we need to adjust the skip logic.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"use map in clusterblocks (#87659)          clusterblocks keeps track of cluster wide blocks per index. this map is     not updated often, and so immutableopenmap is not critical. this commit     converts it to using immutable jdk maps.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","1","1","1"
"bump version for 8.2.3 release     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add parameterizedmessage to forbidden api (#87631)          parameterizedmessage will not be part of the new es logging api and therefore should not be used.     java.util.supplier and string.format should be used instead.          this commit adds parameterizedmessage to forbidden api          relates #86549","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"eql: avoid attempting pit close on pit open failure (#87498)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0]","1","0","0"
"use map in snapshotshardsizeinfo (#87579)          snapshotshardsizeinfo keeps a mapping of shard to size of the shard.     this commit converts that from an immutableopenmap to map. note that     this does not yet change the implementation to hashmap (except in     tests). immutableopenmap is still used in internalsnapshotinfoservice     for now.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 10, 0]","1","1","1"
"report overall mapping size in cluster stats (#87556)          adds measures of the total size of all mappings and the total number of     fields in the cluster (both before and after deduplication).          relates #86639     relates #77466","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"handle empty result in testrandomlimitconcurrentrequests (#87619)          closes #87595","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"remove obsolete test for realm domain setting registration (#87630)          as part of feature flagging user profiles (#83347), we introduced     branching based on build type for setting     domain_to_realm_assoc_setting to enable easy downstream testing.     we've since removed the feature flag and the branching logic. the     outdated test fails for non-snapshot builds because the setting is now     always included. this pr removes the test since     domain_to_realm_assoc_setting is now a regular xpack setting like any     other.          closes #87628     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"remove total and active shard count from routingnodes (#87617)          these are not used any longer.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 2, 0]","1","1","1"
"deprecation dataset value changed to elasticsearch.deprecation (#83254)          the dataset value for all es logs are prefixed with elasticsearch + log     type. like elasticsearch.server. deprecation log had it reverted     deprecation.elasticsearch     this commit renames the dataset for deprecation logs to     `elasticsearch.deprecation.          closes #83251","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0]","1","0","0"
"remove filter-by-filter specialization for match_all and match_none. (#87550)          with better rewriting of `bool` queries and the introduction of `weight#count`,     we no longer need to specialize filter-by-filter for `match_all` and     `match_none` queries and can instead rely on their implementations of     `weight#count` to return maxdoc / 0.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 4, 0, 0, 12, 1]","0","1","1"
"give doc-value-only mappings to numeric fields on metrics templates. (#87100)          it doesn't make much sense to filter samples depending on the values of some     metric fields, as these metrics mostly make sense in aggregate and over time.     this change proposes to give doc-value-only mappings to numeric fields in the     default metrics template. this helps reduce index-time cpu usage and disk usage     while not impacting the search-time experience.          these doc-value-only dynamic templates might catch fields that are not metrics     at times, which is probably ok.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"add logging for id token header on badjoseexception (#87347)          when id token validation fails with badjoseexception, the jwt header     section can provide useful information for troubleshooting without     having to ask for the full id token. this pr adds a debug message to     show the header.          note the header may not be sufficient for debugging all failure     scenarios. but it should be helpful for more common configuration     errors.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]","0","0","1"
"refactor various parameterizedmessage usages into string.format (#87603)          parameterizedmessage is part of log4j api and should not be used     in places where a lambda and string.format would be enough.          this commit is the last batch of refactoring to get rid of parameterizedmessage     in es codebase and consists of various, not related usages.          relates #86549","[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 35, 0]","1","1","1"
"changing the url for increasing tier capacity documentation (#87560)          this commit changes the url of the documentation for increasing node capacity in a tier in the     shards availability indicator in the heath api from http://ela.st/node-capacity to     http://ela.st/tier-capacity.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","1","1"
"simplify boostrap shutdown (#87581)          the shutdown hook registered in bootstrap is run when the jvm is     shutting down. an almost identical method, stop(), exists for a special     windows case that can skip shutdown hooks. this commit consolidates the     two into a new shutdown() method used for both. additionally, the flag     for determining whether the shutdown hook should be added in bootstrap     setup was always true, so it is removed.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 2, 0]","0","0","1"
"clamp auto-expand replicas to the closest value (#87505)          ensure that the number of replicas chosen for an auto-expand-able shard     is within the range of the available data nodes, i.e., excluding those     nodes that cannot be assigned a replica.          closes #84788","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 3, 0]","0","0","1"
"mute testgeopointgeohex #87391 (#87606)          related #87391","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] fixes inference timeout handling bug that throws unexpected nullpointerexception (#87533)          the timeout thread was being scheduled to be executed before all the requisite fields were populated.          this would (usually only in extreme circumstances), would throw a null pointer exception that looked like:          ```     2022-06-06t23:40:42,534][error][o.e.b.elasticsearchuncaughtexceptionhandler] [javaresttest-2] uncaught exception in thread [elasticsearch[javaresttest-2][ml_utility][t#4]]     java.lang.nullpointerexception: cannot invoke `org.elasticsearch.xpack.ml.inference.deployment.deploymentmanager$processcontext.gettimeoutcount()` because `this.processcontext` is null     at org.elasticsearch.xpack.ml.inference.deployment.abstractpytorchaction.ontimeout(abstractpytorchaction.java:58) ~[?:?]     at org.elasticsearch.common.util.concurrent.threadcontext$contextpreservingrunnable.run(threadcontext.java:709) ~[elasticsearch-8.4.0-snapshot.jar:?]     at java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1136) ~[?:?]     at java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:635) ~[?:?]     at java.lang.thread.run(thread.java:833) [?:?]     ```          this pr fixes this bug and an additional (more minor) bug where inference call rejections were not accurately counted.          closes: https://github.com/elastic/elasticsearch/issues/87457","[1, 0, 0, 0, 4, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 33, 0, 2, 1, 0]","1","0","0"
"use cheaper map for routingnode.shardsbyindex (#87599)          no need for preserving order on this map, it's only used for counting     shards of a specific index per node.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 1, 7, 0]","1","1","1"
"speed up iteration over immutableopenmap on hot paths (#87600)          the adjusted spots can see very large maps of o(index_count) getting iterated.     moving them to the efficient `foreach` that iterates the action in a tight loop     over an array instead of using the indirection of the iterator loop gives     a measurable speedup in many-shards benchmark bootstrapping.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 2, 0]","0","0","1"
"suppress windowsfs in reloadingdatabaseswhileperforminggeolookupsit (#87517)          windowsfs fails if a files that is open/in use while being deleted.     however, when there is a new database in geoip index then databasenodeservice     will download that and replaces the database file in use by using a file move.     only windows has issues with this and windowsfs emulates this behaviour.          i think for now it is best to suppress windows fs in this test.          closes #87453","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix configuration cache compatibility issues in gradle plugins (#87567)          this fixes references to project that makes the plugin incompatible with gradle     configuration cache. we also remove custom xpackproject utility:          using xpackproject in certain situations can break configure configuration cache compatibility as it uses a mutual project object under the hood that is discouraged to use in some use cases (e.g. at execution time)          it always breaks compatibility with --configure-on-demand          using xpackproject uses the project of the :x-pack project. referencing other project objects from other subproject should avoided where possible to decouple (sub project configurations). there's a good explanation of why we want to decouple our project configurations as much as possible here: https://docs.gradle.org/current/userguide/multi_project_configuration_and_execution.html#sec:decoupled_projects          it adds little value over default out of the box gradle api (just use project(':x-pack:someproject') instead of xpackproject('someproject') also in some occasions its even shorter. e.g. when this is used as xpackproject('someproject').path instead of just passing :x-pack:someproject          i'll try to put a bit more context in the pr description in the future to make the motivation behind these kind of changes more clear upfront          related to #57918","[0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 9, 1, 0, 14, 0]","1","0","0"
"test fix: ensure a node role will not be used as an attr (#87588)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"stable logging api - the basic use case (#86612)          introducing a stable logging api under libs/logging.     this change covers the most common use cases for logging: fetching a logger with logmanager, emitting a log messages with logger and level.     it is influenced by log4j2-api, but do not include marker and logbuilder methods.     also methods using org.apache.logging.log4j.util.supplier are replaced with java.util.supplier          the basic implementation is present in server and injected statically in logconfigurator          relates #84478","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","1","1"
"refactor parametrizedmessage.getformattedmessage into strings.format (#87324)          parametrizedmessage is part of log4j api and should not be used     in places where a simple string.format would be enough.     many of usages like this are message formatting for exceptions being     thrown.          relates #86549","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0]","1","1","1"
"`403` on unauthorized grant api key action (#87461)          users with only the manage_own_api_key privilege are unauthorized to     grant api keys. the current error response in this scenario is a 400,     with a confusing error message. this pr changes error handling to     return a 403 with a canonical `action ... is unauthorized for user     ...` error message instead, since the underlying cause is an     authorization error rather than a bad request.          closes #87438","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"avoid making the index read-only in the force merge action for ilm (closes #43426) (#81162)          added a new noopstep that we can use as a placeholder for a step that we had in a previous version but now we want to remove it. if the just go and erase the step then the indices that were in that step will get into a stuck state. instead, we're using the same old step key but with this noopstep which does nothing but the transition to the next step.          modify the forcemergelifecycleaction in ilm so it doesn't make the index read-only. for older indices already in the `convert index to read-only` step before the upgrade, we'll use the noopstep mentioned before in order to ignore the step and just transition to the next one.          solves: #43426          co-authored-by: lee hinman <dakrone@users.noreply.github.com>","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, 12, 0]","0","0","1"
"remove impossible exception from security configuration (#87542)          bootstraping security declares a checked nosuchalgorithmexception.     however this seems to be a historical implementation detail that is no     longer present, as none of the methods called from security.configure     declare this as a thrown exception. this commit removes the exception     from the method's declaration.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","1","1"
"add more graalthread filtering in tests (#87571)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add error message when searchable snapshot cache wasn't cleared (#87503)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"script: load whitelists as resource (#87539)          changes painlessplugin.class.getresourceasstream to     painlessplugin.class.getresource to avoid leaking unclosed     input streams","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"fixing bug in stablemasterdisruptionit.testrepeatednullmasterrecognizedasgreenifmasterdoesnotknowitisunstable() (#87519)          the test could wait up to 30 seconds for a master to step down. in that case, the start of the `null` master     could be 30 seconds ago, which put it outside of the range of the default acceptable time for there to     have been a master for the stability check. so the stability check returned red since there was no master     in the last 30 seconds. this changes that setting to 60 seconds so that it is always picked up.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"[ml] fix wordpiece tokenization of unknown words with known subwords (#87510)          unknown words containing known subwords are still unknown","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0]","1","0","0"
"add force_synthetic_source to get (#87536)          this adds the option to force synthetic source to the get api. see     #87068 for more discussion on why you'd want to do that - the short     version is to get an upper bound on the performance cost of using     synthetic source in get.     ","[0, 0, 0, 0, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 20, 0, 0, 6, 0]","0","0","1"
"simplify + speedup metadata build some more (#87557)          no need to iterate the indices map another time just to add up     the shard counts.     also, removes the redundant use of the indices keyset together with     the indices map as well as a redundant loop over the aliases in the     name collision check.","[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 6, 3, 4, 0]","0","0","1"
"fail shard if started after master failover (#87451)          if `cluster.no_master_block: all` then we remove all shards locally     whenever there's no master, but there might still be a shard-started     message in flight. when the new master is elected we start to recover     our shards again and the stale shard-started message could arrive and     move this shard to `started` in the cluster state too soon. this is     pretty rare so we fix it by just failing the shard and starting the     recovery again.          closes #87367","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"remove immutableopenmap from autoscaling (#87535)          autoscaling uses immutableopenmap to keep track of the memory used on     each node. a map should work just fine here. note that the wrapper     collections.unmodifiablemap is used because of the way modifications are     made to the map. map.copyof could be used, but it's unclear if the extra     indirection is worse than the extra copying since this should not be     changing or being accessed in any hot loops.          relates #86239     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 4, 0, 0, 4, 0]","1","1","1"
"remove impossible checked exception from jarhell (#87541)          the jarhell check declares a urisyntaxexception. however, this should     not be possible as the paths and urls come from the jdk conversion. this     commit makes a urisyntaxexception when converting form url to uri an     assertion error, similar to malformedurlexception when creating a url.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","1"
"[transform] implement per-transform num_failure_retries setting. (#87361)          ","[0, 0, 0, 0, 8, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 32, 0, 0, 24, 0]","1","1","0"
"speed up clusterstatehealth constructor (#87552)          this does not need to build the routing nodes, nor do we need to iterate all indices     twice.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 7, 2, 0]","0","0","1"
"add assertion that all field mapper names are interned (#87238)          follow up to #86301. assert that all field names are interned so we don't     lose this optimization and fix `fieldaliasmapper.name` for it not to trip.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0]","1","0","0"
"revert `add support for version field type in sql and eql (#85502)`          this reverts commit 79b0078b0dfaeba83a68ccc8c9e39701b2f231e3.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 3, 0, 0, 0, 0, 0, 0, 20, 1, 5, 0, 5, 0]","0","0","1"
"add support for version field type in sql and eql (#85502)          ","[0, 0, 0, 0, 17, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 20, 5, 0, 5, 0]","0","0","1"
"move test-only code from routingnode to tests module (#87537)          with recent refactoring we only instantiate these with an empty map in production     and mutate afterwards. we can do the same in tests and save the test only code     in server.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 42, 0]","1","1","1"
"[ml] fix parsing of pytorch thread settings (#87525)          during #86277 an error was introduced in parsing of pytorch     thread settings. this commit fixes the issue.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"remove cluster block preflight check from health api (#87520)          removes the logic at the start of the health service that returns unknown status in case     the cluster state not recovered block is in place. instead, we will defer directly to the     master-is-stable indicator and all following preflight indicators.","[0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 10, 1, 0, 0, 8, 0]","0","0","1"
"consolidate early startup into phase1 (#87509)          this commit introduces a new method in startup of elasticsearch that     consolidates all the steps up to and including initialization of     logging. some ordering is changed as some steps were not actually     necessary to run before logging, for example loading secure settings     since they are not actually used by logging.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 6, 2, 2, 0]","1","1","1"
"report file checksum when encountering artifact transform failures (#87522)          ","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 0, 0, 1, 0]","1","0","0"
"upgrade folders after settings validation (#87319)          when upgrading from 7.x to 8.x, we remove the `nodes/0` subfolders from the     data path. this is an irreversible change and once done, downgrade is not     possible. now do settings validation prior to moving folders to ensure that     a bad setting does not prevent a downgrade.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0]","0","1","1"
"mute cancellableratelimitedfluxiteratortests testcancellation (#87524)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"speed counting filters/range/date_histogram aggs (#81322)          lucene has a `weight#count` method which will return a count of matching     documents if it can do so in constant time. we have similar code in the     `filters` aggregator and it seems silly to maintain two copies of the     same thing. better yet, lucene knows how to take the constant time count     path in a few cases that aggs don't and we get to pick those up. namely,     we can now get a constant time count for `match_all` even when there are     deleted documents or document level security. we can also go the     constant time count path on cached queries now which is a lovel speed     bump.          co-authored-by: adrien grand <jpountz@gmail.com> (seriously, he really rescued this thing)","[0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 7, 8, 8, 0, 33, 0]","0","1","1"
"fix test conventions when skipping ml upgrade tests (#87516)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"add tier information on health api migrate tiers user actions (#87486)          the shards availability indicator can produce user actions that suggest migrating to data tiers     for a set of indices. this change updates the text returned from those user actions to include     the data tier that is affected.          co-authored-by: andrei dan <andrei.dan@elastic.co>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"speedup routingnodes constructor (#87514)          the routingnode instances are mutable. this pr leverages     that fact by building them directly instead of first collecting     a shards map and then building from that which saves quite     a few cycles since no per-data-node map has to be iterated.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 7, 2, 0, 3, 0]","0","0","1"
"add back netty4writethrottlinghandler to http pipeline (#87407)          follow-up to #86922 bringing back the write throttling handler (with necessary adjustments)     as removing has measurably reduced scroll performance in nightly rally runs.     throttling at a lower level instead of only at the 1m http chunk level provides a measurable     benefit to latency as it turns out in benchmarks so lets bring it back.     this requires adjusting the write throttling handler to pass through writes that could be flushed     directly so that the upstream throttling sees the correct channel writability status.     before this change the channel would always look writable because we wouldn't be buffering     anything in the actual outbound buffer but just in the internal queue in the write throttling     handler.     also, this pr adds coverage for the new code paths in the write throttling handler which together     with the existing coverage should give us safe coverage of all possible throttling and message     size combinations.          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","0","0","1"
"user profile - remove feature flag (#87383)          the feature flag is no longer necessary in the 8.4 release cycle. the     feature itself is still in beta.","[0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 11, 2, 0, 4, 0, 0]","1","1","1"
"fixing an occasional testyellowwithtoomanymasterchanges failure (#87483)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","0","0"
"don't run include_in_parent when in copy_to context (#87123)          we changed how copy_to is implemented in #79922, which moved     the handling of dots in field names into a specialised parser. unfortunately,     while doing this we added a bug whereby every time a copy_to directive     is processed for a nested field, the nested field's include_in_parent logic     would be run, meaning that the parent would end up with multiple copies     of the nested child's fields.          this commit fixes this by only running include_in_parent when the parser     is not in a copy_to context. it also fixes another bug that meant the parent     document would contain multiple copies of the id field.          fixes #87036","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"move the writeto and read for get requests (#87467)          this moves the writeto methods next to the read requests for get, mget,     and `_search` so they are easier to read.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"make bootstrap stacktrace printing less cumbersome (#87478)          the special startupexception is a class that exists to allow truncating     long stacktraces from the terminal output on startup. this is     particularly important for guice errors, which can be enormous.     currently bootstrapexceptions are wrapped with startupexception to     handle possibly truncating them when printing. however, since main no     longer throws exception, all handling of stacktrace printing is within     exitwithunknownexception. this commit makes the truncated stacktrace     printing a utility method instead of a full blown runtimeexception     wrapper.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 33, 0, 0, 4, 0]","1","1","1"
"[test] increase ldap connection timeout (#87208)          increased ldap connection timeout to 10s to avoid test failures.          by default, ldap and active directory's timeout was set to 5s.     this seems not to be enough when running integration tests on ci servers     that use samba fixture.          closes #86958","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"fix a bug with flattened fields in terms aggregations (#87392)          the root cause here was that missing did not correctly delegate `supportsglobalordinalsmappnig` to the wrapped values source, instead falling back to the default.  i've added the delegation, and made the base method abstract so this doesn't happen again.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]","1","0","0"
"lower overhead of restapiversion use in x-content parsing (#87356)          noticed loads of duplicate lambdas on the heap and code related to these predicates     etc. pop up during benchmarking things that are hot on x-content parsing.     these changes way simplify the rest-api code (though it could be made even simpler i think)     and remove it from profiling for the most part.          co-authored-by: joe gallo <joe.gallo@elastic.co>     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"sql: fix date range checks (#87151)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"make the metric in the buckets_path parameter optional (#87220)          with this change the metric field name becomes optional if the     'bukets_path' is pointing to a multi-value aggregation with a single     metric field. normally the full path would be required including     the aggregation name followed by the metric field.          if the metric is not specified in the path and the multi-value     aggregation computes more than one value an error is thrown.          the old notation is still supported for backward compatibility in case     the full path is specified and the target multi-value aggregation     computes a single value.","[0, 0, 0, 0, 3, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 12, 2, 2, 0, 0]","1","1","1"
"fork to write thread before failing shard in updatecheckpoints (#87458)          failing a shard may block on io so must not happen on a transport worker     thread. with this commit we use a `write` thread to handle shard     failures caused by exceptions thrown within `updatecheckpoints`.          closes #87094","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 9, 0, 0, 3, 0]","1","1","1"
"add debug information to reactivereason about assigned and unassigned shards (#86132)          we would like to see not only the amount of assigned and unassigned shards, but also the ids of the respective shards.          fixes #85243          * calculate assigned shards based on storagepreventsremainormove and storagepreventsallocation0     * correctly set assignedshardids     * add a todo     * add tests for assigned and non-assigned shard ids for reactivestoragedeciderservice     * remove changes in proactivestoragedeciderservice     * update docs/changelog/86132.yaml     * return empty list for unassigned shards if can't make a decision     * keep a terse constructor for reactivereason     * move assignedbytesunmovableshards initialization to the original point     * add tests for json representation of reactivereason     * add a missed license header     * shards ids are empty if the context is null     * use shardids helper     * use shardid in records     * use record to represent amount of bytes and shard ids     * sort shards by their ids     * limit the amount of assigned shards in the output     * test that we limit the amount of assigned shards in the output     * move to sortedset     * add tests that shard ids are sorted     * remove internal package protected methods of allocation info     * verify shard ids     * correctly calculate the amount of unmovableshards     * move assignedbytes     * extract the max amount of assigned shard ids to a constant     * extract the shard ids output version to a constant     * rename bytesshardids to shardssize     * extract shardssize to a top level class     * keep shards its closer to the total size     * add missed license import     * update docs/changelog/86132.yaml     * fix the test for assigned shard json field names     * limit the amount of unassigned shards     * rename the limit to max_amount_of_shards     * use tolist instead of collections.tolist     * bring back public accessors     * precollect unallocated shards to avoid double calculation     * update version to v_8_4_0     * randomize index name     * coalesce numallocatablesubjectshards and allocatableshards     * randomize indexname     * add comment about duplicated shard ids","[0, 0, 0, 0, 6, 4, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 8, 37, 1, 0, 31, 0]","1","0","0"
"fix serialization checks in force_synthetic_source (#87481)          this fixes a missing check for unsupported version logic that'd cause     `force_synthetic_source` to be silently dropped when sent to nodes     before 8.4. it also fixes an incorrect version number in an error     message.          relates to #87068","[0, 0, 0, 0, 3, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 6, 0, 0, 1, 0]","1","0","0"
"use map in segmentstats (#87307)          segmentstats has an immutableopenmap tracking the files that exist     within an index segment. this commit converts the member to a map. it     also slightly tweaks the contract of the class so that the map is no     longer immutable. the reason for this is that the class as a whole is     used as an accumulator when building stats for a segment. while doing     so, the other members of segmentstats are modified. yet with keeping     track of files, the map is needlessly rebuilt. instead this commit     returns an immutable view for consumers, but keeps the map internally as     mutable for adding more stats. note that the class is already not thread     safe, so immutability is not needed here for that purpose.          relates #86239     ","[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 18, 5, 0, 0, 0, 0]","0","0","1"
"use map in discoverynodes (#87427)          discoverynodes uses immutableopenmap to internally keep track of various     sets of nodes with particular attributes, like master nodes and data     nodes. this commit converts these containers to map.          relates #86239","[0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 4, 1, 1, 4, 0]","1","1","1"
"skip ml tests on later glibc for incompatible bwc versions (#87476)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0]","1","1","1"
"move spatial3d dependency to spatial (#87397)          server depends on spatial3d, but it is only ever used by the spatial     xpack component. this commit moves the dependency there.          closes #87026","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"use map in indextemplatemetadata (#87473)          this commit converts indextemplatemetadata to use maps instead of     immutableopenmap internally.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 0]","1","1","1"
"use all lucene index compatible versions for bwc version generation (#87133)          the updatecibwcversions task regenerates the list of versions that are     tested in ci. this task internally calls a filter method which filters     out incompatible versions for the local system. that means it can change     depending on the type of system the task is run on. this commit adds a     new variant of the internal method to return all actual index compatible     versions, and renames the existing method to make it clear it is for     running actual tests on the local system.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add an option to _search to force synthetic source (#87068)          this adds `?force_synthetic_source` to, well, force running the fetch     phase with synthetic source. if the mapping is incompatible with     synthetic source it'll throw a 400 error.     ","[0, 0, 0, 0, 8, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 11, 0]","0","0","1"
"use map instead of immutableopenmap in clusterinfo (#87393)          the internals of clusterinfo are several maps. currently these are     immutableopenmaps. this commit converts them to map.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 64, 13, 19, 0, 124, 0]","1","1","1"
"pre-parse tsdb index settings (#87278)          the index.mode, index.time_series.start_time and     index.time_series.end_time index settings are parsed in order to     determine what write index should be selected when indexing into a tsdb     data stream.          parsing a setting has a certain overhead, which normally isn't     noticeable. however, these settings are parsed every time we need to     determine the write index for a document and then parsing these settings     has a noticeable overhead (takes around 10% in captured flame graphs).          this change pre-parses the mentioned settings and records the respected     parsed values with the indexmetadata instance.          relates to #74660","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 3, 0]","0","1","1"
"synthetic source: don't allow disabling source (#87270)          this rejects mappings that disable the `_source` but also configure it     to be `synthetic` because that sort of configuration doesn't make sense     - `synthetic` is a way to enable source at a low cost.     ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","1","1","1"
"synthetic source: paranoid test for hidden copy_to (#87432)          this adds a paranoid test to make sure that you can't hide `copy_to`     under a multi field. we don't want to support `copy_to` for synthetic     source at this point because we can't figure out which values are being     copied vs the values that come in the original source.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"handle ordering in plain highlighter for multiple inputs (#87414)          the ordering logic in the plain highlighter only worked for single-valued     inputs. if you had multiple inputs, then order-by-score would only do this     ordering for fragments within each input, and order-by-position would     interleave fragments from the different inputs. this commit fixes both     issues.          fixes #87210","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"add mapping stats for indexed dense_vectors (#86859)          add cluster mapping stats for indexed dense_vectors          currently _cluster/stats mapping section displays all mapping types     along with their count. in 8.0 we introduced indexed dense_vector     types, and we would like to collect more enhanced stats on them:     - number of indexed dense_vector fields     - sum of dims across all indexed dense_vector fields          this allows to differentiate how indexed dense_vector types are     used as opposed to unindexed dense_vector types.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"allow pipeline processor to ignore missing pipelines (#87354)          add `ignore_missing_pipeline` option to `pipeline` processor. this     controls whether the `pipeline` processor should fail with an error if     no pipeline with a name specified in the `name` option exists.          this enhancement is useful to setup a pipeline infrastructure that     lazily adds extension points for overwrites. so that for specific     cluster setups custom pre-processing can be added at a later point in     time.          relates to #87323","[0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0]","0","0","1"
"only perform ensurenoselfreferences check during ingest when needed (#87352)          the 'ensure no self reference' check during ingest only needs to be     performed when there is a chance that a map or list is added to     `ingestdocument` that references other entries in the `ingestdocument`     and when there is a risk that a circular reference is created between     entries.          today this is only possible in `scriptprocessor`, since a custom script     could do this. so doing this check if no script processor is used is a     not useful. doing this check just adds an additional tax to time spent     on ingest, that in many cases really isn't necessary.          a flag is added to `ingestdocument` that controls whether the 'ensure no     self reference' check is performed at the end when all pipelines have     been executed. the `scriptprocessor` has been modified to set this flag     and so this check will be performed if pipelines that execute have one     or more script processors.          closes #87335","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","0","0","1"
"expose segment details in pcss debug log (#87412)          elasticsearch 8.x won't start if the cluster state on disk contains 6.x     indices. we've seen a couple of cases where users shut down one or more     nodes, then delete their older indices, and then report that they cannot     upgrade the shut down nodes since those nodes (obviously) didn't hear     that the old indices were deleted. this is a pain to diagnose today.          with this commit we expose the details of the segments making up the     cluster state index in the `debug` logs so we can see their timestamps     and other metadata which is needed to diagnose this kind of situation.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"warn when stored credential hashers not compliant with fips (#87363)          warn in fips mode, if hashers for api keys or service tokens are not     compliant with fips. going for a warning log instead of validation     error for bwc.","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 9, 0]","1","0","0"
"optimize geogrid aggregations for singleton points (#87439)          use a different code path when we detect that the points on a segment     are all single valued which allow us to optimise the tight loop used     while iterating the doc values.          checks on rally shows a modest, still nice performance improvement:          ```          |                                                        metric |        task |       baseline |      contender |        diff |   unit |   diff % |     |--------------------------------------------------------------:|------------:|---------------:|---------------:|------------:|-------:|---------:|     |                                                min throughput | geotilegrid |    0.573237    |    0.600875    |     0.02764 |  ops/s |   +4.82% |     |                                               mean throughput | geotilegrid |    0.607767    |    0.630151    |     0.02238 |  ops/s |   +3.68% |     |                                             median throughput | geotilegrid |    0.612317    |    0.633243    |     0.02093 |  ops/s |   +3.42% |     |                                                max throughput | geotilegrid |    0.623922    |    0.645545    |     0.02162 |  ops/s |   +3.47% |     |                                       50th percentile latency | geotilegrid | 1539.4         | 1492.69        |   -46.7073  |     ms |   -3.03% |     |                                       90th percentile latency | geotilegrid | 1570.21        | 1514.08        |   -56.1252  |     ms |   -3.57% |     |                                      100th percentile latency | geotilegrid | 1573.78        | 1515.79        |   -57.9968  |     ms |   -3.69% |     |                                  50th percentile service time | geotilegrid | 1539.4         | 1492.69        |   -46.7073  |     ms |   -3.03% |     |                                  90th percentile service time | geotilegrid | 1570.21        | 1514.08        |   -56.1252  |     ms |   -3.57% |     |                                 100th percentile service time | geotilegrid | 1573.78        | 1515.79        |   -57.9968  |     ms |   -3.69% |     |                                                    error rate | geotilegrid |    0           |    0           |     0       |      % |    0.00% |     |                                                min throughput | geohashgrid |    2.5986      |    2.99851     |     0.39992 |  ops/s |  +15.39% |     |                                               mean throughput | geohashgrid |    2.64153     |    3.02417     |     0.38264 |  ops/s |  +14.49% |     |                                             median throughput | geohashgrid |    2.65188     |    3.02704     |     0.37516 |  ops/s |  +14.15% |     |                                                max throughput | geohashgrid |    2.66263     |    3.03953     |     0.3769  |  ops/s |  +14.16% |     |                                       50th percentile latency | geohashgrid |  371.621       |  328.431       |   -43.19    |     ms |  -11.62% |     |                                       90th percentile latency | geohashgrid |  373.7         |  331.22        |   -42.4795  |     ms |  -11.37% |     |                                      100th percentile latency | geohashgrid |  374.082       |  332.37        |   -41.712   |     ms |  -11.15% |     |                                  50th percentile service time | geohashgrid |  371.621       |  328.431       |   -43.19    |     ms |  -11.62% |     |                                  90th percentile service time | geohashgrid |  373.7         |  331.22        |   -42.4795  |     ms |  -11.37% |     |                                 100th percentile service time | geohashgrid |  374.082       |  332.37        |   -41.712   |     ms |  -11.15% |     |                                                    error rate | geohashgrid |    0           |    0           |     0       |      % |    0.00% |     |                                                min throughput |  geohexgrid |    0.125189    |    0.132832    |     0.00764 |  ops/s |   +6.11% |     |                                               mean throughput |  geohexgrid |    0.127163    |    0.133508    |     0.00634 |  ops/s |   +4.99% |     |                                             median throughput |  geohexgrid |    0.126976    |    0.133546    |     0.00657 |  ops/s |   +5.17% |     |                                                max throughput |  geohexgrid |    0.131959    |    0.134025    |     0.00207 |  ops/s |   +1.57% |     |                                       50th percentile latency |  geohexgrid | 7802.83        | 7426.77        |  -376.056   |     ms |   -4.82% |     |                                       90th percentile latency |  geohexgrid | 8501.63        | 7552.32        |  -949.308   |     ms |  -11.17% |     |                                      100th percentile latency |  geohexgrid | 9058.2         | 7726.13        | -1332.07    |     ms |  -14.71% |     |                                  50th percentile service time |  geohexgrid | 7802.83        | 7426.77        |  -376.056   |     ms |   -4.82% |     |                                  90th percentile service time |  geohexgrid | 8501.63        | 7552.32        |  -949.308   |     ms |  -11.17% |     |                                 100th percentile service time |  geohexgrid | 9058.2         | 7726.13        | -1332.07    |     ms |  -14.71% |     |                                                    error rate |  geohexgrid |    0           |    0           |     0       |      % |    0.00% |     ```          retry #87290 after being reverted by mistake.","[0, 0, 0, 2, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 8, 0, 0, 28, 11, 0, 0, 10, 0]","1","1","1"
"security plugin close realms (#87429)          the `closeable#close` method on `realm`s was never called upon node     shutdown. this is a problem when realms (eg oidc) create non-daemon     threads that expect to be stopped when the `close` method is invoked.     specifically, it is a problem on windows where the graceful shutdown is     implemented by terminatting all non-daemon threads (see `bootstrap#stop`     and `bootstrap#initializenatives`).          closes https://github.com/elastic/elasticsearch/issues/86286","[0, 0, 0, 3, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"revert `optimize geogrid aggregations for singleton points (#87290)`          this reverts commit 30406baabfbafad6603e68177b7500f551715738.     ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 19, 0, 0, 0, 0, 8, 0, 0, 11, 28, 0, 0, 10, 0]","0","0","1"
"optimize geogrid aggregations for singleton points (#87290)          use a different code path when we detect that the points on a segment     are all single valued which allow us to optimise the tight loop used     while iterating the doc values.          checks on rally shows a modest, still nice performance improvement:          ```          |                                                        metric |        task |       baseline |      contender |        diff |   unit |   diff % |     |--------------------------------------------------------------:|------------:|---------------:|---------------:|------------:|-------:|---------:|     |                                                min throughput | geotilegrid |    0.573237    |    0.600875    |     0.02764 |  ops/s |   +4.82% |     |                                               mean throughput | geotilegrid |    0.607767    |    0.630151    |     0.02238 |  ops/s |   +3.68% |     |                                             median throughput | geotilegrid |    0.612317    |    0.633243    |     0.02093 |  ops/s |   +3.42% |     |                                                max throughput | geotilegrid |    0.623922    |    0.645545    |     0.02162 |  ops/s |   +3.47% |     |                                       50th percentile latency | geotilegrid | 1539.4         | 1492.69        |   -46.7073  |     ms |   -3.03% |     |                                       90th percentile latency | geotilegrid | 1570.21        | 1514.08        |   -56.1252  |     ms |   -3.57% |     |                                      100th percentile latency | geotilegrid | 1573.78        | 1515.79        |   -57.9968  |     ms |   -3.69% |     |                                  50th percentile service time | geotilegrid | 1539.4         | 1492.69        |   -46.7073  |     ms |   -3.03% |     |                                  90th percentile service time | geotilegrid | 1570.21        | 1514.08        |   -56.1252  |     ms |   -3.57% |     |                                 100th percentile service time | geotilegrid | 1573.78        | 1515.79        |   -57.9968  |     ms |   -3.69% |     |                                                    error rate | geotilegrid |    0           |    0           |     0       |      % |    0.00% |     |                                                min throughput | geohashgrid |    2.5986      |    2.99851     |     0.39992 |  ops/s |  +15.39% |     |                                               mean throughput | geohashgrid |    2.64153     |    3.02417     |     0.38264 |  ops/s |  +14.49% |     |                                             median throughput | geohashgrid |    2.65188     |    3.02704     |     0.37516 |  ops/s |  +14.15% |     |                                                max throughput | geohashgrid |    2.66263     |    3.03953     |     0.3769  |  ops/s |  +14.16% |     |                                       50th percentile latency | geohashgrid |  371.621       |  328.431       |   -43.19    |     ms |  -11.62% |     |                                       90th percentile latency | geohashgrid |  373.7         |  331.22        |   -42.4795  |     ms |  -11.37% |     |                                      100th percentile latency | geohashgrid |  374.082       |  332.37        |   -41.712   |     ms |  -11.15% |     |                                  50th percentile service time | geohashgrid |  371.621       |  328.431       |   -43.19    |     ms |  -11.62% |     |                                  90th percentile service time | geohashgrid |  373.7         |  331.22        |   -42.4795  |     ms |  -11.37% |     |                                 100th percentile service time | geohashgrid |  374.082       |  332.37        |   -41.712   |     ms |  -11.15% |     |                                                    error rate | geohashgrid |    0           |    0           |     0       |      % |    0.00% |     |                                                min throughput |  geohexgrid |    0.125189    |    0.132832    |     0.00764 |  ops/s |   +6.11% |     |                                               mean throughput |  geohexgrid |    0.127163    |    0.133508    |     0.00634 |  ops/s |   +4.99% |     |                                             median throughput |  geohexgrid |    0.126976    |    0.133546    |     0.00657 |  ops/s |   +5.17% |     |                                                max throughput |  geohexgrid |    0.131959    |    0.134025    |     0.00207 |  ops/s |   +1.57% |     |                                       50th percentile latency |  geohexgrid | 7802.83        | 7426.77        |  -376.056   |     ms |   -4.82% |     |                                       90th percentile latency |  geohexgrid | 8501.63        | 7552.32        |  -949.308   |     ms |  -11.17% |     |                                      100th percentile latency |  geohexgrid | 9058.2         | 7726.13        | -1332.07    |     ms |  -14.71% |     |                                  50th percentile service time |  geohexgrid | 7802.83        | 7426.77        |  -376.056   |     ms |   -4.82% |     |                                  90th percentile service time |  geohexgrid | 8501.63        | 7552.32        |  -949.308   |     ms |  -11.17% |     |                                 100th percentile service time |  geohexgrid | 9058.2         | 7726.13        | -1332.07    |     ms |  -14.71% |     |                                                    error rate |  geohexgrid |    0           |    0           |     0       |      % |    0.00% |     ```","[0, 0, 0, 2, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 8, 0, 0, 28, 11, 0, 0, 10, 0]","1","1","1"
"script: add updatebyquery and reindex contexts (#87431)          * script: add updatebyquery and reindex contexts          add two new scripting contexts, updatebyquery and reindex, in addition     to the update context.  these three contexts have different sets of     metadata and so their metadata classes will be different.  this split     prepares for the addition of their own metadata classes.          refs: #86472","[0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 9, 2, 12, 0, 0]","0","0","1"
"add support for building elasticsearch source on macos before monterey (#87430)          closes #87426","[0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]","0","0","1"
"master stability health indicator part 1 (when a master has been seen recently) (#86524)          this is the first pr for the master stability check, which is part of the health api. it handles the case     when we have seen a master node recently. the more complicated case when we have not seen a     master node recently will be in subsequent prs.","[0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]","0","0","1"
"force property expansion for security policy (#87396)          when resolving the security policy files for server and components of     elasticsearch, each jar file location is put into a special system     property value so that policy files may contain codebase specific     grants. the mechanism for substituting system properties is part of the     jdk's policy parser. however, a security property exists,     policy.expandproperties, which controls whether properties will actually     be expanded. if a user ends up setting this, elasticsearch will fail to     start.          this commit forces the value of the security property to ensure the     policy files can always be parsed correctly.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]","1","1","1"
"[ml] adjust change_point to not throw with too few buckets (#87297)          it can be frustrating for agg consumers to handle failure modes when we should just indicate that there were too few buckets to calculate the change.          other aggs simply return nan or empty results when too few docs are calculated. we should follow suit for continuity of experience.","[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"simplify master task failure handling (#86970)          today a batching executor must submit an `actionlistener<clusterstate>`     for every task in the batch that succeeds. this listener allows to     consume the published cluster state, or any failure that occurs during the     publication following the successful task execution.          there's no real reason for an executor to customise the failure handling     here, and in practice these listeners always defer failures to the     task's `onfailure()` method. this commit removes the ability for     executors to handle failures differently here by replacing the     `actionlistener<clusterstate>` with a simple `consumer<clusterstate>`.          moreover we consider it an antipattern to actually consume the published     `clusterstate`, so this commit introduces variants that ignore the     `clusterstate` and accept a `runnable` instead.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 21, 0]","1","1","1"
"app permissions with action patterns do not retrieve privileges (#85455)          in order for file realm users, with application privileges, to continue     to work (authenticate) when the `.security` index is unavailable,     security must avoid loading the application privileges from the     .security index (which is unavailable, hence error out). roles (defined     inside the `roles.yml` file, not in the index) that must work when the     `.security` index is unavailable must use inlined action patterns for     application permisions, rather than privilege names.          related https://github.com/elastic/elasticsearch/issues/85312","[0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 1, 1, 0]","1","1","1"
"remove unused import from numberfieldmapper          fixes checkstyle error of #85688     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"user profile - move profilehasprivileges api behind the feature flag (#87385)          the api should be behind feature flag for the 8.3 release.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","1","1","1"
"speed up numberfieldmapper (#85688)          no need to create an intermediary list here. creating it and adding it     to the document tended to take more time than the parsing of the number itself.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 12, 0, 0, 11, 0]","0","0","1"
"convert o.e.cluster to use map in public methods (#87168)          many classes that use immutableopenmap expose the maps directly, when     the consumers actually only use methods from the base map interface.     this commit converts public methods in subpackages of o.e.cluster to     return map instead of immutableopenmap. note that o.e.cluster classes     are not yet converted because they require more involved changes.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 15, 0]","1","1","1"
"remove immutableopenmap test utils (#87305)          these utilities were the equivalent hamcrest matchers to those for map,     but are now unused.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"tsdb: fix rollupactionsinglenodetests failing with indexnotfoundexception (#87333)          looks like the failure reported at #69799 (comment) happens because of     randomly generated index names conflict between two tests.          add more random numbers to test names, so that the probability of conflicts is negligible     generate source and rollup index names more carefully so that they are logged properly.     cleanup test code          fixes #69799     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"implement write throttling in netty4httppipelininghandler (#86922)          a step towards chunked rest encoding that only serializes chunks that     can be written right away and an optimization in isolation. a follow-up to this change will be able to use the flush + writability hooks introduced here to do serialization lazily and in chunks. this change was extracted into its own pr because it is somewhat complex for one but also because it provides performance benefits in isolation.          introduces the concept of queuing writes in the handler once a channel becomes unwritable     to the `netty4httppipelininghandler`. doing this reduces the memory consumption of compressed     responses as well as their first byte latency by only compressing chunks of a message     that can be written to the channel directly. prior to this change, all chunks would be compressed     first before any writes to the channel, wasting buffers that can't be written yet as well as     making the write to the channel wait until compression completed.     a further advantage of this change is that a large rest response will not block the transport thread     for a long compression operation any longer as it does today.          the implementation of writability and flush hooks in `netty4httppipelininghandler` has been intentionally coded in a similar fashion to that in `netty4writethrottlinghandler` (albeit it is much simpler because we do not chunk individual messages on the byte level in it) to allow for some drying up of the logic in a follow-up.     ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0]","1","1","1"
"relax geo_grid query test for max geo_tile zoom (#87357)          this commit removes testing geo_grid queries on the maximum geo_tile zoom","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"tests ignore longitude=180 when index legacy point (#87364)          * tests ignore longitude=180 when index legacy point          it turns out that legacygeoshape has an issue indexing points with     longitude=180, but since this is legacy, rather than fix that,     we just skip it from tests.          see https://github.com/elastic/elasticsearch/issues/86118     ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"allow start cluster with unreachable remote clusters (#87298)          if the local cluster has a remote_cluster setting defined in yaml file     and the remote cluster is not reachable, then the local cluster won't     start. this pr relaxes that constraint as it's too restricted and     requires manual intervene.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0]","0","1","0"
"faster numberfieldmapper.value (#87351)          calling `currenttoken` isn't as cheap as a getter call since it hits a huge switch statement     and doesn't inline well. even more so when a delegating x-content parser is called which has     a bunch of additional overhead -> saving the expensive call here to save a couple of % of runtime     for number field mappers.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","0","0","1"
"fix resolution of wildcard application privileges (#87293)          previously, a role with application privileges of          {     `application`: `*`,     `privileges`: [`*`]     `resources`: [`*`]     }          would be resolved to mean every _defined_ privilege in every _defined_     application (subject to condition 1 described below).          this implementation was based on the assumption that every action that     would ever be checked by _has_privileges would be explicitly defined     as an application privilege (via put /_security/privilege)          that assumption would have been fine if not for 2 discrepancies          1. the resolved privileges were then filtered by privilege name and     wildcards were not respected. so the role shown above would     actually filter down to nothing. however if the user had another     role with named privileges (not wildcards) then the filtering would     include that privilege _if it was defined_.          2. the logic to construct a runtime applicationprivilege from the     resolved applicationprivilegedescriptor instances had special case     logic to handle 0 matching descriptors. this was needed so that     superuser always had every privilege, even if the descriptors had     not yet been defined, or where unavailable for some reason. however     because this logic only applied if there were no matching     descriptors the behaviour was inconsistent. for the most part it     would look like wildcard application privileges functioned     correctly even when no application privileges were defined, but     this behaviour could not be relied on if the user had additional     roles that references defined application privileges (per point 1).          this change solves point 2, by always including the wildcard     permission even if there are matching descriptors. it does nothing to     solve point 1, and it is likely that we need additional commits to     cleanup the logic there.     ","[0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 3, 3, 0]","1","0","0"
"mute tokenauthintegtests#testrefreshingmultipletimeswithinwindowsucceeds (#87353)          relates #85697","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"cancellable profile has privilege check  (#87224)          the `profile has privileges` endpoint is designed to check the     privileges of many users, given their profile ids, in a single call.     this commit runs the privileges check under a `cancellable` task. when     the task is cancelled, the check is interrupted for the remaining     profiles to-be-checked. the task can also be cancelled when the http     client disconnected.","[0, 0, 0, 2, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 6, 0, 0, 9, 0]","1","1","1"
"fix enrich*it test failures (#87317)          fix enrichit, enrichsecurityit and enrichadvancedsecurityit test failures     caused by a warning being emitted during auto creation of 'my-index' index.     the warning has nothing to do with the index being created, but the monitor     index being created at the same time (in same cluster state update) triggers     a warning and that leaks to the index response in this test, which causes     test failures.          closes #83366     relates to #85506","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"[test] verify that nested type is not supported when subobjects is false  (#87218)          we have tests that verify that objects can't be created in the mapping under an object that has subobjects set to false. the existing checks work also for the nested type, as nestedobjectmapper extends objectmapper, yet this commit adds specific tests for this scenario.          this helps clarify that we were checking this twice, once at parse time and once in buildmappers. the latter check should not be needed, hence the check at parse time is broadened to cover for the nested type while the second check in buildmappers throws now illegalstateexception when not satisfied.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"user profile - audit support for security domain (#87097)          security domain allows sharing resources across different realms which     means it is now part of the authorization process. hence we should     capture it in relevant audit entries for completeness.          in theory, the domain name should be captured in all the places realm     name is captured. however, it is not necessary in practice because:          1. the field `realm` in authentication_success event is for bwc purpose.     hence we don't need pair it with domain.     2. api keys cannot be under any domain.     3. no need to audit domain for authentication_failed events because no     authorization is possible in these cases.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"disallow three-digit minor and revision versions (#87338)          this came up because a yml test erroneously had 8.2.999 as a skip version, however, when the yml     test parser calls version.fromstring(`8.2.999`) the version 8.11.99 is what is actually     parsed out. this commit makes the minor and revision numbers have a limit of two digits, to match     our existing version conceptions. there is no limit on the number of major version digits.          hopefully we don't need more than 100 minor versions within a single major (yet), or more than 100     patch releases.     ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0]","1","1","1"
"remove immutableopenmap from most xpack tests (#87334)          many tests in xpack create immutableopenmap for building mock cluster     states. however, since most of the api signatures for the cluster state     have changed to be map, it is no longer necessary to build     immutableopenmap. this commit converts most tests in xpack to build maps     for their mock cluster states.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 14, 1, 0, 87, 0]","1","1","1"
"skip ensurenoselfreferences check in ingestservice (#87337)          a self reference check is performed by the xcontentbuilder when the     document map is serialized using the `indexrequest.source(...)` call.     this means we can remove the call to     `collectionutils.ensurenoselfreferences` above and only do the check     once instead of twice.          relates to #85926 and (subsequent work in) #87335","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"using the correct connection to fetch remote master history (#87299)          previously masterhistoryservice was using openconnection to open a connection to the master in order to fetch the remote master history. however it was not passing that connection to sendrequest so we might have been using another one. this change uses connecttonode instead.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"added migration/index.asciidoc generation support (#87318)          including extracting static content from migration/index, so the template would be as light as possible.          the reason for this work is because the gradle task `generatereleasenotes` was not correctly adding new links and imports to the migrations/index and that caused documentation to fail building for 8.3.0.     ","[0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0]","0","0","1"
"port buildpluginit to spock (#87104)          we port all our tests for gradle build logic to use spock          part of #86720","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 0]","1","1","1"
"small speedup in fieldmapper.builder.parse (#87209)          creating the params map is quite hot in benchmarks.     presizing it correctly helps a little. also replaced a needless series     of conditionals with a switch to make the massive loop a little cheaper.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fields api to allow fetching values when _source is disabled (#87267)          back when we introduced the fields parameter to the search api, it could only fetch values from _source, hence     the corresponding sub-fetch phase fails early whenever _source is disabled. today though runtime fields can     be retrieved from a separate value fetcher that reads from fielddata, and metadata fields can be retrieved     from stored fields. these two scenarios currently throw an unnecessary error whenever _source is disabled.          this commit removes the check for disabled _source, so that runtime fields and metadata fields can be retrieved even when _source is disabled. fields that need to be loaded from _source are simply skipped whenever _source is disabled, similar to when a field is not found in _source.          closes #87072","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 4, 0]","1","1","1"
"mute restclientmultiplehostsintegtests#testnonretryableexception (#87316)          relates #87314","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"modularize deprecation component (#87287)          this is a change to modularize deprecation component by adding module-info.java     relates #78744","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"use map in indices responses (#87292)          this commit converts getaliasesresponse and getsettingsresponse to use     map instead of immutableopenmap.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0]","1","1","1"
"move declarative plugin sync to server cli (#87273)          when running in docker, the elasticsearch-plugins.yml allows configuring     plugins that should be installed in the system. upon elasticsearch     starting up, plugins are installed/removed to match the configured     plugins. however, this happens late in startup, and it would be nice to     keep the main elasticsearch process from ever writing outside the     configured data directories. now that the server cli has been moved to     java, this is possible.          this commit moves invocation of the plugins sync command into the server     cli. note that the sync plugins action should probably be reworked as it     can be implement command directly now. however, this commit tries to be     the minimal change possible to remove plugin cli knowledge from server.","[0, 0, 0, 2, 2, 2, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 6, 2, 3, 0]","0","1","1"
"convert cluster state `customs` to map (#87265)          the pluggable portions of in memory cluster state are held within an     immutableopenmap. this commit converts that to a map. note that the diff     format is the same for immutableopenmap and jdk map, so no bwc logic is     necessary.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"remove some blocking in ccrrepository (#87235)          today `ccrrepository#getrepositorydata` blocks the calling thread     pending receipt of the full metadata of the remote cluster. it would be     preferable if it didn't get the full cluster metadata at all, but we can     at least remove the blocking wait here.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 2, 2, 0]","0","0","1"
"fix geotile aggregations on geo_shapes for precision 0   (#87202)          changes the way we handle geo_shapes at precision 0 by using always brute force scan.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0]","1","0","0"
"fork after calling getrepositorydata from storerecovery (#87264)          `repository#getrepositorydata` will occasionally complete its listener     on a blocking-free thread (a transport worker or the cluster applier     thread) so it's not valid to call `repository#restoreshard` directly.     this commit fixes this by using a forking listener.          closes #87237","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"log warning when cache hasher not compliant with fips (#86740)          currently, it's possible to choose a hash function for various cache     hashers (e.g., in apikeyservice) that is not compliant with fips 140     (e.g., md5). this pr logs a warning on node start if a non-compliant     hashing algorithm is used in fips mode.          note that there are other usages of non-fips compliant hash functions,     which are not configured through settings (e.g.     fingerprintprocessor). i plan to address these in a separate pr.          relates #68743","[0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0]","0","0","1"
"revert `fork after calling getrepositorydata from storerecovery (#87254)`          this reverts commit 1c48b04b252639e8296eaecda4e9e778a56633cd.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"fork after calling getrepositorydata from storerecovery (#87254)          `repository#getrepositorydata` will occasionally complete its listener     on a blocking-free thread (a transport worker or the cluster applier     thread) so it's not valid to call `repository#restoreshard` directly.     this commit fixes this by using a forking listener.          closes #87237","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"do not retry client requests when failing with contenttoolargeexception (#87248)          ","[0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 1, 0]","1","0","0"
"fix range aggregator test (#87253)          the test for range aggregator expected the index it was testing not to     be force-merged to a single segment. but it's a lucene test case so all     kinds of weird things can happen - about 3.4% of the time the index was     indeed one segment. this fixes the assumption.          closes #87205","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"replace log4j-1.2 with log4j2 api (#87225)          some of the logging usages are incorrectly using log4j v 1.2     instead of log4j2-api.     this commit fixes this.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"fix date_histogram test (#87250)          the test for date_histogram expected the index it was testing not to be     force-merged to a single segment. but it's a lucene test case so all     kinds of weird things can happen - about 3.4% of the time the index was     indeed one segment. this fixes the assumption.          closes #87203","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"assert that some getters are not accessed for unmanaged indices (#87059)          * assert that some getters are not accessed for unmanaged indices          there are many properties in systemindexdescriptor that should only be     accessed when dealing with managed system indices. any code that accesses     the getters for these properties should be inside of a block that checks     whether an index is managed or not. here, we add assertions to verify     that this is the case, or to point us to places where our code may be     buggy.","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 0, 5, 5, 0]","0","0","1"
"delete index commits last in combineddeletionpolicy (#87221)          if we hit an ioexception while reading the doc count of the safe commit     (i.e., calling getdoccountofcommit), then indexfiledeleter will expose     deleted index commits. this change re-arranges the oncommit method to     ensure that deleting index commits is the last thing in the method.          closes #87204","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 3, 2, 5, 0]","0","1","1"
"hide system indices and their aliases in upgraded clusters (#87125)          * hide system indices in upgraded clusters          we have code that is supposed to make sure existing system indices are     made into hidden indices if they are visible, and to hide aliases for     system indices. however, that code was in a clusterstateupdatetask, and that     task was only submitted in the case when we needed to toggle an index's     `system` setting from true to false or false to true.          here, we update the checks so that the task is submitted in the cases     where an index is correctly marked as a system index, but is not itself     hidden or has aliases that are not hidden. we also add test coverage for     the method that checks whether system index metadata should be updated.          * update docs/changelog/87125.yaml          * unit test interaction of boolean checks","[0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 0, 0, 6, 0]","0","0","1"
"add javadoc for basic system indices classes (#87184)          add javadoc describing the expected behavior of the systemindices class,     the descriptor classes, and the systemindexplugin interface.          co-authored-by: elastic machine <elasticmachine@users.noreply.github.com>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"revert `remove some blocking in ccrrepository (#87016)`          this reverts commit 9c9bc8797b34994d0a1117debd2e8058658b407d.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 2, 2, 0]","0","0","1"
"remove some blocking in ccrrepository (#87016)          today `ccrrepository#getrepositorydata` blocks the calling thread     pending receipt of the full metadata of the remote cluster. it would be     preferable if it didn't get the full cluster metadata at all, but we can     at least remove the blocking wait here.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0, 2, 2, 0]","0","0","1"
"refactor parameterizedmessage used in lambda and casted to supplier (#87156)          this is a result of structural search/replace in intellij. this only affects log methods with a signature     logger.info((supplier) ()-> parametrizedmessage) logger.info((supplier) ()-> parametrizedmessage, throwable)          relates #86549","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]","1","1","1"
"support exists query for api key query (#87229)          exists query is useful for testing whether expiration date is configured     for an api key or whether a metadata field exists. this pr adds support     for it.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[test] random domain names are now unique (#87227)          duplicate domain names can cause settings builder to override each other     but in a not complete way. this leads to partially configured settings     which in turn leads to assertion failure.          this pr fixes it by ensure unique domain names in test. this is     reasonable because settings deduplication in production is done before     they reach to the realms code.          resolves: #87226","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"fix status code when open point in time without keep_alive (#87011)          closes #87003","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]","1","0","0"
"[test] rename dynamictemplatetests to dynamictemplateparsetests (#87217)          we have had since today dynamictemplatetests as well as dynamictemplatestests. when adding a new test for dynamic templates, naming does not help understanding what the right place is. this commit addressed this by renaming dynamictemplatetests to dynamictemplateparsetests as it holds only tests around the static parse method that parse a dynamic template into its corresponding object.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[test] expand tests for subobjects false (#87216)          this commit adds more tests that cover edge cases around setting subobjects to false for a given object. the new tests focus on dynamic mapping behaviour, for instance when dynamic is set to false on the parent mapper, or the mapping for the object itself comes from a dynamic template. also, a new test is added to cover geo_point parsing, meaning to verify that objects are accepted in a document when for fields that are mapped (either in the mapping or through dynamic template) and support parsing objects natively.","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"clean up deflatecompressor after exception (#87163)          we must reset the thread-local buffer in `deflatecompressor` whether the     compression succeeds or fails.          closes #87160","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 7, 0, 0]","1","1","0"
"modularize the ingest.common component (as well as dissect and grok dependent libs) (#87219)          this is change modularizes the ingest.common component,     by adding a module-info.java. as well as two dependent libs.          the project only requires painless spi to compile, so that was     fixed along the way ( so that the compile module path can be     inferred directly from the dependencies ).","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"tolerate graalvm compiler threads in testthreadnames (#87105)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"adjust assertion for responses without successful shards (#87195)          closes #85760","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"mute rangeaggregatortests.testruntimefieldrangesnotoptimized (#87206)          relates #87205","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"catch an exception due to incorrect pattern in strings.format (#87132)          strings.format method, which is used heavily in logging with     supplier should handle exceptions when a format is incorrect.     this will prevent a hard to catch mistakes to blow up in server.     those mistakes are especially hard to detect in logging when a     code to create a message might be only executed when logger is debug     or trace. which is not always the case in ci.          relates #87077 (comment)          relates #86549","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0]","1","1","1"
"visit point values once (#85499)          closes #85484 closes #86723","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"minor rangeagg optimization (#86935)          * minor rangeagg optimization          shortcut for when we have single values in a range aggregation. this also     targets date histogram aggregations which often are converted to range     aggregations. add profiling counts for the singleton and non-singleton     code paths.          closes #84262     ","[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 4, 0]","0","0","1"
"bump versions for 8.2.2 release     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"fix nullpointerexception in creating the parent pid directory (#87008)          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","0","0"
"[ml] split node load counts by job type (#87172)          this refactoring is in preparation to remove native inference jobs     from the jobs that account towards the max open jobs limit.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 21, 0]","0","0","1"
"modularize the data-streams component (#87157)          this is change modularizes data-streams, by adding a module-info.java","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"temporarily provide systempropertiespropertysource (#87149)          temporarily provide systempropertiespropertysource to workaround a bug in log4j where it does not declare the provider implementations in its module-info.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","0"
"implement support for partial search results in sql cli (#86982)          add support for          allow_partial_search_results = true/false          command in sql cli.          if true, returns partial results if there are shard request timeouts or shard failures.     if false, returns an error with no partial results.","[0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 3, 0]","0","0","1"
"add resolve index api to the `read` permission for an index (#87052)          this commit allows the index `read` permission to also allow using the     resolve index action.          resolves #86977","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"make pidfile deletion more resilient (#87134)          deleting the pidfile when elasticsearch is shutting down was moved in #86934.     however, the delete sm permission is still needed, since sm is installed     by the time we shutdown. this commit adds back to the pidfile delete     permission, and also rethrows any io exception so it can be logged by     our uncaught exception handler.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 10, 0]","0","0","1"
"fixing testcomplicatedbucketpath for avg bucket agg (#87161)          the test was erroneously creating a test lucene index reader directly. this means that sometimes the reader was wrapped as a parallel (threaded) reader which we don't support yet.          this commit cleans up the test and uses aggregatortestcase#newindexsearcher directly.          closes #87155","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 0, 0, 2, 0]","1","0","0"
"make keywordfieldmapper more compact (#87147)          removing some redundant fields to make these objects smaller.     this change saves almost 200m on heap per data node in the many-shards     benchmark by saving an estimated 14b-16b (didn't do the alignment math)     per instance.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"replace new parametrizedmessage() with java.util.supplier<string>  (#87077)          this is a result of structural search/replace in intellij. this only affects log methods with a signature     logger.info(parametrizedmessage)     logger.info(parametrizedmessage, throwable)          relates https://github.com/elastic/elasticsearch/issues/86549","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 9, 4, 0, 0, 165, 0]","1","1","1"
"update bucket metric pipeline agg paths to allow intermediate single bucket and bucket qualified multi-bucket aggs (#85729)          bucket metric pipeline aggregation paths currently always expect the sibling aggregation to be a multi-bucket agg.          this honestly doesn't have to be the case for bucket metric pipeline aggs to work.          consider the following path:          ```     filter_agg>filters_agg['bucket_foo']>histo>some_metric_agg     ```          since `filter_agg>filters_agg['bucket_foo']` are well defined and are not crossing bucket threasholds, metrics should still be able to be calculated against the bucket values for `histo`          this commit allows any combination of single bucket aggs (e.g. filter) and bucket specific multi-bucket aggs before reaching the desired multi-bucket used for the metric calculation.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 12, 0]","1","1","1"
"hide immutableopenmap in metadata public methods (#87124)          this commit converts the remaining methods in metadata that return an     immutableopenmap to return map, thus hiding the fact that metadata uses     immutableopenmap internally.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 7, 0]","1","1","1"
"[refactor] remove nearly-redundant method from systemindices (#87093)          the getproductsystemindexmetadatapredicate was only used once, and could be     replaced by the very similar method getproductsystemindexnamepredicate. this     not only simplifies the public api, but removes the cognitive load of     understanding how the two methods differed.          co-authored-by: elastic machine <elasticmachine@users.noreply.github.com>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","1","1","1"
"[ml] expand allowed ner labels to be any i-o-b tagged labels (#87091)          named entity recognition (ner) is a special form of token classification. the specific kind of labelling we support is inside-outside-beginning (iob) tagging. these labels indicate if they are the inside of a token (with a `i-` or `i_`), the beginning (`b-` or `b_`) or outside (`o`).          each valid token classification label starts with the require prefix or `o`.          before this commit, we restricted the labels to a specific set:          ```     o(entity.none),      // outside a named entity     b_misc(entity.misc), // beginning of a miscellaneous entity right after another miscellaneous entity     i_misc(entity.misc), // miscellaneous entity     b_per(entity.per),   // beginning of a person's name right after another person's name     i_per(entity.per),   // person's name     b_org(entity.org),   // beginning of an organization right after another organization     i_org(entity.org),   // organisation     b_loc(entity.loc),   // beginning of a location right after another location     i_loc(entity.loc);   // location     ```          but now, any entity is allowed, as long as the naming of the labels adhere to iob tagging rules.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 10, 0, 10, 55, 0]","1","0","0"
"remove leftover debugging statement on error (#87128)          a debugging statement was left being printed when es exits with a     non-zero status. this commit removes the debug statement.          relates #85758","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]","1","0","1"
"bump version to 8.4.0     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"tsdb: implement downsampling on time-series indices (#85708)          this pr implements downsampling operation on time series indices.          the pr creates a _rollup endpoint that allows users to downsample an index and can be     accessed by the following call:          post /<source_index>/_rollup/<rollup_index>     {     `fixed_interval`: `1d`     }          requirements          an index can be downsampled if all of the following requirements are met:          must be a time series index (have the index.mode: time_series index setting)     must not be writeable (have the index.blocks.write: true index setting)     must have dimension fields marked with mapping parameter time_series_dimension: true     must have metric fields marked with mapping parameter time_series_metric          relates to #74660          fixes #65769     fixes #69799     finally, this pr is based on the code written for #64900     ","[0, 0, 0, 1, 18, 13, 1, 0, 0, 0, 2, 4, 10, 0, 0, 9, 0, 0, 1, 2, 0, 2, 1, 9, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 14, 4, 0, 0, 0, 0, 0, 0, 39, 52, 2, 1, 16, 0]","1","0","0"
"increase force_merge threadpool size (#87082)          changes the default size used for the force_merge threadpool to 1/8 of     the allocated processors, with a minimum value of 1.          closes #84943","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"extract transport cluster settings/ilm execute logic (#86941)          extract execute logic from the transport actions for cluster     update settings and ilm put/delete to support future reuse for     operator file based updates.          relates to #86224","[0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 1, 0]","1","1","1"
"handle unexpected exit code from server process (#87098)          when running elasticsearch in the foreground, the cli process waits     indefinitely on the server. if the server dies unexpectedly, the     serverprocess throws an exception. however, the exit code is hidden in     the exception message. this commit changes waitfor to return the exit     code, so it can be propagated to the cli main. note that when stopping     in a shutdown hook the exit code must be ignored because calling     system.exit from a shutdownhook results in a deadlock.","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 7, 0, 0, 0, 0]","1","1","1"
"read official plugins list non-statically (#87096)          new plugin telemetry keeps track of whether a plugin is in the list of     official plugins. this requires reading the plugins list resource file.     reading that statically depends on the jar being built, but that is not     available during tests. it's also not necessary to keep this list in     memory for the lifetime of the node. this commit moves reading the file     to occur only when constructing the plugin runtime info.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"add unstable plugin api telemetry (#87061)          this commit adds some new information to the node info and cluster stats responses regarding plugins. for each plugin returned, in addition to the plugin descriptor, a boolean indicating whether the plugin is an official plugin, as well as info on the particular interfaces and methods that the plugin implements are returned. this will allow measuring the effectiveness over time of the stable plugin api.          co-authored-by: chrishegarty <christopher.hegarty@elastic.co>","[0, 0, 0, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 20, 10, 0, 1, 12, 0]","0","0","1"
"fix snapshotlifecyclerestit teststartstopstatus failing (#87088)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"timing out stale remote master history (#86936)          this change makes it so that the remote master history that has been fetched will time out after 5 minutes (by     default). the masterhistoryservice will return its value as null if it is older than the configured timeout. this way     masterhistoryservice clients don't report status based on out of date information.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 2, 0]","1","1","1"
"upgrading to tika 2.4 (#86015)          tika 1.x is end of life as of later this year. this change updates the     attachmentprocessor to use tika 2. the goal was to keep the     functionality as close as possible, just with upgraded tika. the tests     have been slightly modified because of a small change in tika     functionality -- as of 2.4.0 it now adds an extra newline to the output     for every embedded attachment in a document. also as part of this i have     broken apart the tika-parsers into individual dependencies. the reason     is that we are considering breaking this plugin apart, and want to know     exactly which parsers we pull in.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]","0","0","1"
"health api copy editing (#87010)          edits to human readable text returned from the health api. a number of edits have been added for     readability and correctness.","[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0]","0","0","1"
"make sure to rewrite explain query on coordinator (#87013)          some queries (like terms lookup queries) need to be rewritten on the     coordinator node, usually to fetch some resource. the explain action was     missing this rewrite step, which caused failures later when trying to execute     the query.          closes #64281.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0]","1","1","1"
"fix datastreamsecurityit#testremoveghostreference() test (#87087)          if the modify data stream api can find the indexmetadata of an index it     tries to remove from a data stream then it can unhide the index as well,     otherwise it can't.          this determines whether the expected index stats is either 1 or 2 in the     last get indices stats call.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"return a default user action if no actions could be determined (#87079)          if a shard is unassigned for a reason other than no_valid_shard_copy or the deciders returning     a no response, then no user actions are returned. if the deciders return no, but we cannot determine     a root cause in the indicator we return a default user action. if we could not generate any user actions     for a shard being unassigned, we should always add one.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"allow the modify data stream api to remove broken reference to a backing index (#87030)          this adds a `force_remove_backing_index` action to the modify data     stream api to allow removing broken reference to backing indices from a     data stream.          ```     post _data_stream/_modify     {     `actions`: [     {     `force_remove_backing_index`: {     `data_stream`: `my-logs`,     `index`: `.ds-my-logs-2099.01.01-000001`     }     }     ]     }     ```","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 2, 5, 0]","0","0","1"
"bump versions for 8.1.2 release     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"improve `has privilege` performance for boolean-only response (#86685)          boolean-only privilege checks, i.e. the ones currently used in the     `profile has privilege` api, now benefit from a performance improvement,     because the check will now stop upon first encountering a privilege that     is not granted over a resource (and return `false` overall). previously,     all the privileges were always checked over all the resources in order     to assemble a comprehensive response with all the privileges that are     not granted.","[0, 0, 0, 0, 3, 1, 1, 16, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 5, 0, 1, 2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 7, 0, 0, 89, 97, 0, 1, 21, 0]","1","1","1"
"add troubleshooting guides to shards allocation actions (#87078)          add troubleshooting guides to shards allocation actions.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"run yaml rest tests using ccs in multi-cluster setup (#86521)          currently we only test a small subset of cross cluster search functionality in     rest tests living in the 'multi-cluster-search' qa module. in order to increase     test coverage for basic ccs functionality , this change adds a new qa modula     that re-uses a subset of existing yaml rest tests and runs them in a slightly     modified fashion in a ccs scenario.     document data and other write operations are executed agains a `remote`     cluster, while all calls to the search api aand other apis that support ccs are     performed on a local cluster connected to the remote with all the data via ccs.          relates to #84481","[0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]","0","0","1"
"remove immutableopenmap from getmappingsresponse (#87045)          when retrieving mappings, the response class exposes an     immutableopenmap. yet the consumers just use map operations. this commit     changes the type returned by the response class, as well as the internal     type, to map.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 6, 0]","1","1","1"
"make immutableopenmap hash code the same as hashmap (#87070)          immutableopenmap implements map so that we can slowly convert uses to     regular maps. however, many serialization tests check equal and hashcode     is the same with a roundtrip. in order for that to be true, the hashcode     for immutableopenmap needs to be the same as hashmap. this commit     makes immutableopenmap extend abstractmap, and then changes the each     entry hashcode to the be the same as hashmap.entry.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"fix ccr following a datastream with closed indices on the follower corrupting the datastream (#87076)          reproducer and fix for #87048.          reproduces the edge case by closing follower index that is part of a datastream and then recreating and re-adding that same index on the leader to make it get picked up by the auto-follower again. using stats call in the test mainly to reproduce the exact issue that motivated #87048 and to show that the datastream is correctly resolved by the index name expression resolver.          closes #87048","[0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 2, 2, 0]","1","0","0"
"bump versions for 7.17.4 release     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"port thirdparty audit task tests to spock (#86832)          one step closer to #86720","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 1, 3, 0]","1","1","1"
"support configurable claims in jwt realm tokens (#86533)          ","[0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0, 2, 10, 0, 1, 0, 0, 0, 0, 3, 0, 5, 0, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11, 0, 0, 39, 0]","0","1","0"
"remove default values from term and span query xcontent (#86985)          mostly this is just removing boosts, but it also simplifies span_not     slightly. it also removes the boost parameter from term, as that     shares an implementation with span_term.          relates to #76515","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 9, 0]","0","1","1"
"refactor log4j supplier of parameterizedmessage with throwable (#87022)          this is a result of structural search/replace in intellij. this only affects log methods with a signature     logger.info(supplier<?>, throwable) where level could be info/debug etc and supplier argument is in a form of     ()-> new parameterizedmessage          relates #86549","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 137, 0]","0","1","1"
"[rest api compatibility] enhance error message with ref to dev guide (#86831)          when a rest api compatibility test fails a message should be enriched     to include a ref to a developers guide.     the developers guide contains more information on how to troubleshoot     the test failure, where to look for transform tests etc.          relates #85955","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0]","1","1","1"
"add log4j.core to requires for the security module (#87073)          org.apache.logging.log4j.core is referenced in the loggingaudittrail     class. this pr adds it to the requires list of the security module.          relates: #81066","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"randomize connection mode for abstractmulticlusterstestcase (#86865)          currently tests extending abstractmulticlusterstestcase, i.e. mostly the ccs     tests, use the default connection mode configuration of the abstract base tests,     which is the default `sniff` mode. in order to increase coverage for `proxy`     mode connections this change starts to randomize the connection type in the     setup. subclasses of this test are free to use or overwrite this behaviour.          relates to #84481","[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0, 0, 1, 0]","1","1","1"
"improve rejection handling in threadedactionlistener (#87042)          today if the submission within `threadedactionlistener#onresponse` is     rejected from its threadpool then we call `delegate#onfailure` with the     rejection exception on the calling thread. however, if the submission     within `threadedactionlistener#onfailure` is rejected then we just drop     the listener and log an error.          in most cases completing a listener exceptionally triggers some cleanup     which is often fairly lightweight and therefore safe enough to complete     on the calling thread. in any case it's generally preferable to complete     a listener exceptionally on the wrong thread rather than just dropping     it entirely.          this commit fixes this and adds a test to verify that     `threadedactionlistener` completes properly even in the face of     rejections.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"dry up collection writing to streamoutput (#86386)          small weekend project around automated refactoring:     we have endless duplication here, drying up some of it.","[0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294, 49, 0, 32, 50, 0]","0","0","1"
"[test] ensure shardsearch task is handled before cancelling (#87021)          when the shardsearch task is registered but not really handled,     cancellation does not work as expected. this pr ensures the task is     actually handled, i.e. creating a new readercontext, before     cancellation.          resolves: #86881","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","1","1"
"convert executornames pojo to record object (#87020)          executornames was a very simple data-holding class that easily     works as a java record.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"improve server process tests (#87012)          when the server process dies, the cli should reflect the unexpected exit     of the process in its return from waitfor. the test for this closed the     input side of the pipe, but that is where the buffer lives. this means     there is a race condition in the cli testcase fully reading the final     message expected. this commit removes some complexity from the test by     using a single latch, and closing the pipe from the process side to     mimic the break.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0]","1","1","1"
"change metadata indices to return map (#87047)          the indices/getindices methods of metadata expose the impl detail of     using an immutableopenmap. this commit changes the return type to map.     for the one case in rollup where the map was fed back to an     immutableopenmap builder, the type for the builder ctor was relaxed to     map with special casing an existing immutableopenmap.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 11, 0]","0","1","1"
"ensure java compile module path is tracked as a task input (#87064)          this is a follow up to #81066 which ensures that we track the module     path as a input on java compilation tasks. since we truncate the compile     classpath and pass the module path as separate cli arguments we need to     track those separately. we do that by simply annotating a getter on the     `commandlineargumentprovider`.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"synethetic source: fix scaled float (#86760)          this causes scaled float values that entirely saturate their numeric     range to continue saturating their range on round trip.     ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"deprecate ldap/ad realm settings missing bind password for bind dn (#85326)          ldap/ad authentication realms can be configured to authenticate through     ldap via a bind user. for this it's necessary to set a bind dn (via     bind_dn) together with a bind password (via bind_password or     secure_bind_password). setting a bind dn without a bind password will     cause all ldap/ad realm authentication to fail, leaving the node     non-operational. this pr introduces a deprecation warning when bind_dn     is set without a bind password.          closes #47191","[0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0]","1","1","1"
"remove startup sleep time from archive tests (#87058)          the packaging tests had an env var that would sleep for some seconds to     allow elasticsearch to startup. this commit removes the env var as it is     no longer used or necessary.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] replace the implementation of the categorize_text aggregation (#85872)          this replaces the implementation of the categorize_text aggregation     with the new algorithm that was added in #80867. the new algorithm     works in the same way as the ml c++ code used for categorization jobs     (and now includes the fixes of elastic/ml-cpp#2277).          the docs are updated to reflect the workings of the new implementation.","[0, 0, 0, 0, 10, 4, 4, 0, 0, 0, 0, 3, 12, 0, 0, 5, 3, 0, 0, 0, 0, 0, 10, 2, 1, 3, 0, 0, 0, 0, 0, 1, 0, 2, 11, 12, 0, 0, 0, 0, 0, 0, 68, 31, 1, 3, 38, 0]","1","0","0"
"remove `push back excessive requests for stats (#83832)` (#87054)          ","[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 9, 0]","0","0","1"
"more verbose logging in testjoinwaitsforclusterapplier (#86975)          relates #86974","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0]","1","1","1"
"guard for adding null value tags to vector tiles (#87051)          this commit adds a guard so tags with null values are ignored.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","0","0","1"
"[test] assert busy waiting for dynamic update (#87044)          dynamic updates are not guaranteed to be applied on the master node after an index operation, hence we need to wrap the get mappings call with an assertbusy and retry until the updated mappings made it to the master.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"cleanup dead variable in restore task (#87031)          this is unused and it's confusing to have a reference to this in the restore task     because these things hold the repository generation.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"moving deprecation info api checks off the transport_worker thread (#86811)          doing a lot of work on the tranport_worker thread can cause the cluster to become unstable because nodes can't communicate quickly enough. with a lot of indices, the deprecation info api check can take tens of seconds. this change moves those checks off of the transport_worker thread.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]","1","1","1"
"dump a truncated file if over limit in packaging tests (#86821)          the packaging tests run many shell commands, and capture the stdout and     stderr of those commands into files. if the file is extremely large, the     shell omits reading the file. that makes debugging any issue with large     output difficult. this commit adds handling to read up to the max file     size worth of characters from the file.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[ml] fix ml task auditor exception early in cluster lifecycle (#87023)          in a very young cluster where there's never been a persistent     task it was possible that the ml task assignment auditor could     throw null pointer exceptions. nothing particularly bad resulted     from this apart from filling up the log file with stack traces.          this pr avoids the problem.          fixes #87002","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0]","1","0","0"
"remove unused method from systemindices.feature (#87017)          this unused method looks like an accidental duplication of     systemindices.feature#fromsystemindexplugin.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"speed up fieldmapper construction/parsing/serialization (#86860)          speeding this up some more as it's now 50% of the bootstrap time of the many shards benchmarks.     iterating an array here in all cases is quite a bit faster than iterating various kinds of lists     and doesn't complicate the code. also removes a redundant call to `getvalue()` for each parameter     during serialization.","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 12, 13, 0, 0, 26, 0]","0","0","1"
"[refactor] use lists instead of maps for systemindices features (#87004)          the systemindices constructor should take a list instead of a map as an     argument so that we can guarantee that the map we use for feature lookups is     keyed on the feature name.          we also provide some new getter methods so that calling code does not have to     handle the map directly.","[0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 38, 0]","1","1","1"
"error on direct creation of non-primary system index (#86707)          * error on direct creation of non-primary system index     * update docs/changelog/86707.yaml     * allow requests to create the system alias     * adjust watcher tests to avoid error          the last bit is ugly, but it appears that for over a year the system indices     index creation code has been silently overwriting requests from the     watcher integration test setup. this commit changes the requests in the     watcher test so that they match what is actually executed.","[0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 7, 0]","1","1","1"
"new geo_grid query to be used with geogrid aggregations (#86596)          query that allows users to define a query where the input is the key of the bucket and it will match the     documents inside that bucket.     ","[0, 0, 0, 0, 11, 2, 1, 0, 0, 0, 0, 3, 1, 0, 0, 9, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 30, 18, 1, 0, 7, 0]","1","1","1"
"read subobjects mapping parameter in advance (#86894)          as part of #86166 we added support for a new mapping parameter called `subobjects` that     can be set to the `object` field type. such parameter will affect not only how incoming     documents will be dynamically mapped in the future, but also how field names are treated     as part of the mappings themselves.          mappings get parsed into a map, where keys ordering is not guaranteed. in case a mappings call     contains `subobjects` set to `false` and also sub-fields for that same object, we need to make     sure that we read the parameter in advance in order to know how to treat the sub-field and decide     whether we need to expand dots in field names or leave them as they are.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 17, 0]","0","0","1"
"don't output default values in text query xcontent representations (#86979)          this removes default values from the xcontent representations of the     following queries:          * intervals     * combined_fields     * match_bool_prefix     * match_phrase_prefix     * match_phrase     * multi_match     * query_string     * simple_query_string","[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 27, 6, 0]","1","0","0"
"temporarily skip server module tests on jdk 19 until a jdk bug is resolved (#87019)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0]","1","1","1"
"replace supplier of parameterizedmessage with java.util.supplier<string> (#86971)          this is a result of structural search/replace in intellij. this only affects log methods with a signature     logger.info(supplier<?>) where level could be info/debug etc and supplier argument is in a form of     ()-> new parameterizedmessage          this commit also introduced a strings utility class to avoid passing locale.root to every     string.format(locale.root, pattern, args)     relates #86549","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 115, 0]","0","1","1"
"remove test that relied on jwt feature flag (#86499)          the testjwtrealmdependsonbuildtype test assumed that jwt was behind a     feature flag which is no longer the case          resolves: #85407","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"modularize analysis-common (#87005)          this is change modularizes analysis-common, by adding a module-info.java","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"user profile - support literal username as base of profile uid (#86952)          some identity system can provide strong guarantee on username     uniqueness. in this case, it is desirable that the unique profile id is     transparently related to the username, i.e. the profile uid and the     username are tranlatable in both ways. this means hashing the username     is not a viable option since hashing is one way.          this pr adds support for using the literal username as the base of a     profile uid with a fix suffix string of admin's choosing (configured on     the security domain level). this mode of uid generation also means that     es will *not* try to differentiate users when they have the same name     because this should be guaranteed by the identity system. es will     instead throw an error on duplication which is the safe behaviour.     ","[0, 0, 0, 0, 1, 5, 0, 1, 0, 0, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 3, 25, 2, 3, 8, 0]","1","0","0"
"use -d with windows packaging tests (#86995)          historically the windows elasticsearch.bat did not support the -d option     to daemonize. this meant packaging tests needed to mimic the behavior to     run in the background. with the completation of migration of the server     cli to java, the -d option is now available on windows. this commit     removes the packaging test code that runs elasticsearch in the     background in favor of using the new option.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"health api add indicator doc links (#86904)          this pr adds a number of documentation links to health indicators. an indicator's help url will be displayed     when a health indicator returns a non-green result.","[0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 44, 0]","0","0","1"
"skip on 19 (#87000)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","0","0","1"
"fix null message in stdout (#86981)          ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"script: add ability to alias classes in whitelist (#86899)          this adds the ability to add aliases to classes in the whitelist.          currently, inner classes need to be scoped by outer classes.  however for metadata, https://github.com/elastic/elasticsearch/issues/86472, we want the metadata for each update script to be of type `metadata` but have different implementations and different whitelisted fields.          this change makes it possible to add an alias for a class name so scripts can refer to that alias, eg `metadata md = meta();` vs `ingestscript.metadata md = meta();`          refs: #86472","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"improve error message for search api url parameters (#86984)          the search api uses url query parameters that require other parameters to be     present. when one of them is ommited, the other depending parameters might not     be consumed, leading to an error message about unconsumed parameters from the     baseresthandler that are not actionable by the user.     this change adds improvements for url query parameters that require the     existance of the 'q' query string parameter and also adds better error message     for suggestion url parameter handling.          closes #79719","[0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0]","0","0","1"
"adjust osprobe assertion for burst cpu (#86990)          when gathering v1 cgroup cpu stats, the file is expected to have 3     lines. however, if the burst feature of cpu accounting is enabled, it     will actually have 5 lines. this commit adjusts the assertion to allow     for the extra lines. we ignore these lines already in the parsing of the     calling method. unfortunately this is not currently easy to test, and no     tests exist. give it is just an assertion that is relaxing, i think it's     ok to fix this issue, and separately work on revamping the osprobe     tests.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"[ml] adds start and end params to _preview and excludes cold/frozen tiers from unbounded previews (#86989)          n larger clusters with complicated datafeed requirements, being able to preview only a specific window of time is important. previously, datafeed previews would always start at 0 (or from the beginning of the data). this causes issues if the index pattern contains indices on slower hardware, but when the datafeed is actually started, the `start` time is set to more recent data (and thus on faster hardware).          additionally, when _preview is unbounded (as before), it attempts to only preview indices that are not frozen or cold. this is done through a query against the _tier field. meaning, it only effects newer indices that actually have that field set.","[0, 0, 0, 0, 13, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 21, 0, 0, 6, 0]","0","0","1"
"[test] wait to lose master in readiness tests (#86696)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","1","1"
"add libgraal thread leak filter (#86976)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[refactor] move classpath plugins to mocknode (#86914)          we only use classpath plugins in tests, so we should move code handling them to     our test framework. this pr introduces a new mockpluginsservice in our test     framework. the mockpluginsservice is constructed with a list of classpath     plugins that it will load by reflection. as before, these classpath plugins     won't have their own classloaders.          we have to construct the pluginsservice early in the node class constructor so     that mocknode methods can access it, but we have to do it after node updates     its settings argument. therefore, instead of passing in classpath plugins as a     paramater, we are passing in a constructor function that takes a settings     argument and returns a pluginsservice. this lets us remove the classpath plugin     list from the production code entirely.          the mockpluginsservice delegates almost everything to a real pluginsservice,     overriding only the protected plugins() method and the info() method.          this commit also changes the plugindescriptor.equals() method. we have long had     a todo comment for removing the version comparison and making two plugin     descriptors equal if and only if they have the same name. the original commit     that introduced version comparison between plugin descriptors was:          abf9a866788b2fab855b50728670e2aa2dd42c5a          the change did not seem to have a specific purpose in that commit, and no tests     guaranteed the behavior.          closes #86635     ","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 10, 0]","1","1","1"
"rename plugininfo to plugindescriptor (#86950)          the class plugininfo represents the plugin-descriptor.properties file     that each plugin must have. this commit renames the class to more     closely match what it represents: the plugin descriptor.","[0, 0, 0, 0, 5, 4, 0, 0, 0, 4, 0, 7, 2, 0, 0, 14, 0, 0, 0, 7, 0, 3, 4, 5, 0, 3, 23, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0, 12, 2, 1, 43, 29, 0, 2, 167, 0]","0","0","1"
"add `status` field to multisearchtemplateresponse (#85496)          this change adds a `status` field to multisearchtemplateresponse items,     as is already the case for multisearchresponse, making the two response     formats consistent.          closes #83029","[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 5, 2, 0]","0","0","1"
"correctly keep master in master history if it was active at the beginning of the master history period (#86708)          this commit fixes a problem with the masterhistory class. if we have had a single master for a week and then that     master went to null 5 seconds ago, we want to say that we have had a non-null master within the last 30 seconds.     however before this change, masterhistory.hasseenmasterinlastnseconds(30) would return false in that case     because the non-null master had a start time much more than 30 seconds ago. this fix recognizes that a node is     master up until the start time of the master that replaces it. this required changing the methods that pruned the     master history based on time so that we do not prune masters that are in any way active during the time period.","[0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 1, 4, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 26, 0, 1, 1, 0]","1","0","0"
"add run-as support for oauth2 tokens (#86680)          authentication with an oauth2 token can now perform run-as with changes     in this pr. this is in addition to the existing run-as support for realm     and api key authentication.          nb there are additional constraints on whether an oauth2 token is     indeed qualified for run-as:     1. the token cannot itself cannot already be a run-as (this can happen when     the token is created using run-as and client_credentials grant)     2. the token cannot be created by anonymous or internal users          service accounts cannot create tokens which meant run-as is not     supported for service accounts (none of existing service accounts     requires it anyway).     ","[0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 7, 5, 16, 0]","0","0","1"
"modularize elasticsearch (#81066)          this pr represents the initial phase of modularizing elasticsearch (with     java modules).          this initial phase modularizes the core of the elasticsearch server     with java modules, which is then used to load and configure extension     components atop the server. only a subset of extension components are     modularized at this stage (other components come in a later phase).     components are loaded dynamically at runtime with custom class loaders     (same as is currently done). components with a module-info.class are     defined to a module layer.          this architecture is somewhat akin to the modular jdk, where     applications run on the classpath. in the analogy, the elasticsearch     server modules are the platform (thus are always resolved and present),     while components without a module-info.class are non-modular code     running atop the elasticsearch server modules. the extension components     cannot access types from non-exported packages of the server modules, in     the same way that classpath applications cannot access types from     non-exported packages of modules from the jdk. broadly, the core     elasticseach java modules simply `wrap` the existing packages and export     them. there are opportunites to export less, which is best done in more     narrowly focused follow-up prs.          the elasticsearch distribution startup scripts are updated to put jars     on the module path (the class path is empty), so the distribution will     run the core of the server as java modules. a number of key components     have been retrofitted with module-info.java's too, and the remaining     components can follow later. unit and functional tests run as     non-modular (since they commonly require package-private access), while     higher-level integration tests, that run the distribution, run as     modular.          co-authored-by: chris hegarty <christopher.hegarty@elastic.co>     co-authored-by: ryan ernst <ryan@iernst.net>     co-authored-by: rene groeschke <rene@elastic.co>","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 1, 0, 9, 0]","1","1","1"
"[test] ensure generated username does not start nor end with a whitespace char  (#86965)          closes #86955     ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 1, 4, 0]","1","1","1"
"propagate mapperbuildercontext across merge calls (#86946)          with #86166 we have added support for leaf fields that have dots in their names, without needing to expand their path to intermediate objects. that means that for instance a host.name keyword field mapper can be held directly by the root object mapper if the root has subobjects set to false.          this opens up for situations where a field name containing dots can't necessarily be split into a leaf name and a parent path made of intermediate object mappers. in the field mapper merge code, we build the full path of the merged field making that now incorrect assumption, which causes the result of merged leaf fields to have incorrect full path. this is a bug although it got unnoticed so far as the full path of a field mapper is not so widely used compared to its leaf name (returned by the simplename method). one place where the full path is used is when sorting the child mappers in objectmapper#serializemappers which was causing mapperservice#assertrefreshisnotneeded to trip as the result of the merge has fields in a different order compared to the incoming mappings.          with this fix, we add a mapperbuildercontext argument to the different merge methods, propagate the mapperbuildercontext in all the merge calls and create a child context when needed, meaning whenever merging object mappers, so that their children mappers are created with the proper full path.","[0, 0, 1, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 20, 0]","1","0","0"
"fix audit logging to consistently include port number in origin.address (#86732)          this commit changes audit logging of `connection_denied`     and `connection_granted` events in order to include a port number.          closes elastic/elasticsearch#86694","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0]","1","0","0"
"fix: check field existence before trying to merge running stats (#86926)          * fix: check field existence before trying to merge running stats          all fields must coexist in the same docs for the stats to be     calculated correctly. as a result, we need to check existence of     the fields before trying to merge running stats.          instead of collecting all field names into a collection we decided     to extract the field names from one of the maps. this saves us from     serialising/deserialising another collection and some backward     compatibility pain. this means also that we assume all maps     to hold the same set of keys and just chose one of them as the     candidate to extract keys (field names) from.          this is a fix for issue #73276.","[0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"fix needless capturing lambda in analyzer wrapper (#86954)          just a random thing i found when inspecting a heap dump that had ~100m     of these in it.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"avoid building duplicate fieldtypelookup in mappinglookup constructor (#86932)          if we don't have runtime fields we don't need to build this twice.     these are huge for something like beats mappings and this change saves     about 400mb of heap per data node in the many shards benchmarks.","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 2, 0]","0","1","1"
"add support for cpu ranges in desired nodes (#86434)          this commit adds support for cpu ranges in the desired nodes api.          this aligns better with environments where administrators/orchestrators     can define lower and upper bounds for the amount of cpus that the     desired node would get once deployed.          this allows to provide information about the expected cpu and possible     allowed overcommit that the desired node will run on.          this was the previous expected body for the desired nodes api (we still support it):     ```     put /_internal/desired_nodes/history/1     {     `nodes` : [     {     `settings` : {     `node.name` : `instance-000187`,     `node.external_id`: `instance-000187`,     `node.roles` : [`data_hot`, `master`],     `node.attr.data` : `hot`,     `node.attr.logical_availability_zone` : `zone-0`     },     `processors` : 8,     `memory` : `58gb`,     `storage` : `1700gb`,     `node_version` : `8.3.0`     }     ]     }     ```          now it's possible to define `processors` or `processors_range` as in:     ```     put /_internal/desired_nodes/history/1     {     `nodes` : [     {     `settings` : {     `node.name` : `instance-000187`,     `node.external_id`: `instance-000187`,     `node.roles` : [`data_hot`, `master`],     `node.attr.data` : `hot`,     `node.attr.logical_availability_zone` : `zone-0`     },     `processors_range` : {`min`: 8.0, `max`: 16.0},     `memory` : `58gb`,     `storage` : `1700gb`,     `node_version` : `8.3.0`     }     ]     }     ```     note that `max` in `processors_range` is optional.          this commit also moves from representing cpus as integers to     accept floating point numbers.          note: i disabled the bwc yamlresttests for versions < 8.3 since we introduced     a few `breaking changes` but since this is an internal api it should be fine.","[0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 5, 0]","0","0","1"
"lazy instantiate cache in bitsetfiltercache (#86462)          an empty cache instance costs 50kb of heap. lazy initializing the cache when needed     in this class comes with trivial overhead relative to the cost of using the cache     but can save hundreds of mb of heap on large data nodes.          relates #77466","[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0, 2, 3, 0]","0","1","0"
"auto generate index.routing_path from mapping (#86790)          if no index.routing_path has been specified in the matching template or the component template that the template refers to then attempt to generate the index.routing_path index setting from the matching template's mapping or component template the template refers to.          relates #74660","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 16, 0]","0","1","0"
"add access to internal representation of geo_point doc values (#86800)          refactors geopoint docvalues wrappers to expose the internal sortednumericdocvalues","[0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, 2, 1, 1, 0, 0, 5, 9, 0, 0, 11, 8]","0","0","1"
"remove `mocksingleprioritizingexecutor` (#86921)          `mocksingleprioritizingexecutor` contains a hack that stops working with     jdk19 which introduces a different way to start threads. this commit     removes the hack and captures the tasks to be executed as they're passed     to the executor instead.          it turns out this hack was also apparently swallowing some tripping     assertions, so this commit fixes those assertions.          closes #86880","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0]","1","0","0"
"user profile - hash only username for profile uid (#86916)          this pr changes the profile uid calculation to hash only the username     and removes any use of domain/realm information. this means any users     with the same username now has the same base uid, which will still be     differentiated by the numerical suffix.          the reasons for this change are:     1. make profile uid generation resistant to domain name or composition     changes. initially the predictable uid is only necessary for the     moment of creation. but we now agree that there are benefits for this     uid to be predictable in longer terms.     2. allow a ess-like experience where username is always unique and hence     a 1-to-1 relationship between username and profile uid is desirable.     if users can provide the same unique username guarantee with their     own identity management system, they will be able to have the     ess-like experience.     ","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0]","1","0","0"
"[test] increase length of test password for fips (#86948)          password must be at least 114 bits in fips mode. this pr fixes the     password length in the new serverclitests so it passes in fips mode.          relates: #85758          ps: the test     [failed](https://gradle-enterprise.elastic.co/s/mrlw6o27onxee/tests/:distribution:tools:server-cli:test/org.elasticsearch.server.cli.serverclitests/testkeystorepassword)     on my pr ci.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"handle windows scripts invoked without .bat (#86944)          on windows cmd, one can invoke `myscript.bat` by just typing `myscript`.     this commit adjusts the clitoollauncher to account for this case, making     the .bat stripping to find the toolname conditional.          closes #86940","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0]","0","0","1"
"move pidfile handling to server cli (#86934)          now that the server cli is in java, we can do more system level things     inside it. this commit moves validating and writing the pidfile into the     server cli. one benefit is we get validation of directory/file problems     up front before even trying to start the es process.","[0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 25, 4, 9, 3, 14, 0]","0","0","1"
"rename nodeenvironment.nodepath to datapath (#86938)          the nodepath inner class of nodeenvironment represents path.data entries     of the node. the name however is sometimes confusing since these are the     data paths, and there is normally no singular concept of `node path` (an     installation has several different paths). this commit renames nodepath     to datapath, as well as all methods and variables referring to it, so     that the more general term `node paths` can be utilized for something     node wide: the paths in environment (in a future pr).","[0, 0, 0, 1, 1, 0, 0, 0, 6, 4, 1, 0, 0, 0, 0, 29, 0, 0, 0, 6, 0, 10, 11, 11, 0, 6, 5, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 159, 0]","0","1","1"
"allow serial_diff under min_doc_count aggs (#86401)          before 6.6 we allowed the `serial_diff` agg in lots of places, including     under `date_histogram` aggregations with `min_doc_count: 1`. this     allowed you to take the difference of two adjacent buckets, skipping any     that don't have any value. so if you have a value at 10am, no value at     11am, and another at noon the `serial_diff` will diff the 10am and noon     values. in 6.6 we disabled support for this. we'd like it back.","[0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0]","0","1","0"
"speed up building routingtable from routingnodes (#86903)          we do the routing nodes -> routing table step during reroute and it's a significant contributor     to the runtime of reroute.     the pr speeds it up by more than double in the common one shard + one primary case by saving the expensive     and slow-to-iterate hashmap keyed by shard id, the needless precomputation of the allocation ids set     and a redundant round of building `indexshardroutingtable` in `addshard`.          this gives us another 2-3% speedup on the initial indices bootstrap in the many-shards benchmark.     ","[0, 0, 0, 0, 5, 1, 1, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 32, 44, 0, 7, 60, 0]","0","0","1"
"replace most shell script logic with java (#85758)          elasticsearch provides several command line tools, as well as the main script to start elasticsearch. while most of the logic is abstracted away for cli tools, the main elasticsearch script has hundreds of lines of platform specific shell code. that code is difficult to maintain because it uses many special shell features which then must also exist in other platforms (ie windows batch files). additionally, the logic in these scripts are not easy to test, we must be on the actual platform and test with a full installation of elasticsearch, which is relatively slow (compared to most in process tests).          this commit replaces logic of the main server script, as well as the windows service management script, with java. the new entrypoints use the clitoollauncher. the server cli figures out all the jvm options and such necessary, then launches the real server process. if run in the foreground, the launcher will stay alive for the lifetime of elasticsearch; the streams are effectively inherited so all output from elasticsearch still goes to the console. if daemonizing, the launcher waits around until elasticsearch is `ready` (this means the node startup completed), then detaches and exits.          co-authored-by: william brafford <william.brafford@elastic.co>","[0, 0, 0, 0, 14, 4, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 18, 4, 0, 0, 0, 0, 0, 0, 30, 27, 1, 1, 19, 0]","0","0","1"
"make user and role name constraint consistent with max document id. (#86728)          this change tries to make user and role name constraints consistent with     what is currently allowed to store in the native realm (512).     because the document ids are prefixed by either `user-` or `role-`,     the actual possible max length is a funky looking 507 chars.     if we choose (in the future) to allow more than 507 chars we should     either consider increasing the max allowed size for document id or     consider hashing names longer than 507 in order to fit into document id.          closes elastic/elasticsearch#66020","[0, 0, 0, 0, 17, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 19, 2, 2, 16, 0]","1","0","0"
"fix clearing of lastsuccessfulauthcache when clear all realm cache api is called (#86909)          this commit adds missing call to clear last successful authentication cache,     when clear all realm cache action is called.          closes #86650          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0]","1","0","0"
"[refactor] extract method for mandatory plugins check (#86906)          this commit factors out a checkmandatoryplugins method     so we can keep test coverage without using the classpath     plugin code path, which will soon be moved to mocknode.          i also couldn't resist using set logic instead of for-loop list     building for the check itself.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 0, 0, 0, 0]","1","1","1"
"[refactor] move plugin setting merge method from pluginsservice to node (#86891)          the pluginsservice#updatedsettings method was only used once in the node constructor, so it makes sense to make that a utility method on the node class. we make it testable by factoring out the pluginsservice, instead providing a map of names to plugins as an argument.          this commit also adds test coverage to verify that we reject two plugins with the same name when loading from disk.","[0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"fix max_primary_shard_size resize factor math (#86897)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 10, 0]","1","0","0"
"use default hash setting helper in apikeyservice (#86845)          small refactor to re-use the default stored hash setting helper.          missed this in #86146.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"don't download geoip databases if geoip system index is blocked. (#86842)          for example in the case that the a cluster is running out of disk     space and indices reject writes.          this can otherwise load to unnecessary error logs being printed and     just add to more instability. instead, the geoipdownloader should     just try to download the files the next it runs.","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 10, 0, 0, 0, 0]","0","0","1"
"strengthen testincorrectheaderhandling (#86886)          enhances this test to cover more combinations of present/absent headers,     and makes the fake rest request immutable to align it with the     production implementation.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 1, 9, 0]","1","1","1"
"simplify cellidsource classes used in geogrid aggregations (#86806)          small refactor to share some common code.","[0, 0, 0, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 6, 15, 9, 0, 0, 0, 0, 0, 0, 12, 3, 0, 0, 0, 0]","1","1","1"
"sql: fix format function to better comply with microsoft sql server specification (#86225)          ","[0, 0, 0, 0, 3, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 12, 0]","1","0","0"
"fix compilation for (#86591)          the above pr was merged concurrently to another one that refactored     a method name.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"add text field support to archive indices (#86591)          adds support for `text` fields in archive indices, with the goal of adding simple filtering support on text fields when     querying archive indices.          there are some differences to regular text fields:          - no global statistics: queries on text fields return constant score (similar to match_only_text).     - analyzer fields can be updated     - if defined analyzer is not available, falls back to default analyzer     - no guarantees that analyzers are bwc     the above limitations also give us the flexibility to eventually swap out the implementation with a `runtime-text field`     variant, and hence only provide those capabilities that can be emulated via a runtime field.          relates #81210","[0, 0, 0, 3, 2, 3, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 10, 0, 2, 10, 0]","0","0","1"
"convert metadata templates return type to map (#86776)          the methods for getting templates from metadata expose the underlying     immutableopenmap, but the callers all just need a map. this commit     converts the return type of these methods and adjusts the few places     assuming it was an immutableopenmap.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 2, 1, 0, 10, 0]","0","1","1"
"upgrade to lucene snapshot 978eef5459c (#86852)          final (hopefully!) snapshot before the 9.2.0 release          * update test to expect persian tokenfilter - will be exposed later     * fix knnvectorquerybuildertests::doassertlucenequery          co-authored-by: mayya sharipova <mayya.sharipova@elastic.co>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0]","1","0","0"
"soft-deprecation of point/geo_point formats (#86835)          * soft-deprecation of point/geo_point formats          since geojson and wkt are now common formats for all three types:     geo_shape, geo_point and point     we decided to soft-deprecate the other point formats by ordering:     * geojson (object with keys `type` and `coordinates`)     * wkt `point(x y)`     * object with keys `lat` and `lon` (or `x` and `y` for point)     * array [lon,lat]     * string ``lat,lon`` (or ``x,y`` in point)     * string with geohash (only in `geo_point`)          the geohash is last because it is only in one field type.     the string version is second last because it is the most controversial     being the only version to reverse the coordinate order from all other     formats (for geo_point only, since the coordinates are not reversed     in point).          in addition we replaced many examples in both documentation and tests     to prioritize wkt over the plain string format.          many remaining examples of array format or object with keys still exist     and could be replaced by, for example, geojson, if we feel the need.          * incorrect quote position","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[refactor] make pluginbundle package-private (#86863)          our plugin loading code uses the pluginbundle class to describe a plugin on     disk. this should be an implementation detail of the plugin loading code, and     not part of the api shared with the plugin cli.          * refactor to hide internal code from plugin cli     * add javadoc","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 2, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 2, 0]","0","0","1"
"script: fix setter shortcut for unbridged setters (#86868)          the setter shortcut resolution worked for bridged setter methods, in `painlesslookupbuilder.cacheruntimehandles`, but did not work for other setters.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"guard cursor for journalctl command in packaging tests (#86820)          it is possible for the cursor from journalctl to be empty, perhaps if     the log is empty. this commit guards the getlogs command line to only     add the --after-cursor if a non empty cursor exists, otherwise     journalctl raises an error.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0]","0","0","1"
"authorize painless execute as index action when an index is specified (#85512)          painless execute allows users to validate their scripts. some of the supported script contexts     support providing a sample document as well as an index to pull the mappings from.          the painless execute api requires cluster admin privileges today and while that's ok for the contexts that     don't support providing an index, it is not ideal when an index is provided. in fact users can run scripts     as part of the search api, which requires only the indices/read privilege on the indices that the users     is reading from.          this commit maps the painless execute action to an indices/read action when an index is specified, so that in     that case the same privileges as a search action will be requested to run painless execute.          relates to #48856     closes #86428","[0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]","1","1","1"
"rename indicesservice#createindexmapperservice() method (#86851)          rename from `createindexmapperservice(...)`` to `createindexmapperserviceforvalidation(...)`          followup from #86790","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0]","0","1","1"
"add reminder to add bwc codecs on major version upgrade (#86844)          codifies the requirement to add lucene bwc codecs and corresponding tests when upgrading elasticsearch to the next major version.          relates #81210","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add support for dots in field names for metrics usecases (#86166)          this pr adds support for a new mapping parameter to the configuration of the object mapper (root as well as individual fields), that makes it possible to store metrics data where it's common to have fields with dots in their names in the following format:          ```     {     `metrics.time` : 10,     `metrics.time.min` : 1,     `metrics.time.max` : 500     }     ```          instead of expanding dotted paths the their corresponding object structure, objects can be configured to preserve dots in field names, in which case they can only hold leaf sub-fields and no further objects.          the mapping parameter is called subobjects and controls whether an object can hold other objects (defaults to true) or not. the following example shows how it can be configured in the mappings:          ```     {     `mappings` : {     `properties` : {     `metrics` : {     `type` : `object`,     `subobjects` : false     }     }     }     }     ```          closes #63530","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0]","0","0","1"
"fix mvt polygon orientation (#86555)          this commit forks the method we use in jtsadapter to generate the vector tile feature containing the right logic     for polygon orientation.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0]","1","0","0"
"support geo label position through rest vector tiles api (#86458)          support label position in rest vector tiles          there is a need to provide sensibly calculated label positions for polygons and lines in kibana maps. a very convenient way to satisfy this need is through a runtime field that the rest api can make use of when labels are requested. this has the advantage of providing painless access to the label position as well.          this  work adds support for the rest api to provide label positions to mvt queries, both for the hits layer and the aggs layer. to enable this feature, set with_labels to true as a query parameter to the vector tile search query.","[0, 0, 0, 0, 5, 4, 1, 0, 0, 0, 0, 0, 4, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 39, 0, 6, 6, 0]","0","0","1"
"update gradle javaplugin to support generating javadoc for modules (#86781)          this change updates the javaplugin to support generating javadoc for modules, i.e. ensure that modular dependencies can be found on the module path.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","1","1"
"skip redundant mapping by hash gc in metadata.builder (#86830)          no need to check for mappings to gc if we didn't remove any use of any mapping.     saves ~4% overall on the many-shards benchmarks initial indices bootstrap.     ","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 0, 1, 0, 0]","1","1","1"
"remove elasticsearch.rest-test gradle plugin (#85491)          removes and remaining usages of `elasticsearch.rest-test` and the plugin itself from the codebase          relates to https://github.com/elastic/elasticsearch/issues/63696","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"skip redundant name collision check in metadata build (#86829)          no need to check for name collisions when we are reusing the indices lookup     and have checked that we didn't change any naming.     -> saves us another percent on cs updates around reroute","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 3, 0]","0","1","1"
"removing blocking wait for close in recoverysourcehandler (#86127)          remove the blocking wait when releasing safe commits or store references on the recovery source.     this seems safe enough these days with https://github.com/elastic/elasticsearch/pull/85238 not tripping     and the assertion that makes sure we never submit the close task to an already shut-down pool          closes #85839","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"ensure authentication is wire compatible when setting user (#86741)          the securityservertransportinterceptor class is responsible for writing     authentication header in a wire compatible format before the request     leaving the local node. however, a bug made it ignore the wire version     when setting user based on the action origin. this pr fixes it and adds     relevant tests.          it is an old bug but never manifested itself previously because (1) the     code path is rare enuough and (2) authentication didn't have any version     difference till 8.2.          resolves: #86716     ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0]","1","0","0"
"the authentication class is now final (#86544)          this pr marks the authentication class to be final which is the last     step of locking down the authentication class. the authentication class     is basically a record class and it has internal logics on what values     can or cannot be used together. we don't expect it to be extended by any     subclasses and a concrete object should always be created for tests     instead of mocking.          relates: #86424     relates: #86206","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0]","1","1","1"
"[test] fix authentication randomisation for operator check (#86535)          internal users bypass operator check. so we should not use them for     operator check test.          relates: #86424     resolves: #86530","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"fix terminal flushing and make api consistent (#86808)          this commit fixes the printwriters created by terminal to use     autoflushing. it also fixes prompting to flush the error stream after     writing. finally, it makes the apis more consistent by adding getters     for verbosity and reader so that subclasses of terminal can fully wrap     and existing terminal.          relates #85758","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0]","1","0","0"
"improve debug logging in packaging tests (#86809)          when the elasticsearch log file cannot be moved during packaging test     cleanup, it usually means the windows elasticsearch process is still     running. this commit moves the code to dump all available log     information out to a separate dumpdebug() method and utilizes it when     a failure ocurrs moving the log file.          relates #85758","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"use network recycler for rest responses (#82093)          same as #80111 but for the rest layer.","[0, 0, 0, 0, 1, 7, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 5, 0, 0, 6, 9, 0, 1, 23, 0]","1","1","1"
"endpoint events - give `kibana_system` privs to index template, not backing indicies. (#86797)          * endpoint events - give privs to index, not datastream.          * update tests.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]","1","1","1"
"wildcard support in logstash pipelines search api. (#85847)          * wildcard support in logstash pipelines search api.          * code review improvements: patter compile repetition fixed, descriptive naming hit counts, failure check before putting the result into result map.","[0, 0, 0, 0, 4, 3, 3, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 13, 1, 3, 3, 0]","1","0","0"
"[ml] [transforms] prefer secondary auth headers for transforms (#86757)          when creating and updating transforms, it is possible for clients to provide secondary headers.          when put, _preview, _update is called with secondary authorization headers, those are then used or stored with the transform.          closes: https://github.com/elastic/elasticsearch/issues/86731","[1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 19, 5, 0, 0, 7, 0]","1","1","1"
"use estestcase in server cli tests (#86783)          this commit removes the launcherstestcase in favor of estestcase.          relates #85758","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","1","1","1"
"[refactor] flexible general actions over plugins in pluginsservice (#86642)          pluginsservice had a handful of methods that simply called a method from     the plugin superclass for every plugin in the plugin service. here, we     refactor this logic out to the call sites by adding flexible, generic     methods for applying actions to all plugins.          we also find places in the node class that were using     filterplugin(plugin.class) to accomplish the same thing, and replace     those usages with these new methods.","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"synthetic source: more docs (#86766)          adds lots of javadocs to the synthetic source innards.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"[transform] support `range` aggregation in transform (#86501)          ","[0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 1, 2, 0]","0","1","0"
"save redundant singleton maps in field mappers (#86785)          in the many-shards benchmarks the singleton maps storing just a single     analyzer for each keyword field mapper cost around 5% of the total heap     usage on data nodes (700mb for ~15k indices which translate into ~16m instances     of keyword field mapper for beats mappings).     creating specific implementations for the zero, one or many analyzers     use cases that already have their own specialized constructors eliminates this     overhead completely.          relates #77466","[0, 0, 1, 0, 14, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 0, 0, 3, 18, 0, 0, 22, 0]","1","1","1"
"simplify netty4httppipelininghandler (#86791)          no need to collect responses into an intermediary list, we can write them directly     as they become writable. also, we can be more efficient for the common case where the response written is of the     right sequence number and write it out directly.     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 14, 0, 2, 1, 0]","0","0","1"
"[ml] [transforms] fix transform _start permissions to use stored headers in the config (#86802)          it was previously required that the _start api caller required the same roles as the create api caller.          this does not make sense as when the transform is actually running (after _start) we rely solely on the roles of the caller who created the transform.          consequently, this commit does the permission validations and various checks with the roles of user who created the transform, not the one calling _start","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 9, 0]","1","0","0"
"port symboliclinkpreservingtarit to spock (#86758)               part of #86720","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"add points metadata support for archive indices (#86655)          archive indices appear just as regular indices in a cluster, and can be part of index patterns when queried. to allow     searches to quickly skip shards of archive indices that might not have relevant data, we're adding support for skipping     shards of archive indices here that don't have data falling in the time range being queried. this is critical for the kibana     experience which relies on the date range picker to quickly skip some of the indices in an index pattern.          doing the actual time-range query on the archive index is much more expensive as on a regular index (as it's using doc     values instead of points to run the query, equating to a full scan of the columnar data). the solution here is to make     points metadata available in archive indices, so that the minimum and maximum value can be retrieved in constant time     (only a tiny fraction of the full points capabilities).","[0, 0, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0]","0","0","1"
"move restwrapper to interceptor.restinterceptor (#86784)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","0","0","1"
"port buildresources func tests to spock (#86756)          unify our build tool testing          part of #86720","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[osquery] extend kibana_system role with an access to osquery_manager… (#86609)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0]","0","0","1"
"flatten netty4 http pipeline handlers into a single handler (#86133)          this sets up the implementation of chunked rest response encoding     that will be able to send large responses without serializing them     in full on heap upfront.     having all the steps of sending a response in one place together with     the pipelining logic allows adding another response type that serializes     on the transport threads alongside `netty4httpresponse` in a follow-up     that will only require changes to `netty4pipelininghandler`.     also, this change in isolation saves loads of indirection and now (that the nio     transport is gone) redundant abstractions, making the path of sending a rest     response all around easier to follow.     ","[0, 0, 0, 0, 9, 10, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 7, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 1, 2, 0, 0, 0, 1, 0, 0, 10, 18, 0, 0, 21, 0]","0","0","1"
"add a gradle plugin for compiling modular source projects. (#86602)          this pr upstreams a custom gradle plugin for compiling modular source     projects, that we've been using for a while now over on the modules     branch. the plugin infers which dependencies should be on the module     path and which dependencies should be on the class path, when compilng     the main java sourceset. this supports the `bottom up` modularization of     elasticsearch, where parent projects are modularized before child     projects. allowing to modularize the core of the server independently of     the extension components, that can themselves be modularized later.          with this plugin various subprojects can be modularized (by adding a     module-info.java in the source root) with minimal fuss - no custom     gradle logic is required by the subproject, beyond a couple of     subproject specific compiler lint suppressions.          the inference in the plugin is driven by walking the project     dependencies, searching for the presence of a module-info.java,     afterwhich all subprojects will be put on the module path. again, this     supports `bottom up` modularization.          co-authored-by: chrishegarty <christopher.hegarty@elastic.co>     co-authored-by: mark vieira <portugee@gmail.com>     co-authored-by: ryan ernst <ryan@iernst.net>     co-authored-by: rene groeschke <rene@breskeby.com>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"expand jar hell to include modules (#86622)          expands jar hell to include modules from the system class loader.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 12, 0]","0","0","1"
"fix the test framework codebase name (#86777)          a side effect of https://github.com/elastic/elasticsearch/pull/86706 was     unintentionally renaming the test framework jar. this commit reverts the     jar name to the horrible named `framework`, and adjusts the test     security manager bootstrap to account for the name.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"suppress extrasfs in plugins utils tests (#86763)          we suppress extrafs in the class from which these tests were copied, so     we need to suppress them here as well.          see also: 5c8d5677a4691afcf06b9717cf8e9fb6d252c727","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"primary system indices should be write indices for system aliases (#85977)          whenever we create a system index whose descriptor     has an alias, we add the alias. if the system index is the primary     index, we make it the write index for the alias.          co-authored-by: elastic machine <elasticmachine@users.noreply.github.com>","[0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 26, 1, 1, 4, 0]","0","0","1"
"more cleanup on reaper tests (#86762)          - remove duplicate files.     - move to build-tools","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"reindex support for tsdb creating indices (#86704)          this teaches reindex to infer if the destination index is a tsdb index     if it doesn't yet exist. it looks at the templates that apply to the     index and checks what settings they use. so you should be able to     reindex into a non-existant index and automatically get the tsdb     support.","[0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 0, 0, 2, 0]","1","1","1"
"mute pluginsutilstests     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"[ml] autoscaling fixes and additional debug logging (#86590)          fixes the following problems in autoscaling:          1. divide by zero error when scaling up from zero     2. given jvm size rounding, we'd sometimes choose a node that     was 1-3mb bigger than necessary, potentially leading to an     unnecessarily large scale-up     3. the per-node overhead was being added to required size twice     4. improve the reason when a cluster with no ml nodes decides     it still needs no ml nodes     5. now consider free memory at current scale when scaling up          also adds more debug logging so we can get visibility of     what happens in deployed cloud clusters when necessary.          followup to #86399","[0, 0, 0, 0, 5, 2, 0, 1, 0, 0, 0, 4, 29, 0, 9, 4, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 44, 68, 8, 7, 82, 0]","1","0","0"
"remove accidentally added files not in use yet     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"use pipes for spawned controllers (#86709)          controller processes currently inherit stdout/stderr streams from     the main elasticsearch process. this isn't horrible when we run in the     foreground, but when we daemonize, the open pipe causes the underlying     file descriptor to stay open, even though we have closed the stream     within elasticsearch.          this commit changes the controller spawner to pipe stdout/stderr, and     creates pump threads.          relates #85758","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 0, 0, 3, 0]","1","1","1"
"tokenservice decode jwts, change warn to debug (#86498)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","1","1"
"add annotation for disabling security manager in tests (#86706)          the elasticsearch test framework initializes a test security manager, so     that tests run in a similar environment to that which we run in     production. however, some tests need to run without security manager     because they do `evil` things, like setting adding and removing jvm wide     shutdown hooks. currently these tests must exist in separate projects,     mostly under qa/evil-tests, so that the security manager can be disabled     for the entire jvm with the tests.security.manager system property. the     separation between these tests and the other tests for the server makes     development of these tests more difficult, especially the inability to run     these within intellij without manually adding additional sysprops.          this commit adds a new mechanism to disable security manager for these     tests. a new `@nosecuritymanager` annotation can be added to a test     suite. estestcase detects this annotation and removes the security     manager for the duration of that test suite. we could potentially allow     this per test as well, but i started with the simple suite wide     strategy. one example test is converted. the rest will be converted in     followups.","[0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","0","0","1"
"correctly calculate disk usage for frozen data tier telemetry (#86580)          the telemetry for data tiers was using the size in bytes, however, for     the frozen tier using searchable snapshots, this was the disk usage     rather than the size of the actual data.          this commit changes the telemetry to use `total_data_set_size` as     introduced in #70625 so that the telemetry is correct.          resolves #86055","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]","1","1","1"
"move static plugin loading methods from pluginsservice to util class (#86701)          * move static plugin loading methods to util class          we had a set of utility methods in pluginsservice that were public and     static so that the plugin cli tool could use them. here, we move those     methods to a utility class so that the plugin cli doesn't need to import     pluginsservice. for the same reason, we also move     `pluginsservice.bundle` to a top-level class called `pluginbundle.`     finally, we move tests to the appropriate test classes.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0]","1","1","1"
"[ml] express lane inference (#86571)          adds an (internal) option to prioritise certain inference requests over others     allowing those requests to skip the queue. ordering is handled by a priorityqueue.","[0, 0, 0, 0, 3, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 10, 0]","0","0","1"
"user profile - add caching for hasprivileges check (#86543)          this pr adds a new cache for hasprivileges checks so that the same check     for the same role is short-circuited for performance. the new cache is     attached to role. since role itself is cached, we avoid having to manage     the new cache lifecyle separately, e.g. exposing new clear cache     endpoint etc.          as discussed, the cache is currently only applied to simple named roles,     i.e. it works for regular users but not api keys. this is acceptable for     now since api keys cannot have user profiles.     ","[0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0]","0","0","1"
"grants `kibana_system` reserved role access to endpoint event streams. (#86702)          * grants  reserved role access ep event streams.          * fix test for over permissions.          * add an additional test.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0]","1","0","0"
"make internaltestartifactbaseplugin rely on javabase plugin explicit (#86719)          the internaltestartifactbaseplugin relies on the javabase plugin as it     requires sourcesets and javabaseextensions when in use. this change     makes this explicit allowing using the plugin without any other plugin     applied","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","1","1"
"fix javadoc plugin func tests on windows (#86674)          handle special javadoc options path format","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0]","1","0","0"
"simplify reaper tests to use spock (#86721)          related to #86720","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"port qa projects to use javaresttest and yamlresttest (#86703)          do not use deprecated elasticsearch.rest-test plugin","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"move datastreammetadata update code into datastreammetadata class (#86718)          follow up to #86673 hiding the immutable open map implementation details from the public interface     of this class.","[0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 42, 2, 0, 2, 5, 0]","0","1","0"
"enhance the migrate to tiers action message (#86573)          this instructs the users to first stop ilm before calling the     migrate to tiers api.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"simplify entry creation (#86430)          replace abstractmap.simpleentry with a factory call that creates an     immutable entry.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","0","0","1"
"remove remaining single arg parameterizedmessages (#86715)          this commit removes the remaining parameterizedmessages that take a     single argument, this time where the argument contains method calls.     this was again done almost entirely through find/replace with regex in     intellij.          relates #86549","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0]","0","1","1"
"role apis allow internal role names (#86604)          internal users have internal role names associated with them (e.g.,     _system and _xpack). currently, these role names are `reserved` in     that end-users can't create roles with clashing names. this pr removes     this restriction. the reasoning is similar to #86326:          for one, internal role names are not directly used during     authorization. authorization for internal users follows a separate     path, leveraging the role descriptor that each internal user defines     directly. as such, internal roles and end-user defined roles do not     interfere with each other.          by removing the restriction, the pr decouples the implementation     details of internal users from our end-user apis, which allows us to     evolve these details without introducing breaking changes.          closes #86480","[0, 0, 0, 0, 11, 0, 2, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 96, 22, 2, 11, 24, 0]","1","1","1"
"use immutableopenmap for datastreammetadata to speed up ds operations (#86673)          this is orders of magnitude faster than the immutable jdk map operations.","[0, 0, 0, 0, 0, 4, 1, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 22, 0]","1","1","1"
"[test] ensure all requests are scheduled before testing cancellation (#86653)          the shard search request can sometimes be slow. if it is stuck before it     is even scheduled by the task manage, the subsequent cancellation gets     stuck too. this pr adjust the assertions so that it fails earlier in     this situation rather than later which results into a more confusing     error message. it also double the wait time to help the sometimes slow     test suites.          resolves: #86565","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","1","1"
"convert most single arg parameterized message to direct strings (#86649)          this commit converts most parameterizedmessages which take one argument     to direct logging messages. this was done with regex search/replace in     intellij. it does omits if those single arguments have any parenthesis     (cast or method call). those will be done in a followup.          relates #86549","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 1, 210, 0]","0","1","1"
"tsdb: initial reindex fix  (#86647)          it turns out that there is a fairly simple recipe for reindexing to a     `time_series` index:     1. if you are reindexing from a time series index to a time series index     and *not* changing the `@timestamp` or dimensions it `just     works`(tm).     2. if you are reindexing from a standard index with a standard random     `_id` you should clear it on reindex.     3. if you are reindexing from tsdb index to a tsdb index and modifying a     dimension or `@timestamp` then you should clear the `_id`.          this is not pleasant to have to remember. but it doesn't crash!          * tsdb: initial reindex fix          this teaches reindex the smallest thing that it needs to know about     tsdb: `_id` is automatically generated. armed with that knowledge     reindex now doesn't attempt to copy the `_id` when writing to a tsdb     index.          important: if the index doesn't yet exist it will *assume* that the     index will be created in `standard` mode. we can detect what mode it     *should* be created with in a follow up change.     ","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"port all remaining xpack plugin projects away from deprecated rest-test plugin (#86626)          - use internal java rest test or internal yaml rest test plugin instead          this is part of https://github.com/elastic/elasticsearch/pull/85491/","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","1","1","1"
"avoid breaking add/clear voting exclusions (#86657)          adding and clearing voting exclusions is part of the steps an operator/orchestration     will take to change topology of a cluster. it is therefore important that as much as     possible these do not fail, and we therefore now bypass the circuit breaker for the     associated rest and transport actions.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","0","1"
"[ml] make autoscaling and task assignment use same memory staleness definition (#86632)          previously autoscaling used a staleness definition of ~7 minutes     and task assignment used a staleness definition of ~90seconds.          this could lead to the assignment explanation of tasks not being     `awaiting lazy assignment` at the moment when autoscaling ran,     thus preventing an autoscaling decision being made.          the solution is to always use the same definition of staleness in     the memory tracker. this is set to the maximum of what the two     interested parties suggest.          fixes #86616","[0, 0, 0, 0, 4, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 10, 0]","1","0","0"
"add master_timeout support to voting config exclusions apis (#86670)          today the add/clear voting config exclusions apis route a request to the     master node but do not expose the usual `?master_timeout` parameter     allowing to change the timeout for this phase of execution. this commit     adds the missing parameter.","[0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 5, 0]","0","0","1"
"reroute after migrating to data tiers routing (#86574)          ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0]","0","0","1"
"[ml] fix max_model_memory_limit reported by _ml/info with autoscaling (#86660)          previously the _ml/info endpoint took account of lazy nodes that     were not added to the cluster, but didn't take account of the     possibility of lazy nodes already in the cluster being able to     scale up to a larger size. this meant that the ui could incorrectly     cap the model_memory_limit that could be configured for new jobs     in autoscaling cloud clusters where the tier limit meant only one     node per availability zone was possible. this pr fixes that case.          fixes elastic/kibana#131954","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0]","1","0","0"
"use taskcancelledexception in tmna (#86659)          in #72157 we made it so that cancelling the task that a     `transportmasternodeaction` was executing causes the action to fail with     a `java.util.concurrent.cancellationexception`. this exception is     treated as a `500 internal server error` which results in `warn`-level     logs, but cancelling a task is normal and expected behaviour and should     not be logged (see #73524).          this commit fixes this by using a `taskcancelledexception` instead,     since this exception maps to a `400 bad request` and generates no logs.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]","1","0","0"
"port gradle docs test plugin to use internal yaml rest test plugin (#86598)          remove usage of deprecated elasticsearch.rest-test in docstestplugin          we keep some files in src/test in docs projects as moving them would require more changes     in build-docs project outside this repository","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"get hidden indices stats in `get _cat/shards` (#86601)          passes a permissive `indicesoptions` to the indices stats request used     within `get _cat/shards` so that it retrieves stats for hidden indices     by default.          also passes the same `indicesoptions` to the cluster state request so     that the two requests get consistent sets of indices.          also parallelises the two requests since there's no dependency between     them.          closes #84656          also relates #32238 since the more permissive `indicesoptions` used here     permits closed indices, which means `get _cat/shards` will not throw an     exception in security-enabled clusters containing closed indices behind     aliases.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]","1","1","1"
"convert no arg parameterized message to direct strings (#86631)          this commit converts all parameterizedmessages which take no arguments     to direct logging messages. there is no need for lazy evaluation since     these strings are static.          relates #86549","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]","0","0","1"
"refactor code to avoid jdk bug: jdk-8285835 (#86614)          refactor code in datehistogramaggregator$fromdaterange::adapt     to avoid openjdk c2 compiler crash with jdk 18.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 0]","0","0","1"
"update painless lookup for modules (#86625)          when we move to modules, public lookup has only access to public members     of exported packages. for painless itself this is not sufficient to     lookup public members within its own module, since painless need not     export all of the packages that it requires access too.          the solution is to use a lookup that holds the module mode for self     introspection.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","1","1","1"
"remove immutableopenmap from getindexresponse (#86624)          this commit converts the maps exposed from getindexresponse to map.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 7, 0]","0","0","1"
"[ml] rename threading params in _start trained model deployment api (#86597)          when starting a trained model deployment the user can tweak performance     by setting the `model_threads` and `inference_threads` parameters.     these parameters are hard to understand and cause confusion.          this commit renames these as well as the fields where their values are     reported in the stats api.          - `model_threads` => `number_of_allocations`     - `inference_threads` => `threads_per_allocation`          now the terminology is as follows.          a model deployment starts with a requested `number_of_allocations`.     each allocation means the model gets another thread for executing     parallel inference requests. thus, more allocations should increase     throughput. in its turn, each allocation is may be using a number     of threads to parallelize each individual inference request.     this is the `threads_per_allocation` setting and increases inference     speed (which might also result in improved throughput).","[0, 0, 0, 0, 11, 12, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 4, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, 0, 0, 22, 22, 4, 0, 48, 0]","1","1","1"
"hide immutableopenmap in indexmetadata (#86589)          indexmetadata has several immutableopenmaps in its implementation.     however, the getters for those members expose immutableopenmap when map     works just fine. this commit changes the return types of these methods     from indexmetadata, so that the indexmetadata implementation can be     changed independently.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","0","1","1"
"synthetic source (#85649)          this attempts to shrink the index by implementing a `synthetic _source` field.     you configure it by in the mapping:     ```     {     `mappings`: {     `_source`: {     `synthetic`: true     }     }     }     ```          and we just stop storing the `_source` field - kind of. when you go to access     the `_source` we regenerate it on the fly by loading doc values. doc values     don't preserve the original structure of the source you sent so we have to     make some educated guesses. and we have a rule: the source we generate would     result in the same index if you sent it back to us. that way you can use it     for things like `_reindex`.          fetching the `_source` from doc values does slow down loading somewhat. see     numbers further down.          ## supported fields     this only works for the following fields:     * `boolean`     * `byte`     * `date`     * `double`     * `float`     * `geo_point` (with precision loss)     * `half_float`     * `integer`     * `ip`     * `keyword`     * `long`     * `scaled_float`     * `short`     * `text` (when there is a `keyword` sub-field that is compatible with this feature)               ## educated guesses          the synthetic source generator makes `_source` fields that are:     * sorted alphabetically     * as `objecty` as possible     * pushes all arrays to the `leaf` fields     * sorts most array values     * removes duplicate text and keyword values          these are mostly artifacts of how doc values are stored.          ### sorted alphabetically     ```     {     `b`: 1,     `c`: 2,     `a`: 3     }     ```     becomes     ```     {     `a`: 3,     `b`: 1,     `c`: 2     }     ```          ### as `objecty` as possible     ```     {     `a.b`: `foo`     }     ```     becomes     ```     {     `a`: {     `b`: `foo`     }     }     ```          ### pushes all arrays to the `leaf` fields     ```     {     `a`: [     {     `b`: `foo`,     `c`: `bar`     },     {     `c`: `bort`     },     {     `b`: `snort`     }     }     ```     becomes     ```     {     `a` {     `b`: [`foo`, `snort`],     `c`: [`bar`, `bort`]     }     }     ```          ### sorts most array values     ```     {     `a`: [2, 3, 1]     }     ```     becomes     ```     {     `a`: [1, 2, 3]     }     ```          ### removes duplicate text and keyword values     ```     {     `a`: [`bar`, `baz`, `baz`, `baz`, `foo`, `foo`]     }     ```     becomes     ```     {     `a`: [`bar`, `baz`, `foo`]     }     ```     ## `_recovery_source`          elasticsearch's shard `recovery` process needs `_source` *sometimes*. so does     cross cluster replication. if you disable source or filter it somehow we store     a `_recovery_source` field for as long as the recovery process might need it.     when everything is running smoothly that's generally a few seconds or minutes.     then the fields is removed on merge. this synthetic source feature continues     to produce `_recovery_source` and relies on it for recovery. it's *possible*     to synthesize `_source` during recovery but we don't do it.          that means that synethic source doesn't speed up writing the index. but in the     future we might be able to turn this on to trade writing less data at index     time for slower recovery and cross cluster replication. that's an area of     future improvement.          ## perf numbers          i loaded the entire tsdb data set with this change and the size:          ```     standard -> synthetic     store size  31.0 gb ->  7.0 gb  (77.5% reduction)     _source  24695.7 mb -> 47.6 mb  (99.8% reduction - synthetic is in _recovery_source)     ```          a second _forcemerge a few minutes after rally finishes should removes the     remaining 47.6mb of _recovery_source.          with this fetching source for 1,000 documents seems to take about 500ms. i     spot checked a lot of different areas and haven't seen any different hit. i     *expect* this performance impact is based on the number of doc values fields     in the index and how sparse they are.     ","[0, 0, 0, 4, 102, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 11, 0, 0, 2, 0]","1","1","1"
"disable get api on legacy indices (#86594)          the get api relies under the hood on accessing postings to lookup the _id and retrieve the corresponding document.     guaranteeing this access via postings is not something we would like to guarantee on archive indices. while we are     adding `text field support` for archive indices, we reserve the flexibility to eventually swap that out with a `runtime-text     field` variant, and hence only provide those capabilities that can be emulated via a runtime field. doing the same for     `get` would mean doing a full scan of the index (using stored fields), which is counterintuitive to what the get api is     meant to be used for (quick lookup of document). we would therefore rather not have the api accessible on archive     indices.          relates #81210","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"support geo label position as runtime field (#86154)          we do this differently for each geometry type:          * for points we return the point     * for multipoint the centroid is unlikely to be one of the points,     so we choose a point closest to the middle of the bounding box.     * for linestring we choose the first line-segment in the triangle tree, and return its center.     * for polygons we choose the centroid, but check if it is contained within the polygon.     if not, we choose the first triangle in the triangle tree and return its center (average point)          the use of the first entry in the triangle tree is a technique to get a likely approximate center,     while also being high performance.","[0, 0, 0, 2, 31, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 27, 0, 0, 7, 0]","1","1","1"
"refactor parameterizedmessage usages in action/admin/cluster/* to use message supplier #86576          relates #86549          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","1","1","1"
"make embedded class loader module aware (#86355)          this change adds support to embedded class loader to load the provider     and implmentation dependencies as modules - within their own module     layer - when the caller itself is a named module. currently, this code     is not yet triggered during deployment, since the caller is always an     unnamed module, but the caller will be moularized in a subsequent     change.","[0, 0, 0, 0, 4, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 1, 2, 0]","0","0","1"
"port javadoc configuration logic into a binary plugin (#86471)          also adding test coverage and fixing certain issues we stumbled into          when resolving project dependencies of compileclasspath we need to use alldependencies instead of dependencies as usually no dependencies are added directly to compileclasspath but via implementation, compileonly and api and friends     fixed javadoc setup for projects using shadowed dependencies via shadow plugin     fixed dealing with skipped javadoc tasks in referenced dependent projects.     in general this pr only fixes expected javadoc generation as it was intended before this pr.          this also contains some tweaks to our gradle integration test fixtures for setting up and debugging test projects","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","1","0","0"
"simplify immutable map creation (#86547)          this commit replaces the static block that wraps map with immutable     wrapper with immutable map collector.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"port xpack plugins projects away from elasticsearch rest test gradle plugin (#86562)          this deprecates the elasticsearch.rest-test plugin and elasticsearch.standalone-rest-test and ports     all usages of them in x-pack/plugins. other usages will be removed in a few upcoming prs to not have one >300file pr          when all usages have been addressed we're going to remove those gradle plugins from the codebase.          this pr is a subset of #85491 which got just too big to handle imo","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0]","0","0","1"
"removing extra spaces from message (#86584)          some messages in the shardsavailabilityhealthindicatorservice had an     extra space. this commit removes them.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"ql: cleanup bwc tests for unsupported version (#86336)          since the jump to 8.x we no longer need some of the version switches in     the bwc tests because we no longer test against version before 7.17.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 16, 0]","1","1","1"
"adding potential impacts to remaining health indicators (#86197)          the ability to add impacts to indicators was added in #84899, but     impacts for all indicators other than shards availability were left     empty. this commit adds potential impacts for the other indicators.","[0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 7, 0]","0","0","1"
"switch to openjdk and upgrade to 18.0.1 (#86554)          adoptium releases are very slow to release across multiple platforms.     switch back to oracle's openjdk releases and upgrade.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","0","0","1"
"[ml] fix distribution change check for change_point aggregation (#86423)          there are certain scenarios where using apache math's built in kstest check fails.          when strict is true, it requires the probability to be expressed as an inequality and typically causes 0 to be the pvalue calculated. this is most likely due to numerical resolution problems.          switching to strict: false fixes this. we only want to return that a change point is a distribution change if no only change type could be found or other change type pvalues were large.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"include error message and stack trace. (#86569)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"add time series related information to get data stream api (#86395)          in case if a data stream is a time series data stream then include time series information.     this includes the continuous temporal ranges a time series data stream encapsulates.     this is computed based on combing the index.time_series.start_time and index.time_series.end_time     ranges of all backing indices of a time series data stream          closes #83518","[0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 9, 0, 0, 1, 0]","0","0","1"
"[ml] upgrade ojalgo to 51.2.0 (#86566)          ojalgo 51.2.0 brings significant improvements to memory utilization     and speed for the linear solver we use to determine assignment plans     for trained models.          in addition to updating the library, we now make use of the ability     to use the solver in sparse mode which uses much less memory at the cost     of speed. thus we determine an intermediate threshold where we switch     from dense to sparse solver.          testing showed a significant decrease in memory use. in particular,     the worse cases regardless of dense/sparse solving should now not be using     more than ~40mb which is much less than what we allowed previously.          the dense solver is faster than before. even when switching to the sparse solver,     it is not much slower than what the dense solver achieved previously.          relates #86496","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 7, 0]","0","0","1"
"health api explain query param (#86410)          the health api has a notion of details within each health indicator that is returned. these details can sometimes be     expensive to compute or transfer. this change allows a user to specify whether the details are generated and     returned. by default now all details are generated and returned (previously this was only the case if a component     was specified in the request). this behavior can be changed with the explain query param.     closes #86215","[0, 0, 0, 0, 3, 1, 0, 0, 1, 0, 0, 0, 3, 0, 2, 2, 0, 0, 0, 1, 0, 0, 9, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 9, 0, 0, 22, 0]","1","1","1"
"cleanup+speed-up datastream metadata handling (#86470)          no need to copy maps so often, this was quite slow in many-shards     benchmarking which uses lots of datastreams.     ","[0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 6, 1, 4, 11, 0]","1","1","1"
"remove redundant indexcomponent interface (#86538)          this interface is pointless as it's effectively only inherited by `abstractindexcomponent` in practice.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 7, 0]","0","0","1"
"change aggregation path element errors to be 400s (#86532)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"fix bounded hexagonal grids when they contain the bin on one of the poles (#86460)          this commit adds a special handle for those cases.","[0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 1, 0, 0]","1","0","0"
"do not apply standaloneresttestplugin in standalonetestplugin (#86400)          as we are moving away from standaloneresttestplugin (see https://github.com/elastic/elasticsearch/pull/85491) we want to reduce the surface of that plugin.     if rest tests are used a rest test related plugin should be applied","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 3, 0]","1","1","1"
"faster get _cluster/settings api (#86405)          the existing api to retrieve the cluster settings relies on     pulling in the full cluster state, which can be very expensive.          this change adds a dedicated cluster settings api, avoiding     serializing the full cluster state.          co-authored-by: david turner <david.turner@elastic.co>","[0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 0, 0, 4, 0]","0","0","1"
"add getresolution method to h3 (#86519)          ","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0]","0","0","1"
"disable template cleanup in multiversionrepositoryaccessit to fix it in older versions (#86358)          i could not find a clean way of making the template cleanup work with very old versions.     i found that it's also disabled in other tests dealing with old versions (full cluster restart tests)     so i'm disabling it here as well to finally make these important tests functional again.          closes #82569","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"remove cstl#onnolongermaster (#83420)          implementations of `clusterstatetasklistener#onnolongermaster` almost     universally do the same thing as `cstl#onfailure` except for differences     in logging. in most cases for logging purposes we should treat not being     the master the same as failing to commit the cluster state, but we don't     do so and this can generate a lot of log noise on a master failure. in     other places we rely on the default implementation of `onnolongermaster`     and react to the type of the exception in the `onfailure` handler as     needed.          to simplify the situation, this commit combines `onnolongermaster` and     `onfailure` everywhere and harmonises the logging behaviour for     `failedtocommitclusterstateexception` and `notmasterexception`.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","1","1","1"
"require index.mode=time_series for creating time series data streams (#86441)          prior to this change the `index.routing_path` was required in order for     data streams to be created in time series mode.          this commit changes that by also requiring `index.mode` index setting to     be set to `time_series`. the `index.routing_path` remains a required setting,     but it is no longer used to determine whether a data stream should be created     in time series mode.          the `index.mode` index setting will no longer automatically be added backing indices.     this was done by the `datastreamindexsettingsprovider` class and this class will not only     automatically add the `index.time_series.start_time` and `index.time_series.end_time`     index settings.          relates #74660","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 2, 8, 0]","0","0","1"
"remove failing test which mocked now sealed inetaddress class (#86490)          fixes #86418","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"allow to sort search results by version value returned by painless script (#85990)               version field types have specific semantics in terms of ordering, ie. semver.     this fix adds a new `version` type for script sorting (in addition to the existing `number` and `string` options)     to specify semver ordering semantics.","[0, 0, 0, 1, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0, 1, 2, 0]","1","0","0"
"abstractanalyzerprovider does not need to extend abstractindexcomponent (#86537)          remove the inheritance here to make instances smaller and speed up many-shards benchmarks a little.     did not remove the dead arguments from the constructors in this pr as that would have been a     very noisy change.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 54, 0]","0","1","1"
"complete listener on rejection in followerschecker (#86259)          in #83576 we made it so that forking off the transport thread when     handling a follower check might be rejected if we're shutting down. in     that case we don't pass the rejection exception back out and instead     rely on the transport connection's close to notify the caller. we also     manipulate the transport channel directly which misses some exception     cases. this commit adjusts the implementation to fix these things.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"block joins while applier is busy (#84919)          certain cluster appliers perform i/o or other heavy computations and in     extreme circumstances may take a significant amount of time to apply a     cluster state. the master considers a node to be unhealthy if it takes     too long to apply a cluster state. nodes that time out like this are     removed from the cluster, but they will carry on with the slow cluster     state application regardless. if the application takes long enough then     there may be time for the node to rejoin the cluster, time out applying     the state resulting from the rejoin, and be removed again. this can     happen repeatedly and is disruptive to the rest of the cluster.          there is no point in trying to rejoin the cluster while the applier is     busy. with this commit we send the join request from the applier thread,     ensuring that it is not occupied with other work and will therefore be     available to apply the joining state. the commit also adds periodic     logging of the status of ongoing joins to help clarify why it is taking     longer than expected to rejoin the cluster.","[0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 4, 0]","0","0","1"
"log cluster.initial_master_nodes at startup (#86101)          we continue to see occasional cases of clusters with inappropriate     bootstrap config. it can be quite hard to diagnose these cases because     we don't report the bootstrap config anywhere in the logs. this commit     adds that missing logging to simplify the diagnostic process.","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0]","0","0","1"
"awaitsfix for #86530     ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"use cluster health api in validateclusterformed (#85454)          since #76884 in `internaltestcluster#validateclusterformed` we wait for     a correctly-sized cluster state to be applied before entering the     `assertbusy()` loop to wait for the cluster state to be exactly right     everywhere. today we do this by injecting a cluster state observer into     one of the nodes which waits for a cluster state containing a master and     the right number of nodes. with this commit we move to using the cluster     health api which can do the same thing.          by this point any extra nodes have stopped, but there might still be a     stale join request for one of those nodes in the master's queue. this     commit addresses this by also waiting for the master queue to be empty.          closes #81830","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]","0","0","1"
"make the ilm and slm history_index_enabled settings dynamic (#86493)          ","[2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 17, 0, 7, 16, 0]","0","1","0"
"remove ismeta check during rewrite field-caps responses (#86522)          this check is no longer needed because 8.3+ won't handle index     field-caps responses from 7.13 or before.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 9, 0]","1","1","1"
"fixing unit test (#86520)          shardlimitvalidatortests was accidentally broken as part of #85967     because the new assertions in that class were not taking the type of     nodes into account (`normal` or `frozen`). this is a simple change to     take that into account.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"adding a view of master history (#85941)          this commit adds the notion of an in-memory masterhistory of which nodes have been master for the last 30 minutes that is maintained in memory on each node. it is exposed via the masterhistoryservice. this commit also has a transport action so that you can fetch the master history from any node in the cluster, represented as a list of nodeclients. the list is an ordered list of nodes that have been seen as master for the last 30 minutes, with the oldest first. this action is used by the masterhistoryservice exposed for use via the masterhistoryservice. the local and remote master history representations will be used to determine if the master has been stable as part of the health api.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]","0","0","1"
"fix jwt realm generate test (#86484)          add missing sharedsecret scheme to es-client-authentication hearer when printing headers for jwt realm example requests.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"fix plugin command tests newline assertions (#86500)          this commit fixes an edge case that fails on windows where extra     newlines do not match because of the difference in line endings.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","0","0"
"adding a deprecation info api check for too many shards (#85967)          this commit makes sure that there is enough room in a cluster to add a small number of shards during an upgrade. the information is exposed in the deprecation info api as a cluster configuration check.     closes #85702","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 2, 0]","0","0","1"
"[test] replace all mock authentication with concrete objects (#86424)          changes in this pr enables marking the authentication class to final in     a future pr as part of the overall plan for closing down authentication.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 59, 0, 0, 25, 0]","1","1","1"
"[ml] fix question answering config update test apply (#86489)          closes #86487","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]","1","0","0"
"make allocationdecider canremain loop tighter (#86503)          no need to collect a multi decision here (which is surprisingly prominent in the profiling)     when we're not using it in the end anyway.","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0]","0","0","1"
"user profile - request cancellation for suggestprofiles on http disconnect (#86332)          this pr adds support for automatic request cancellation on http     connection drop for the suggestprofiles api. both the suggest     request itself and its child search requests are cancelled once the     incominng http connection is closed.     ","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0]","0","0","1"
"[ml] lower memory threshold for running lp in assignment planner (#86504)          after test failures in ci i retested how much memory is used in the heap     when the assignment planner runs on the limits of the memory threshold.     in this pr we lower the memory threshold before switching to bin-packing     so that the solver should never user more than ~100mb. previously it could     use up to ~200mb.          closes #86496","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]","1","1","1"
"better failure for source-only snapshots of partially/fully mounted indices (#86207)          taking a snapshot of a partially or fully mounted index in a source-only     repository is not supported and stops the data node by throwing an     assertionerror.          instead of throwing such an error, this change simply fails the snapshot     of searchable snapshot shards in source-only repository and report a     better snapshot failure.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0]","1","1","1"
"disabling users includes realm in same-user validation  (#86473)          a validation check prevents users from disabling themselves. the check     is incorrect since it does not factor in realms. users can have     overlapping usernames across realms, and should be able to disable     same-named users in other realms, authorization provided. this pr tweaks     the validation check to account for the source realm.","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 0, 0, 6, 0]","1","1","1"
"fix windows embeddedimplclassloadertests (#86413)          fix windows embeddedimplclassloadertests. remove use of openstream in favor of getresourceasstream.          co-authored-by: ryan ernst <ryan@iernst.net>","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"[s3-repository] support generating aws role session name in case it's not provided (#86255)          the aws sdk actually doesn't require the session name to be set and generates one if     it's not provided via the aws_role_session_name environment variable.          see #52625","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0]","0","1","0"
"fix min node version before state recovery (#86482)          we use the minimum node version in the cluster state to make decisions     about backwards compatibility (e.g. to choose newer actions in the rest     layer only if all nodes will support it). once the cluster is fully     formed we reject attempts by older nodes to join the cluster so that the     minimum node version only ever increases, which makes     backwards-compatibility decisions safe.          however, it's possible that the rest layer will make decisions about     backwards compatibility before the cluster is fully formed. in this     state, older nodes may still join the cluster and may therefore see     actions that they do not understand.          with this commit we report no nodes to the rest layer until the cluster     is fully-formed, and change the minimum node version in an empty cluster     to be the minimum compatible version. this means the rest layer will     operate in a maximally-compatible mode until the cluster is formed.          relates #86405","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0]","1","0","0"
"has privileges api for profiles (#85898)          this introduces a new security api `_security/profile/_has_privileges`     that can be used to verify which users have the requested privileges,     given their associated user profiles. multiple profile uids can be specified     in a single has privileges request.          this is analogous to the existing has privileges api. it also uses the same     format for specifying the privileges to be checked, and should be used in     the same situations (ie to run an authorization preflight check or to verify     privileges over application resources). however, unlike the existing     has privilege api, this can be used to check the privileges of multiple     users (not only of the currently authenticated one), but the users must     have an existing profile, and the response is binary only (either it has or     it does not have the requested privileges).     calling this api requires the `manage_user_profile` cluster privilege.","[0, 0, 0, 0, 6, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 24, 49, 1, 1, 18, 0]","1","1","1"
"set serverauth extended key usage for generated certificates and csrs. (#86311)          this commit extends `certgenutils` to allow configuring     `extendedkeyusage` extension for generated certificates     and adds `id_kp_serverauth` (1.3.6.1.5.5.7.3.1) key usage     to places where we know that the certificate is meant only     to be used for server authentication.          closes #81067","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0]","0","0","1"
"don't require www-authenticate in oidc userinfo (#86031)          the openidconnect authenticator attempts to handle errors in the     userinfo endpoint, and will consult the www-authenticate header if it     exists, in order to provide diagnostic information.          however, there was a bug where it assumed that the www-authenticate     header would always exist. this change fixes this incorrect     assumption.","[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]","1","0","0"
"clean up and better document jvmoptionsparser (#86448)          this change preparse the jvmoptionsparser for #85758 by moving the shell     specific behavior, like printing output, to the main method, and making     the main function take in all its parameters. additionally the main     method to determine the jvm options is documented a bit.          relates #85758","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 4, 0, 0, 4, 0]","0","0","1"
"[ml] mute qa update test apply issue #86487 (#86488)          related: https://github.com/elastic/elasticsearch/issues/86487","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"unmute some monitoring tests (#86483)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]","1","1","1"
"[ml] add new trained_models/{model_id}/_infer endpoint for all supervised models and deprecate deployment infer api (#86361)          this commit adds a new `_ml/trained_models/{model_id}/_infer` api. this api works for both native nlp models and supervised models trained via data frame analytics.          the format of the api is the same as the old `_ml/trained_models/{model_id}/deployment/_infer`. taking a `docs` and an `inference_config` parameter.          this pr also deprecates the old experimental `_ml/trained_models/{model_id}/deployment/_infer` api.          the biggest difference is that the response now nests all results under an `inference_results` object.          closes: https://github.com/elastic/elasticsearch/issues/86032","[0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 3, 0, 0, 40, 0]","0","0","1"
"add preflight checks to health api to ensure health is obtainable (#86404)          this pr introduces an idea of preflight health indicator services to the new health service. preflight indicators are     structurally identical to regular indicators, but they are executed first when calculating health and conditionally block     downstream indicators from running on an unstable or unknown cluster state.","[0, 0, 0, 0, 8, 7, 0, 2, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 18, 0, 0, 16, 0]","0","0","1"
"remove legacyctral from metadataindextemplateservice (#86459)          relates #83784, #86017","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"upgrade to lucene 9.2 snapshot efa5d6f4d43 (#86227)          notable changes include:          count implementations for multirangequery and indexsortednumericdocvaluesrangequery, which may speed up certain aggregations     more efficient decoding of docids in bkd reader","[0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0]","0","1","1"
"remove immutableopenintmap (#86447)          all uses of the class have been removed, so this commit now removes the     tests and the class itself.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"move cli shutdown hook to clitoollauncher (#86412)          each command subclass can implement close() so that resources will be     cleaned up on exceptional exit like sigint. this is implemented through     a shutdown hook added in the superclass constructor. however, this hook     makes testing difficult because the hook cannot be added in normal     tests, so a flag must be overriden when testing command classes.          this commit moves the shutdown hook handling into the clitoollauncher     that creates the command. it also adds non-evil tests that check how the     hook runs, in place of the old evil tests that actually registered a     real shutdown hook.          relates #85758","[0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 5, 6, 0, 0, 2, 0]","0","0","1"
"user apis allow use of internal usernames (#86398)          this pr removes api restrictions that prevent user-related actions     (putuser, deleteuser, etc.) to be performed on users with names     clashing with internal users (e.g., _system). internal users are used     for issuing requests within the cluster and not accessible at the rest     layer; they are conceptually and practically separate from users     created through the api (they do not belong to the same realm and     follow different authentication flows). as such it's safe to remove the     current restriction. by removing, we are more consistent with how     usernames are treated across other realms (name re-use is allowed), and     ease evolving internal users without interfering with end-user     experience.          closes #86326","[0, 0, 0, 0, 13, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 179, 9, 0, 4, 1, 0]","1","1","1"
"faster routingtable builder (#86465)          copying the map one by one gets very expensive for large tables     => leveraging the faster copy constructor that clones the map     internally gives a non-trivial speedup to many shards benchmark     bootstrapping.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0]","0","0","1"
"[ml] tests of the named writable registry for inference updates (#85870)          ","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0]","1","1","1"
"[ml] adjust automatic jvm heap sizing for dedicated ml nodes (#86399)          previously the jvm heap size on dedicated ml nodes was as follows     when automatic jvm heap sizing was used:          - 40% of memory if total memory < 2gb     - 25% of memory for total memory between 2gb and 8gb     - 2gb if total memory > 8gb          this formula had two major drawbacks:          1. there was no way to increase the ml node jvm size beyond 2gb.     if for some reason 2gb wasn't enough (e.g. a huge cluster state)     then there was no workaround.     2. the formula was not reversible - there are jvm heap sizes that     could arise from 2 different total memory sizes. this complicated     autoscaling calculations.          this pr switches to a simpler formula that does not suffer these     drawbacks. the new formula is:          jvm heap size = 40% of total memory up to 16gb     + 10% of total memory over 16gb          this is always rounded down to the next lower whole megabyte to     match what's done for other node types.          it's now possible to increase the jvm heap size on dedicated ml nodes     indefinitely by increasing the node size. and there are no nasty     discontinuities in the formula that make the inverse hard to calculate.","[0, 0, 0, 0, 2, 14, 0, 3, 7, 0, 0, 19, 88, 10, 14, 16, 0, 0, 4, 0, 1, 4, 1, 5, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 45, 151, 14, 30, 236, 0]","1","1","1"
"[ml] update the number of allocations per nlp process (#86277)          adds a method to deploymentmanager to update the number of     allocations per process as implemented in elastic/ml-cpp#2258.          ","[0, 0, 0, 0, 10, 2, 1, 0, 2, 2, 0, 5, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 5, 0, 0, 0, 1, 0, 0, 2, 3, 5, 0, 0, 0, 0, 0, 0, 23, 8, 0, 8, 49, 0]","0","0","1"
"batch reroute in transportclusterupdatesettingsaction (#86451)          there's no need for the followup reroute task to wait for acks from all     nodes (indeed it sometimes reports `acknowledged: true` even if the     update fails). dropping the acking reduces this task to a simple     reroute, which can then be batched. this commit does that.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0]","1","1","0"
"remove legacyctral from ingestservice (#86446)          relates #83784, #86017","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","0","0","1"
"cleanup snapshotinprogressallocationdecider a little (#86457)          we already have a stream here, lets not make this needlessly slow via the iterator     when we can have the stream iterate much faster when used directly.     also, looks nicer this way.     ","[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 12, 4, 0, 2, 1, 0]","1","1","1"
"[ml] muting trained model upgrade tests (#86453)          these tests also fail before the java side of     https://github.com/elastic/ml-cpp/pull/2258     is merged.","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"remove remaining immutableopen maps from shard stores response (#86427)          the indicesshardstoresresponse had immutableopenint map removed, but its     use accidentally remained in serialization. thankfully the format for     immutable open maps are interchangable with read java map. this commit     switches to using the new readimmutablemap to read the store statuses.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"
"use hashmap for indexmetadata.insyncallocationids (#86403)          the in sync allocation ids is a mapping from shard to the set of ids     currently being processed. when being built, the metadata uses a sparse     map, only filling a value for a shard as they are put into the builder.     when the final metadata is built, the map is made dense.          this commit converts to using a hashmap instead of immutableopenintmap.     the boxed keys should not cause allocations, as long as number of shards     is lower than 128. long term the map itself should become an array, as     we know the number of shards (much like the dense primaryterms array     here). however, that change will be a little trickier to make, since we     will need to be backward compatible with how diffs are built, currently     using map differences.          relates #86239","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","1","1","1"